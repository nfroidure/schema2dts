{
  "openapi": "3.1.0",
  "info": {
    "version": "0.0.1",
    "title": "diagrams-api",
    "description": "The DiagRAMS API"
  },
  "servers": [{ "url": "https://api.diagrams-technologies.com/v0" }],
  "paths": {
    "/alerts/{alertId}": {
      "delete": {
        "operationId": "deleteAlert",
        "summary": "Remove an alert.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted an alert" }
        }
      }
    },
    "/applications/{applicationId}": {
      "delete": {
        "operationId": "deleteApplication",
        "summary": "Remove an application.",
        "tags": ["applications"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/applicationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted an application" }
        }
      }
    },
    "/interventions/{interventionId}": {
      "delete": {
        "operationId": "deleteIntervention",
        "summary": "Remove a intervention.",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/interventionId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted an intervention" }
        }
      }
    },
    "/projects/{projectId}": {
      "delete": {
        "operationId": "deleteProject",
        "summary": "Remove a project.",
        "tags": ["projects"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/projectId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted an project" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}": {
      "delete": {
        "operationId": "deleteUserOrganisationAlert",
        "summary": "Remove an user's alert.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Succesfully deleted the alert" }
        }
      },
      "get": {
        "operationId": "getUserOrganisationAlert",
        "summary": "Returns an organisation's alert.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/AlertItemResponse" }
        }
      },
      "put": {
        "operationId": "putUserOrganisationAlert",
        "summary": "Upsert an alert.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The alert",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "ce5ca55e-caca-abba-caca-abbacacacaca",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "assetId": "a5537000-0000-0000-0000-000000000001",
                "interventionId": "a17e4a4c-e000-0000-0000-000000000000",
                "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                "sensorsIds": [
                  "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                  "5e450402-b0b0-b0b0-b0b0-abbacacab0b0"
                ],
                "imagesIds": [
                  "14614614-0000-0000-0000-000000000000",
                  "14614614-0000-0000-0000-000000000001"
                ],
                "sensorsValues": ["t"],
                "eventsIds": [],
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z",
                "data": {
                  "code": "custom:my_own_message",
                  "i18nMessage": {
                    "fr-FR": "Un message de diagnostic en fran√ßais",
                    "en-US": "A diagnostic message in english"
                  },
                  "priority": "not_set",
                  "severity": "critical",
                  "viewed": false,
                  "details": {},
                  "assignedUsersIds": [
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab2b2",
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab3b3"
                  ],
                  "comment": "A comment by manager"
                }
              },
              "schema": { "$ref": "#/components/schemas/AlertModel" }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/AlertItemResponse" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/attachments/{attachmentId}": {
      "delete": {
        "operationId": "deleteUserOrganisationAlertAttachment",
        "summary": "Remove an alert attachment.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/attachmentId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Deleted the alert attachment" }
        }
      },
      "put": {
        "operationId": "putUserOrganisationAlertAttachment",
        "summary": "Upsert an alert attachment.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/attachmentId" },
          { "$ref": "#/components/parameters/FileName" },
          { "$ref": "#/components/parameters/FileSize" },
          { "$ref": "#/components/parameters/AttachmentFileType" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Attachment" },
        "responses": { "201": { "description": "Saved the alert image" } }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/images/{imageId}": {
      "delete": {
        "operationId": "deleteUserOrganisationAlertImage",
        "summary": "Remove an alert image.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/imageId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": { "204": { "description": "Deleted the alert image" } }
      },
      "put": {
        "operationId": "putUserOrganisationAlertImage",
        "summary": "Upsert an alert image.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/imageId" },
          { "$ref": "#/components/parameters/FileName" },
          { "$ref": "#/components/parameters/FileSize" },
          { "$ref": "#/components/parameters/ImageFileType" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Image" },
        "responses": { "201": { "description": "Saved the alert image" } }
      }
    },
    "/users/{userId}/organisations/{organisationId}/applications/{applicationId}": {
      "delete": {
        "operationId": "deleteUserOrganisationApplication",
        "summary": "Remove an user's organisation's applications.",
        "tags": ["applications"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/applicationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted the application" }
        }
      },
      "put": {
        "operationId": "putUserOrganisationApplication",
        "summary": "Upsert an user's organisation's application.",
        "tags": ["applications"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/applicationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user's organisation's application",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "authorId": "41c041c0-0000-0000-0000-000000000000",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "data": {
                  "name": "Customer Application",
                  "description": "Customer Application data bridge",
                  "allowedScopes": ["data", "oauth2"],
                  "allowedGrantTypes": ["refresh"],
                  "callbackUrl": "http://localhost",
                  "isActive": true
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/ApplicationModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created application",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "applications": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Customer Application",
                        "description": "Customer Application data bridge",
                        "allowedScopes": ["data", "oauth2"],
                        "allowedGrantTypes": ["refresh"],
                        "callbackUrl": "http://localhost",
                        "isActive": true
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "secret": "secret"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ApplicationItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}": {
      "delete": {
        "operationId": "deleteUserOrganisationIntervention",
        "summary": "Remove an user's organisation's interventions.",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/interventionId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted an intervention" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}/images/{imageId}": {
      "delete": {
        "operationId": "deleteUserOrganisationInterventionImage",
        "summary": "Remove an intervention image.",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/interventionId" },
          { "$ref": "#/components/parameters/imageId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Deleted the intervention image" }
        }
      },
      "put": {
        "operationId": "putUserOrganisationInterventionImage",
        "summary": "Upsert a intervention image.",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/interventionId" },
          { "$ref": "#/components/parameters/imageId" },
          { "$ref": "#/components/parameters/FileName" },
          { "$ref": "#/components/parameters/FileSize" },
          { "$ref": "#/components/parameters/ImageFileType" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Image" },
        "responses": {
          "201": { "description": "Saved the intervention image" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/memberships/{collaboratorId}": {
      "delete": {
        "operationId": "deleteUserOrganisationMembership",
        "summary": "Remove an organisation's user's membership.",
        "tags": ["users"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          {
            "name": "collaboratorId",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid" },
            "description": "The user id to remove from the organisation."
          },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": {
            "description": "Succesfully deleted the membership from the orgnisation"
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/projects/{projectId}": {
      "delete": {
        "operationId": "deleteUserOrganisationProject",
        "summary": "Remove an user's organisation's project.",
        "tags": ["projects"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/projectId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted the project" }
        }
      },
      "put": {
        "operationId": "putUserOrganisationProject",
        "summary": "Upsert an user's organisation's project.",
        "tags": ["projects"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/projectId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user's organisation's project",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "author": "41c041c0-0000-0000-0000-000000000000",
                "data": {
                  "name": "Customer Project",
                  "description": "A customer project setup by itself.",
                  "projectCode": "bench",
                  "algorithms": ["pipelines"],
                  "bridge": {
                    "type": "pull",
                    "handler": "handlePowerTrackSynchronization",
                    "schedule": "0 0 * * *"
                  },
                  "ingestion": {
                    "handler": "handleDataBenchIngestion",
                    "sourceTopic": "raw",
                    "batchSize": 2000,
                    "delay": 30000
                  },
                  "indexation": {
                    "handler": "handleDataBenchIndexation",
                    "sourceTopic": "enriched",
                    "batchSize": 2000,
                    "delay": 30000
                  }
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/ProjectModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created project",
            "content": {
              "application/json": {
                "example": {
                  "item": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                  "projects": {
                    "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "author": "41c041c0-0000-0000-0000-000000000000",
                      "data": {
                        "name": "Customer Project",
                        "description": "A customer project setup by itself.",
                        "projectCode": "bench",
                        "algorithms": ["pipelines"],
                        "bridge": {
                          "type": "pull",
                          "handler": "handlePowerTrackSynchronization",
                          "schedule": "0 0 * * *"
                        },
                        "ingestion": {
                          "handler": "handleDataBenchIngestion",
                          "sourceTopic": "raw",
                          "batchSize": 2000,
                          "delay": 30000
                        },
                        "indexation": {
                          "handler": "handleDataBenchIndexation",
                          "sourceTopic": "enriched",
                          "batchSize": 2000,
                          "delay": 30000
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ProjectItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/sensors/{sensorId}/series/{valueName}": {
      "delete": {
        "operationId": "deleteUserOrganisationSensorSeries",
        "summary": "Remove an user's organisation's sensor's series.",
        "tags": ["sensors"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorId" },
          { "$ref": "#/components/parameters/valueName" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "204": { "description": "Successfully deleted the sensor series." }
        }
      }
    },
    "/alerts/stats": {
      "get": {
        "operationId": "getAlertsStats",
        "summary": "Returns alerts stats",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "Alerts stats",
            "content": {
              "application/json": {
                "example": [
                  {
                    "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                    "stats": {
                      "discarded": 2,
                      "fixed": 5,
                      "closed": 1,
                      "open": 8,
                      "total": 16
                    }
                  },
                  {
                    "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab1b1",
                    "stats": {
                      "discarded": 2,
                      "fixed": 5,
                      "closed": 4,
                      "open": 0,
                      "total": 11
                    }
                  }
                ],
                "schema": { "$ref": "#/components/schemas/AlertsStats" }
              }
            }
          }
        }
      }
    },
    "/auth/profile": {
      "get": {
        "operationId": "getAuthProfile",
        "summary": "Returns the authenticated user profile.",
        "tags": ["auth"],
        "parameters": [
          { "$ref": "#/components/parameters/cookie" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The actual user profile",
            "content": {
              "application/json": {
                "example": {
                  "item": "41c041c0-0000-0000-0000-000000000000",
                  "users": {
                    "41c041c0-0000-0000-0000-000000000000": {
                      "id": "41c041c0-0000-0000-0000-000000000000",
                      "roles": ["user"],
                      "memberships": [
                        {
                          "roles": ["technician"],
                          "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                          "status": "member",
                          "lastInvitationDate": "2020-01-01T00:00:00Z"
                        }
                      ],
                      "data": {
                        "email": "john.doe@diagrams-technologies.com",
                        "name": "John Doe",
                        "givenName": "John",
                        "familyName": "Doe",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "emailStatus": "bouncing"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/UserItem" }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "operationId": "getMySelf",
        "summary": "Redirect to the user profile.",
        "tags": ["users"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "302": {
            "description": "Redirect to the fully qualified profile path"
          }
        }
      }
    },
    "/openAPI": {
      "get": {
        "operationId": "getOpenAPI",
        "summary": "Get API documentation.",
        "tags": ["system"],
        "responses": {
          "200": {
            "description": "Provides the private Open API documentation",
            "content": {
              "application/json": { "schema": { "type": "object" } }
            }
          }
        },
        "security": [
          {},
          { "bearerAuth": ["admin"] },
          { "basicAuth": ["admin"] }
        ],
        "parameters": [
          {
            "name": "mutedTags",
            "in": "query",
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ]
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}": {
      "get": {
        "operationId": "getOrganisationFactory",
        "summary": "Returns an organisation's factory.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's factory",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "factories": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "F-0001",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "rootAssetsIds": [],
                      "linkedOrganisationsIds": [],
                      "data": {
                        "name": "Minions Factory",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/FactoryItem" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/alerts/stats": {
      "get": {
        "operationId": "getOrganisationFactoryAlertsStats",
        "summary": "Returns organisation's factory's alerts stats.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "Alerts stats",
            "content": {
              "application/json": {
                "example": {
                  "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "stats": {
                    "discarded": 2,
                    "fixed": 5,
                    "closed": 1,
                    "open": 8,
                    "total": 16
                  }
                },
                "schema": { "$ref": "#/components/schemas/AlertsStat" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
      "get": {
        "operationId": "getOrganisationFactoryAsset",
        "summary": "Returns an organisation's factory asset.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/assetId" },
          { "$ref": "#/components/parameters/IncludeChildrenIds" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's factory asset",
            "content": {
              "application/json": {
                "example": {
                  "item": "a5537000-0000-0000-0000-000000000001",
                  "assets": {
                    "a5537000-0000-0000-0000-000000000001": {
                      "id": "a5537000-0000-0000-0000-000000000001",
                      "syncMode": "none",
                      "externalId": "LN-0001",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "currentConfiguration": "main",
                      "currentPhase": "p34",
                      "currentCycle": "c23",
                      "metrics": {
                        "cadency": {
                          "value": 86,
                          "unit": "rotations/minutes",
                          "status": "good"
                        },
                        "output": {
                          "value": 33,
                          "unit": "rotations",
                          "goal": 1664,
                          "status": "good"
                        }
                      },
                      "powerState": "on",
                      "operatingState": "normal",
                      "healthState": "good",
                      "data": {
                        "name": "Minion Area",
                        "tags": [],
                        "type": "area"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/AssetItem" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/assets": {
      "get": {
        "operationId": "getOrganisationFactoryAssets",
        "summary": "Returns an organisation's factory assets.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/OptionalWithAssetsIds" },
          { "$ref": "#/components/parameters/OptionalWithAssetsTypes" },
          { "$ref": "#/components/parameters/OptionalWithRootAssetsFirst" },
          { "$ref": "#/components/parameters/OptionalWithParentsAssetsIds" },
          { "$ref": "#/components/parameters/assetsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/IncludeChildrenIds" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's factory assets",
            "content": {
              "application/json": {
                "example": {
                  "items": ["a5537000-0000-0000-0000-000000000001"],
                  "assets": {
                    "a5537000-0000-0000-0000-000000000001": {
                      "id": "a5537000-0000-0000-0000-000000000001",
                      "syncMode": "none",
                      "externalId": "LN-0001",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "currentConfiguration": "main",
                      "currentPhase": "p34",
                      "currentCycle": "c23",
                      "metrics": {
                        "cadency": {
                          "value": 86,
                          "unit": "rotations/minutes",
                          "status": "good"
                        },
                        "output": {
                          "value": 33,
                          "unit": "rotations",
                          "goal": 1664,
                          "status": "good"
                        }
                      },
                      "powerState": "on",
                      "operatingState": "normal",
                      "healthState": "good",
                      "data": {
                        "name": "Minion Area",
                        "tags": [],
                        "type": "area"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/AssetsItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/labels": {
      "get": {
        "operationId": "getOrganisationFactoryDataLabels",
        "summary": "returns data labels for a given factory",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "example": {},
                "schema": {
                  "type": "array",
                  "additionalProperties": false,
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "key": { "type": "string" },
                      "doc_count": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/events": {
      "get": {
        "operationId": "getOrganisationFactoryEvents",
        "summary": "Returns an organisation's events.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/OptionalWithAssetsIds" },
          { "$ref": "#/components/parameters/OptionalWithAncestorsIds" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/OptionalWithEventsIds" },
          { "$ref": "#/components/parameters/OptionalWithEventType" },
          { "$ref": "#/components/parameters/OptionalsensorsIds" },
          { "$ref": "#/components/parameters/OptionalvaluesNames" },
          { "$ref": "#/components/parameters/OptionalWithUsersFeedback" },
          { "$ref": "#/components/parameters/since" },
          { "$ref": "#/components/parameters/before" },
          { "$ref": "#/components/parameters/size" },
          { "$ref": "#/components/parameters/beforeDate" },
          { "$ref": "#/components/parameters/afterDate" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's events",
            "content": {
              "application/json": {
                "example": {
                  "cursors": {
                    "before": "an_opaque_string",
                    "since": "an_opaque_string"
                  },
                  "total": 1,
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "events": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "type": "realtime_alert",
                      "timestamp": 1609459200000,
                      "data": {
                        "projectCode": "bench",
                        "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                        "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                        "ancestorsIds": [
                          "a5537000-0000-0000-0000-000000000001",
                          "a5537000-0000-0000-0000-000000000002"
                        ],
                        "assetsIds": [
                          "a5537000-0000-0000-0000-000000000001",
                          "a5537000-0000-0000-0000-000000000002"
                        ],
                        "sensorsIds": [
                          "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                          "5e450402-b0b0-b0b0-b0b0-abbacacab0b0"
                        ],
                        "valuesNames": ["voltage", "intensity"],
                        "labels": {
                          "assets": {
                            "values": { "aCustomProp": "a_custom_value" },
                            "tags": ["a_custom_label"],
                            "configurations": ["c4"],
                            "cycles": ["c4c4"],
                            "phases": ["p4"]
                          },
                          "ancestors": {
                            "values": { "aCustomProp": "a_custom_value" },
                            "tags": ["a_custom_label"],
                            "configurations": ["c4"],
                            "cycles": ["c4c4"],
                            "phases": ["p4"]
                          },
                          "tags": [
                            "ATagLabelOfYourChoice",
                            "AnotherTagLabelOfYourChoice"
                          ]
                        },
                        "startDate": "2021-02-07T08:01:18.637Z",
                        "endDate": "2021-02-07T09:01:18.637Z",
                        "triggeringValue": 25,
                        "activatedAlertsTriggersIds": [
                          "acdc41ce-acdc-41ce-acdc-41ceacdc41ce",
                          "acdc41ce-acdc-41ce-acdc-41ceacdc41cf"
                        ],
                        "variables": { "x": 20 }
                      }
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/EventsItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
      "get": {
        "operationId": "getOrganisationFactoryIntervention",
        "summary": "Return an organisation's factory's intervention",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/interventionId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The intervention entry",
            "content": {
              "application/json": {
                "example": {
                  "item": "a17e4a4c-e000-0000-0000-000000000000",
                  "interventions": {
                    "a17e4a4c-e000-0000-0000-000000000000": {
                      "id": "a17e4a4c-e000-0000-0000-000000000000",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "imagesIds": [],
                      "attachmentsIds": [],
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-07T00:00:00Z",
                      "data": {
                        "assignedUsersIds": [
                          "41c041c0-0000-0000-0000-000000000000",
                          "41c041c0-0000-0000-0000-000000000000"
                        ],
                        "archived": false,
                        "priority": "not_set",
                        "assetsIds": [
                          "a5537000-0000-0000-0000-000000000001",
                          "a5537000-0000-0000-0000-000000000002"
                        ],
                        "report": {
                          "rootCauses": "some thing happens",
                          "fixDetails": "an intervention fix details",
                          "startDate": "2020-01-05T00:00:00Z",
                          "endDate": "2020-01-06T00:00:00Z"
                        }
                      }
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/InterventionItem" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/interventions": {
      "get": {
        "operationId": "getOrganisationFactoryInterventions",
        "summary": "Return an organisation's factory's interventions",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/OptionalWithInterventionsIds" },
          { "$ref": "#/components/parameters/OptionalWithAssetsIds" },
          { "$ref": "#/components/parameters/OptionalWithAncestorsIds" },
          { "$ref": "#/components/parameters/interventionsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/WithAttachments" },
          { "$ref": "#/components/parameters/WithImages" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/fromFilter" },
          { "$ref": "#/components/parameters/toFilter" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The interventions collection",
            "content": {
              "application/json": {
                "example": {
                  "items": ["a17e4a4c-e000-0000-0000-000000000000"],
                  "interventions": {
                    "a17e4a4c-e000-0000-0000-000000000000": {
                      "id": "a17e4a4c-e000-0000-0000-000000000000",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "imagesIds": [],
                      "attachmentsIds": [],
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-07T00:00:00Z",
                      "data": {
                        "assignedUsersIds": [
                          "41c041c0-0000-0000-0000-000000000000",
                          "41c041c0-0000-0000-0000-000000000000"
                        ],
                        "archived": false,
                        "priority": "not_set",
                        "assetsIds": [
                          "a5537000-0000-0000-0000-000000000001",
                          "a5537000-0000-0000-0000-000000000002"
                        ],
                        "report": {
                          "rootCauses": "some thing happens",
                          "fixDetails": "an intervention fix details",
                          "startDate": "2020-01-05T00:00:00Z",
                          "endDate": "2020-01-06T00:00:00Z"
                        }
                      }
                    }
                  },
                  "alerts": {
                    "ce5ca55e-caca-abba-caca-abbacacacaca": {
                      "id": "ce5ca55e-caca-abba-caca-abbacacacaca",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "a5537000-0000-0000-0000-000000000001",
                      "interventionId": "a17e4a4c-e000-0000-0000-000000000000",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "sensorsIds": [
                        "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                        "5e450402-b0b0-b0b0-b0b0-abbacacab0b0"
                      ],
                      "imagesIds": [
                        "14614614-0000-0000-0000-000000000000",
                        "14614614-0000-0000-0000-000000000001"
                      ],
                      "sensorsValues": ["t"],
                      "eventsIds": [],
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "data": {
                        "code": "custom:my_own_message",
                        "i18nMessage": {
                          "fr-FR": "Un message de diagnostic en fran√ßais",
                          "en-US": "A diagnostic message in english"
                        },
                        "priority": "not_set",
                        "severity": "critical",
                        "viewed": false,
                        "details": {},
                        "assignedUsersIds": [
                          "abbacaca-b0b0-b0b0-b0b0-abbacacab2b2",
                          "abbacaca-b0b0-b0b0-b0b0-abbacacab3b3"
                        ],
                        "comment": "A comment by manager"
                      }
                    }
                  },
                  "images": {
                    "14614614-0000-0000-0000-000000000000": {
                      "id": "14614614-0000-0000-0000-000000000000",
                      "scope": "data-science",
                      "urls": {
                        "original": "https://example.com/images/14614614-0000-0000-0000-000000000000",
                        "large": "https://example.com/images/14614614-0000-0000-0000-000000000000",
                        "medium": "https://example.com/images/14614614-0000-0000-0000-000000000000",
                        "thumb": "https://example.com/images/14614614-0000-0000-0000-000000000000"
                      },
                      "stats": {
                        "name": "IMG_20201030_114025.jpg",
                        "size": 402308,
                        "type": "image/jpeg"
                      },
                      "creation": "2020-01-01T02:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  },
                  "users": {
                    "41c041c0-0000-0000-0000-000000000000": {
                      "id": "41c041c0-0000-0000-0000-000000000000",
                      "roles": ["user"],
                      "memberships": [
                        {
                          "roles": ["technician"],
                          "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                          "status": "member",
                          "lastInvitationDate": "2020-01-01T00:00:00Z"
                        }
                      ],
                      "data": {
                        "email": "john.doe@diagrams-technologies.com",
                        "name": "John Doe",
                        "givenName": "John",
                        "familyName": "Doe",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "emailStatus": "bouncing"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/InterventionsItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/reports": {
      "get": {
        "operationId": "getOrganisationFactoryReports",
        "summary": "Return an organisation's factory's reports",
        "tags": ["reports"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/OptionalWithReportsIds" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/fromFilter" },
          { "$ref": "#/components/parameters/toFilter" },
          { "$ref": "#/components/parameters/reportsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The reports",
            "content": {
              "application/json": {
                "example": {
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "reports": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "externalId": "S-0001",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "data": {
                        "name": "Minion Report",
                        "description": "This is a great report!"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  },
                  "attachments": {
                    "undefined": {
                      "alert": "ce5ca55e-caca-abba-caca-abbacacacaca",
                      "intervention": "a17e4a4c-e000-0000-0000-000000000000",
                      "report": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "scope": "data-science",
                      "stats": {
                        "name": "PDF_20201030_114025.pdf",
                        "size": 402308,
                        "type": "application/pdf"
                      },
                      "creation": "2020-01-01T02:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ReportsItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
      "get": {
        "operationId": "getOrganisationFactorySensor",
        "summary": "Returns an organisation's factory's sensor.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/sensorId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensor",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "sensors": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "S-0001",
                      "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Minion Sensor",
                        "overridenType": { "example": "qualitative" },
                        "series": [
                          {
                            "name": "minion",
                            "type": "quantitative",
                            "unit": "Kg",
                            "sourceType": "data"
                          },
                          {
                            "name": "example",
                            "type": "quantitative",
                            "unit": "none",
                            "sourceType": "event",
                            "eventType": "realtime_alert",
                            "eventField": "aggregatableValue1"
                          }
                        ],
                        "variables": { "x": 1 },
                        "alertsTriggers": {
                          "minion": [
                            {
                              "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                              "name": "An alert trigger for a given sensor",
                              "i18nMessage": {
                                "fr-FR": "The threshold were hit"
                              },
                              "type": "realtime",
                              "occurences": 3,
                              "resetDelay": 3600000,
                              "rule": {
                                "type": "branch",
                                "operator": "and",
                                "leftNode": {
                                  "type": "label",
                                  "operator": "any",
                                  "target": "assets",
                                  "name": "configurations",
                                  "values": ["c12", "c13"]
                                },
                                "rightNode": {
                                  "operator": "or",
                                  "leftNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  },
                                  "rightNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/SensorItem" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/sensors": {
      "get": {
        "operationId": "getOrganisationFactorySensors",
        "summary": "Returns organisation's factory sensors",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/withAlertTriggerTypes" },
          { "$ref": "#/components/parameters/withFactorySensorsOnly" },
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          { "$ref": "#/components/parameters/OptionalWithAssetsIds" },
          { "$ref": "#/components/parameters/OptionalWithAncestorsIds" },
          { "$ref": "#/components/parameters/OptionalWithSensorsIds" },
          { "$ref": "#/components/parameters/sensorsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensors",
            "content": {
              "application/json": {
                "example": {
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "sensors": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "S-0001",
                      "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Minion Sensor",
                        "overridenType": { "example": "qualitative" },
                        "series": [
                          {
                            "name": "minion",
                            "type": "quantitative",
                            "unit": "Kg",
                            "sourceType": "data"
                          },
                          {
                            "name": "example",
                            "type": "quantitative",
                            "unit": "none",
                            "sourceType": "event",
                            "eventType": "realtime_alert",
                            "eventField": "aggregatableValue1"
                          }
                        ],
                        "variables": { "x": 1 },
                        "alertsTriggers": {
                          "minion": [
                            {
                              "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                              "name": "An alert trigger for a given sensor",
                              "i18nMessage": {
                                "fr-FR": "The threshold were hit"
                              },
                              "type": "realtime",
                              "occurences": 3,
                              "resetDelay": 3600000,
                              "rule": {
                                "type": "branch",
                                "operator": "and",
                                "leftNode": {
                                  "type": "label",
                                  "operator": "any",
                                  "target": "assets",
                                  "name": "configurations",
                                  "values": ["c12", "c13"]
                                },
                                "rightNode": {
                                  "operator": "or",
                                  "leftNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  },
                                  "rightNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  },
                  "assets": {
                    "a5537000-0000-0000-0000-000000000001": {
                      "id": "a5537000-0000-0000-0000-000000000001",
                      "syncMode": "none",
                      "externalId": "LN-0001",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "currentConfiguration": "main",
                      "currentPhase": "p34",
                      "currentCycle": "c23",
                      "metrics": {
                        "cadency": {
                          "value": 86,
                          "unit": "rotations/minutes",
                          "status": "good"
                        },
                        "output": {
                          "value": 33,
                          "unit": "rotations",
                          "goal": 1664,
                          "status": "good"
                        }
                      },
                      "powerState": "on",
                      "operatingState": "normal",
                      "healthState": "good",
                      "data": {
                        "name": "Minion Area",
                        "tags": [],
                        "type": "area"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/SensorsItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/trends": {
      "get": {
        "operationId": "getOrganisationFactoryTrends",
        "summary": "Returns the trends",
        "tags": ["trends"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The trends",
            "content": {
              "application/json": {
                "example": {
                  "total": 1,
                  "items": ["acdc41ce-acdc-41ce-acdc-41ceacdc41ce"],
                  "trends": {
                    "acdc41ce-acdc-41ce-acdc-41ceacdc41ce": {
                      "id": "acdc41ce-acdc-41ce-acdc-41ceacdc41ce",
                      "sensorId": "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                      "intercept": -40.32,
                      "slope": 0.254,
                      "from": "2020-01-01T00:00:00Z",
                      "to": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/TrendItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/projects/{projectId}": {
      "get": {
        "operationId": "getOrganisationProject",
        "summary": "Returns an organisation's project.",
        "tags": ["projects"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/projectId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's applications",
            "content": {
              "application/json": {
                "example": {
                  "item": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                  "projects": {
                    "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "author": "41c041c0-0000-0000-0000-000000000000",
                      "data": {
                        "name": "Customer Project",
                        "description": "A customer project setup by itself.",
                        "projectCode": "bench",
                        "algorithms": ["pipelines"],
                        "bridge": {
                          "type": "pull",
                          "handler": "handlePowerTrackSynchronization",
                          "schedule": "0 0 * * *"
                        },
                        "ingestion": {
                          "handler": "handleDataBenchIngestion",
                          "sourceTopic": "raw",
                          "batchSize": 2000,
                          "delay": 30000
                        },
                        "indexation": {
                          "handler": "handleDataBenchIndexation",
                          "sourceTopic": "enriched",
                          "batchSize": 2000,
                          "delay": 30000
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ProjectItem" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/projects": {
      "get": {
        "operationId": "getOrganisationProjects",
        "summary": "Returns an organisation's projects.",
        "tags": ["projects"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/projectsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/OptionalWithProjectsIds" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's applications",
            "content": {
              "application/json": {
                "example": {
                  "items": ["31e331e3-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "projects": {
                    "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "author": "41c041c0-0000-0000-0000-000000000000",
                      "data": {
                        "name": "Customer Project",
                        "description": "A customer project setup by itself.",
                        "projectCode": "bench",
                        "algorithms": ["pipelines"],
                        "bridge": {
                          "type": "pull",
                          "handler": "handlePowerTrackSynchronization",
                          "schedule": "0 0 * * *"
                        },
                        "ingestion": {
                          "handler": "handleDataBenchIngestion",
                          "sourceTopic": "raw",
                          "batchSize": 2000,
                          "delay": 30000
                        },
                        "indexation": {
                          "handler": "handleDataBenchIndexation",
                          "sourceTopic": "enriched",
                          "batchSize": 2000,
                          "delay": 30000
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ProjectsItems" }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/sensors/aggregateData": {
      "get": {
        "operationId": "getOrganisationSensorsAggregateData",
        "summary": "Returns an organisation's sensors aggregate data.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/aggregations" },
          { "$ref": "#/components/parameters/valuesNames" },
          { "$ref": "#/components/parameters/OptionalWithDataLabels" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsNames" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsValues" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/WithTimeZone" },
          { "$ref": "#/components/parameters/includeLabels" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensors aggregate data",
            "content": {
              "application/json": {
                "example": {},
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "from",
                    "to",
                    "sensorsIds",
                    "aggregations",
                    "measures",
                    "valuesNames"
                  ],
                  "properties": {
                    "from": { "$ref": "#/components/schemas/Date" },
                    "to": { "$ref": "#/components/schemas/Date" },
                    "sensorsIds": {
                      "$ref": "#/components/schemas/NonEmptySensorsUUIDS"
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/aggregations"
                    },
                    "valuesNames": {
                      "$ref": "#/components/schemas/NonEmptyValuesNames"
                    },
                    "configuration": {
                      "$ref": "#/components/schemas/AssetConfiguration"
                    },
                    "phase": {
                      "$ref": "#/components/schemas/ManufacturingPhase"
                    },
                    "measures": { "$ref": "#/components/schemas/measures" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/sensors/aggregateEventData": {
      "get": {
        "operationId": "getOrganisationSensorsAggregateEventData",
        "summary": "Returns an organisation's sensors aggregate event data.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/sensorEventTypesQueryParameter" },
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/aggregations" },
          { "$ref": "#/components/parameters/eventFieldsQueryParameter" },
          { "$ref": "#/components/parameters/OptionalWithDataLabels" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsNames" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsValues" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/WithTimeZone" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensors aggregate data",
            "content": {
              "application/json": {
                "example": {},
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "from",
                    "to",
                    "sensorsIds",
                    "aggregations",
                    "measures",
                    "eventFields"
                  ],
                  "properties": {
                    "from": { "$ref": "#/components/schemas/Date" },
                    "to": { "$ref": "#/components/schemas/Date" },
                    "sensorsIds": {
                      "$ref": "#/components/schemas/NonEmptySensorsUUIDS"
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/aggregations"
                    },
                    "eventFields": {
                      "$ref": "#/components/schemas/EventFields"
                    },
                    "configuration": {
                      "$ref": "#/components/schemas/AssetConfiguration"
                    },
                    "phase": {
                      "$ref": "#/components/schemas/ManufacturingPhase"
                    },
                    "measures": { "$ref": "#/components/schemas/measures" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/sensors/aggregateEventRangeData": {
      "get": {
        "operationId": "getOrganisationSensorsAggregateEventRangeData",
        "summary": "Returns an organisation's sensors aggregate event data.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/sensorEventTypesQueryParameter" },
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/aggregations" },
          { "$ref": "#/components/parameters/eventFieldsQueryParameter" },
          { "$ref": "#/components/parameters/OptionalWithDataLabels" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsNames" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsValues" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/WithTimeZone" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensors aggregate data",
            "content": {
              "application/json": {
                "example": {},
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "from",
                    "to",
                    "sensorsIds",
                    "aggregations",
                    "measures",
                    "eventFields"
                  ],
                  "properties": {
                    "from": { "$ref": "#/components/schemas/Date" },
                    "to": { "$ref": "#/components/schemas/Date" },
                    "sensorsIds": {
                      "$ref": "#/components/schemas/NonEmptySensorsUUIDS"
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/aggregations"
                    },
                    "eventFields": {
                      "$ref": "#/components/schemas/EventFields"
                    },
                    "configuration": {
                      "$ref": "#/components/schemas/AssetConfiguration"
                    },
                    "phase": {
                      "$ref": "#/components/schemas/ManufacturingPhase"
                    },
                    "measures": { "$ref": "#/components/schemas/measures" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/sensors/data": {
      "get": {
        "operationId": "getOrganisationSensorsData",
        "summary": "Returns an organisation's sensors raw data.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/valuesNames" },
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/OptionalWithDataLabels" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsNames" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsValues" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/includeLabels" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensors raw data",
            "content": {
              "application/json": {
                "example": {
                  "from": "2020-12-14T12:00:54.123Z",
                  "to": "2020-12-14T12:00:54.123Z",
                  "sensorsIds": ["e7f6e4d5-9f6b-4c5c-8f9d-3c9d8e6e4f4e"],
                  "measures": [
                    {
                      "date": "2022-05-31T00:00:00.000Z",
                      "values": [1, 2, 4],
                      "qualities": [100, 100, 100],
                      "labels": [["tag1"], ["tag2"], ["tag1", "tag2"]]
                    },
                    {
                      "date": "2022-05-31T01:00:00.000Z",
                      "values": [1, 2, 4],
                      "qualities": [100, 100, 100],
                      "labels": [["tag1"], ["tag2"], ["tag1", "tag2"]]
                    }
                  ]
                },
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "from",
                    "to",
                    "sensorsIds",
                    "measures",
                    "valuesNames"
                  ],
                  "properties": {
                    "from": { "$ref": "#/components/schemas/Date" },
                    "to": { "$ref": "#/components/schemas/Date" },
                    "sensorsIds": {
                      "$ref": "#/components/schemas/NonEmptySensorsUUIDS"
                    },
                    "measures": { "$ref": "#/components/schemas/measures" },
                    "valuesNames": {
                      "$ref": "#/components/schemas/NonEmptyValuesNames"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/sensors/eventData": {
      "get": {
        "operationId": "getOrganisationSensorsEventData",
        "summary": "Returns an organisation's sensors event data.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/eventFieldsQueryParameter" },
          { "$ref": "#/components/parameters/sensorEventTypesQueryParameter" },
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/OptionalWithDataLabels" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsNames" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsValues" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/includeLabels" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/EventDataResponse" }
        }
      }
    },
    "/organisations/{organisationId}/sensors/eventRangeDataSchema": {
      "get": {
        "operationId": "getOrganisationSensorsEventRangeData",
        "summary": "Returns an organisation's sensors range event data.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/sensorsIds" },
          { "$ref": "#/components/parameters/sensorEventTypesQueryParameter" },
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/eventFieldsQueryParameter" },
          { "$ref": "#/components/parameters/OptionalWithDataLabels" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsNames" },
          { "$ref": "#/components/parameters/OptionalWithValuedLabelsValues" },
          { "$ref": "#/components/parameters/OptionalWithAssetConfigurations" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingPhases" },
          { "$ref": "#/components/parameters/OptionalWithManufacturingCycles" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's sensors aggregate data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "required": [
                    "from",
                    "to",
                    "sensorsIds",
                    "eventFields",
                    "measures"
                  ],
                  "properties": {
                    "from": { "$ref": "#/components/schemas/Date" },
                    "to": { "$ref": "#/components/schemas/Date" },
                    "sensorsIds": {
                      "$ref": "#/components/schemas/NonEmptySensorsUUIDS"
                    },
                    "eventFields": {
                      "$ref": "#/components/schemas/EventFields"
                    },
                    "configuration": {
                      "$ref": "#/components/schemas/AssetConfiguration"
                    },
                    "phase": {
                      "$ref": "#/components/schemas/ManufacturingPhase"
                    },
                    "measures": { "$ref": "#/components/schemas/RangeMeasures" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organisations/{organisationId}/search": {
      "get": {
        "operationId": "getOrganisationUniversalSearch",
        "summary": "Returns an organisation's search results.",
        "tags": ["search"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/SearchType" },
          { "$ref": "#/components/parameters/SearchSentence" },
          { "$ref": "#/components/parameters/WithFilterTypes" },
          { "$ref": "#/components/parameters/WithFilterIds" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The results of global search",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["id", "type"],
                          "properties": {
                            "id": {
                              "oneOf": [
                                { "$ref": "#/components/schemas/UserUUID" },
                                { "$ref": "#/components/schemas/FactoryUUID" },
                                { "$ref": "#/components/schemas/ProjectUUID" },
                                { "$ref": "#/components/schemas/AssetUUID" },
                                {
                                  "$ref": "#/components/schemas/ApplicationUUID"
                                },
                                {
                                  "$ref": "#/components/schemas/InterventionUUID"
                                },
                                { "$ref": "#/components/schemas/AlertUUID" },
                                { "$ref": "#/components/schemas/ReportUUID" },
                                { "$ref": "#/components/schemas/SensorUUID" },
                                {
                                  "$ref": "#/components/schemas/OrganisationUUID"
                                }
                              ]
                            },
                            "type": {
                              "$ref": "#/components/schemas/SearchType"
                            },
                            "snippet": { "type": "string" }
                          }
                        }
                      }
                    },
                    "suggestions": {
                      "type": "array",
                      "items": { "type": "object" }
                    },
                    "start": { "type": "number" },
                    "total": { "type": "number" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}": {
      "put": {
        "operationId": "putReport",
        "summary": "Upserts a report",
        "tags": ["reports"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/reportId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Report" },
        "responses": {
          "201": { "description": "Report successfully upserted" }
        }
      }
    },
    "/search": {
      "get": {
        "operationId": "getUniversalSearch",
        "summary": "Returns results of the universal search according to search parameters",
        "tags": ["search"],
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/OptionalWithOrganisationsIds" },
          { "$ref": "#/components/parameters/SearchSentence" },
          { "$ref": "#/components/parameters/SearchType" },
          { "$ref": "#/components/parameters/WithFilterTypes" },
          { "$ref": "#/components/parameters/WithFilterIds" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The results of global search",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "results": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "required": ["id", "type"],
                          "properties": {
                            "id": {
                              "oneOf": [
                                { "$ref": "#/components/schemas/UserUUID" },
                                { "$ref": "#/components/schemas/FactoryUUID" },
                                { "$ref": "#/components/schemas/ProjectUUID" },
                                { "$ref": "#/components/schemas/AssetUUID" },
                                {
                                  "$ref": "#/components/schemas/ApplicationUUID"
                                },
                                {
                                  "$ref": "#/components/schemas/InterventionUUID"
                                },
                                { "$ref": "#/components/schemas/AlertUUID" },
                                { "$ref": "#/components/schemas/ReportUUID" },
                                { "$ref": "#/components/schemas/SensorUUID" },
                                {
                                  "$ref": "#/components/schemas/OrganisationUUID"
                                }
                              ]
                            },
                            "type": {
                              "$ref": "#/components/schemas/SearchType"
                            },
                            "snippet": { "type": "string" }
                          }
                        }
                      }
                    },
                    "suggestions": {
                      "type": "array",
                      "items": { "type": "object" }
                    },
                    "start": { "type": "number" },
                    "total": { "type": "number" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "operationId": "getUser",
        "summary": "Returns an user.",
        "tags": ["users"],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/withMembershipsStatuses" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "security": [{ "bearerAuth": ["user"] }],
        "responses": {
          "200": {
            "description": "The user",
            "content": {
              "application/json": {
                "example": {
                  "item": "41c041c0-0000-0000-0000-000000000000",
                  "users": {
                    "41c041c0-0000-0000-0000-000000000000": {
                      "id": "41c041c0-0000-0000-0000-000000000000",
                      "roles": ["user"],
                      "memberships": [
                        {
                          "roles": ["technician"],
                          "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                          "status": "member",
                          "lastInvitationDate": "2020-01-01T00:00:00Z"
                        }
                      ],
                      "data": {
                        "email": "john.doe@diagrams-technologies.com",
                        "name": "John Doe",
                        "givenName": "John",
                        "familyName": "Doe",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "emailStatus": "bouncing"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/UserItem" }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUser",
        "summary": "Upserts an user.",
        "tags": ["users"],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user to upsert",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "41c041c0-0000-0000-0000-000000000000",
                "roles": ["user"],
                "memberships": [
                  {
                    "roles": ["technician"],
                    "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                    "status": "member",
                    "lastInvitationDate": "2020-01-01T00:00:00Z"
                  }
                ],
                "data": {
                  "email": "john.doe@diagrams-technologies.com",
                  "name": "John Doe",
                  "givenName": "John",
                  "familyName": "Doe",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris"
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z",
                "emailStatus": "bouncing"
              },
              "schema": { "$ref": "#/components/schemas/UserModel" }
            }
          }
        },
        "security": [{ "bearerAuth": ["user"] }],
        "responses": {
          "201": {
            "description": "The upserted user",
            "content": {
              "application/json": {
                "example": {
                  "item": "41c041c0-0000-0000-0000-000000000000",
                  "users": {
                    "41c041c0-0000-0000-0000-000000000000": {
                      "id": "41c041c0-0000-0000-0000-000000000000",
                      "roles": ["user"],
                      "memberships": [
                        {
                          "roles": ["technician"],
                          "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                          "status": "member",
                          "lastInvitationDate": "2020-01-01T00:00:00Z"
                        }
                      ],
                      "data": {
                        "email": "john.doe@diagrams-technologies.com",
                        "name": "John Doe",
                        "givenName": "John",
                        "familyName": "Doe",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "emailStatus": "bouncing"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/UserItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/factories": {
      "get": {
        "operationId": "getUserFactories",
        "summary": "Returns an user's factories.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          { "$ref": "#/components/parameters/factoriesSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The user's factories",
            "content": {
              "application/json": {
                "example": {
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "factories": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "F-0001",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "rootAssetsIds": [],
                      "linkedOrganisationsIds": [],
                      "data": {
                        "name": "Minions Factory",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/FactoriesItems" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/notifications": {
      "get": {
        "operationId": "getUserNotifications",
        "summary": "Returns an user's notifications",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/OptionalWithOrganisationsIds" },
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          {
            "$ref": "#/components/parameters/OptionalWithNotificationTypesQueryParameter"
          },
          {
            "$ref": "#/components/parameters/IncludeOrganisationLevelItemsQueryParameter"
          },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The notifications",
            "content": {
              "application/json": {
                "example": {
                  "total": 1,
                  "items": ["abbacaca-caca-abba-caca-abbacacacaca"],
                  "notifications": {
                    "abbacaca-caca-abba-caca-abbacacacaca": {
                      "id": "abbacaca-caca-abba-caca-abbacacacaca",
                      "date": "2020-02-02T20:20:00Z",
                      "read": false,
                      "data": {
                        "organisationId": "abbacaca-caca-abba-caca-abbacacac0c0",
                        "factoryId": "abbacaca-caca-abba-caca-abbacacac1c1",
                        "ancestorsIds": [
                          "abbacaca-caca-abba-caca-abbacacac2c2"
                        ],
                        "assetsIds": ["abbacaca-caca-abba-caca-abbacacac3c3"],
                        "alertsIds": ["abbacaca-caca-abba-caca-abbacacac4c4"],
                        "sensorsIds": ["abbacaca-caca-abba-caca-abbacacac5c5"]
                      },
                      "type": "USER_CREATED",
                      "eventData": {
                        "user": {
                          "id": "41c041c0-0000-0000-0000-000000000000",
                          "roles": ["user"],
                          "memberships": [
                            {
                              "roles": ["technician"],
                              "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                              "status": "member",
                              "lastInvitationDate": "2020-01-01T00:00:00Z"
                            }
                          ],
                          "data": {
                            "email": "john.doe@diagrams-technologies.com",
                            "name": "John Doe",
                            "givenName": "John",
                            "familyName": "Doe",
                            "locale": "fr-FR",
                            "timeZone": "Europe/Paris"
                          },
                          "creation": "2020-01-01T00:00:00Z",
                          "lastModification": "2020-01-01T00:00:00Z",
                          "emailStatus": "bouncing"
                        },
                        "verifyToken": "a_verify_token"
                      }
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/NotificationsItems" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}": {
      "get": {
        "operationId": "getUserOrganisation",
        "summary": "Returns an user's organisation.",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The user's organisation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "organisations": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "factoriesIds": [
                        "fab1ab00-0000-0000-0000-000000000000",
                        "fab1ab00-0000-0000-0000-000000000001"
                      ],
                      "data": {
                        "name": "DiagRAMS",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/OrganisationItem" }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putUserOrganisation",
        "summary": "Upsert an user's organisation.",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user's organisation",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "factoriesIds": [
                  "fab1ab00-0000-0000-0000-000000000000",
                  "fab1ab00-0000-0000-0000-000000000001"
                ],
                "data": {
                  "name": "DiagRAMS",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris"
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/OrganisationModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created organisation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "organisations": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "factoriesIds": [
                        "fab1ab00-0000-0000-0000-000000000000",
                        "fab1ab00-0000-0000-0000-000000000001"
                      ],
                      "data": {
                        "name": "DiagRAMS",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/OrganisationItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts": {
      "get": {
        "operationId": "getUserOrganisationAlerts",
        "summary": "Returns an user's oganisation's alerts.",
        "tags": ["alerts"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          { "$ref": "#/components/parameters/OptionalWithAssetsIds" },
          { "$ref": "#/components/parameters/OptionalWithAncestorsIds" },
          { "$ref": "#/components/parameters/OptionalWithSensorsIds" },
          { "$ref": "#/components/parameters/OptionalWithAlertsIds" },
          { "$ref": "#/components/parameters/withAlertsStatuses" },
          { "$ref": "#/components/parameters/withOrphanAlertsOnly" },
          { "$ref": "#/components/parameters/WithAttachments" },
          { "$ref": "#/components/parameters/WithImages" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/fromFilter" },
          { "$ref": "#/components/parameters/toFilter" },
          { "$ref": "#/components/parameters/alertsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/AlertsCollection" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/applications": {
      "get": {
        "operationId": "getUserOrganisationApplications",
        "summary": "Returns an user's organisation's applications.",
        "tags": ["applications"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/applicationsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/OptionalWithApplicationsIds" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The organisation's applications",
            "content": {
              "application/json": {
                "example": {
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "applications": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Customer Application",
                        "description": "Customer Application data bridge",
                        "allowedScopes": ["data", "oauth2"],
                        "allowedGrantTypes": ["refresh"],
                        "callbackUrl": "http://localhost",
                        "isActive": true
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ApplicationsItems" }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postUserOrganisationApplication",
        "summary": "Create a new user's organisation's application.",
        "tags": ["applications"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The application to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "authorId": "41c041c0-0000-0000-0000-000000000000",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "data": {
                  "name": "Customer Application",
                  "description": "Customer Application data bridge",
                  "allowedScopes": ["data", "oauth2"],
                  "allowedGrantTypes": ["refresh"],
                  "callbackUrl": "http://localhost",
                  "isActive": true
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/ApplicationModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created application",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "applications": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Customer Application",
                        "description": "Customer Application data bridge",
                        "allowedScopes": ["data", "oauth2"],
                        "allowedGrantTypes": ["refresh"],
                        "callbackUrl": "http://localhost",
                        "isActive": true
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "secret": "secret"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ApplicationItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories": {
      "get": {
        "operationId": "getUserOrganisationFactories",
        "summary": "Returns an user's organisation's factories.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          { "$ref": "#/components/parameters/factoriesSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The user's organisation's factories",
            "content": {
              "application/json": {
                "example": {
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "factories": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "F-0001",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "rootAssetsIds": [],
                      "linkedOrganisationsIds": [],
                      "data": {
                        "name": "Minions Factory",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/FactoriesItems" }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postUserOrganisationFactory",
        "summary": "Create a new factory for an user's organisation.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The factory to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "syncMode": "none",
                "externalId": "F-0001",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "rootAssetsIds": [],
                "linkedOrganisationsIds": [],
                "data": {
                  "name": "Minions Factory",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris"
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/FactoryModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created factory",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "factories": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "F-0001",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "rootAssetsIds": [],
                      "linkedOrganisationsIds": [],
                      "data": {
                        "name": "Minions Factory",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/FactoryItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences": {
      "get": {
        "operationId": "getUserOrganisationFactoryPreferences",
        "summary": "Returns organisation, factory and user's preferences for the given organisation's factory as well as default app preferences.",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/AllPreferencesResponse" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/tasks": {
      "get": {
        "operationId": "getUserOrganisationTasks",
        "summary": "Returns an user's oganisation's tasks.",
        "tags": ["tasks"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/OptionalWithFactoriesIds" },
          { "$ref": "#/components/parameters/OptionalWithUsersIds" },
          { "$ref": "#/components/parameters/OptionalWithAssetsIds" },
          { "$ref": "#/components/parameters/OptionalWithAncestorsIds" },
          { "$ref": "#/components/parameters/withTasksTypes" },
          { "$ref": "#/components/parameters/withTasksStatuses" },
          { "$ref": "#/components/parameters/withPriorities" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/fromFilter" },
          { "$ref": "#/components/parameters/toFilter" },
          { "$ref": "#/components/parameters/tasksSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": { "$ref": "#/components/responses/TasksCollection" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/users": {
      "get": {
        "operationId": "getUserOrganisationUsers",
        "summary": "Returns an user's organisation's users.",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/OptionalWithUsersIds" },
          { "$ref": "#/components/parameters/withMembershipsStatuses" },
          { "$ref": "#/components/parameters/usersSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The user's organisation's users",
            "content": {
              "application/json": {
                "example": {
                  "items": ["41c041c0-0000-0000-0000-000000000000"],
                  "users": {
                    "41c041c0-0000-0000-0000-000000000000": {
                      "id": "41c041c0-0000-0000-0000-000000000000",
                      "roles": ["user"],
                      "memberships": [
                        {
                          "roles": ["technician"],
                          "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                          "status": "member",
                          "lastInvitationDate": "2020-01-01T00:00:00Z"
                        }
                      ],
                      "data": {
                        "email": "john.doe@diagrams-technologies.com",
                        "name": "John Doe",
                        "givenName": "John",
                        "familyName": "Doe",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "emailStatus": "bouncing"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/UsersItems" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations": {
      "get": {
        "operationId": "getUserOrganisations",
        "summary": "Returns an user's organisations.",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationsSortBy" },
          { "$ref": "#/components/parameters/direction" },
          { "$ref": "#/components/parameters/limit" },
          { "$ref": "#/components/parameters/start" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "200": {
            "description": "The user's organisations",
            "content": {
              "application/json": {
                "example": {
                  "items": ["abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"],
                  "organisations": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "factoriesIds": [
                        "fab1ab00-0000-0000-0000-000000000000",
                        "fab1ab00-0000-0000-0000-000000000001"
                      ],
                      "data": {
                        "name": "DiagRAMS",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/OrganisationsItems" }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postUserOrganisation",
        "summary": "Create a new user's organisation.",
        "tags": ["users"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user's organisation to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "factoriesIds": [
                  "fab1ab00-0000-0000-0000-000000000000",
                  "fab1ab00-0000-0000-0000-000000000001"
                ],
                "data": {
                  "name": "DiagRAMS",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris"
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/OrganisationModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created organisation",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "organisations": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "factoriesIds": [
                        "fab1ab00-0000-0000-0000-000000000000",
                        "fab1ab00-0000-0000-0000-000000000001"
                      ],
                      "data": {
                        "name": "DiagRAMS",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/OrganisationItem" }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "operationId": "postUser",
        "summary": "Create a new user.",
        "tags": ["users"],
        "parameters": [
          {
            "name": "invitationToken",
            "in": "query",
            "required": false,
            "schema": { "type": "string" }
          },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "41c041c0-0000-0000-0000-000000000000",
                "roles": ["user"],
                "memberships": [
                  {
                    "roles": ["technician"],
                    "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                    "status": "member",
                    "lastInvitationDate": "2020-01-01T00:00:00Z"
                  }
                ],
                "data": {
                  "email": "john.doe@diagrams-technologies.com",
                  "name": "John Doe",
                  "givenName": "John",
                  "familyName": "Doe",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris"
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z",
                "emailStatus": "bouncing"
              },
              "schema": { "$ref": "#/components/schemas/UserModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created user",
            "content": {
              "application/json": {
                "example": {
                  "item": "41c041c0-0000-0000-0000-000000000000",
                  "users": {
                    "41c041c0-0000-0000-0000-000000000000": {
                      "id": "41c041c0-0000-0000-0000-000000000000",
                      "roles": ["user"],
                      "memberships": [
                        {
                          "roles": ["technician"],
                          "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                          "status": "member",
                          "lastInvitationDate": "2020-01-01T00:00:00Z"
                        }
                      ],
                      "data": {
                        "email": "john.doe@diagrams-technologies.com",
                        "name": "John Doe",
                        "givenName": "John",
                        "familyName": "Doe",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z",
                      "emailStatus": "bouncing"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/UserItem" }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "operationId": "postAuthLogin",
        "summary": "Logs a user in",
        "tags": ["auth"],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["username", "password"],
                "properties": {
                  "username": { "type": "string" },
                  "password": { "type": "string" },
                  "scope": { "type": "string" },
                  "remember": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly logged in.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "expiration_date": { "type": "string" },
                    "expires_in": { "type": "string" },
                    "token_type": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "postAuthLogout",
        "summary": "Logs a user out",
        "tags": ["auth"],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": { "204": { "description": "Successfuly logged out!" } }
      }
    },
    "/auth/changePassword": {
      "post": {
        "operationId": "postAuthPasswordChange",
        "summary": "Refreshs a user auth",
        "tags": ["auth"],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["token", "newPassword"],
                "properties": {
                  "token": { "type": "string" },
                  "oldPassword": { "type": "string" },
                  "newPassword": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly changed the password.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "expiration_date": { "type": "string" },
                    "expires_in": { "type": "number" },
                    "token_type": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "postAuthRefresh",
        "summary": "Refreshs a user auth",
        "tags": ["auth"],
        "parameters": [
          { "$ref": "#/components/parameters/cookie" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "scope": { "type": "string" },
                  "remember": { "type": "boolean" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "expiration_date": { "type": "string" },
                    "expires_in": { "type": "string" },
                    "token_type": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "operationId": "postAuthVerify",
        "summary": "Verify a user's email",
        "tags": ["auth"],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["verifyToken"],
                "properties": { "verifyToken": { "type": "string" } }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfuly verified the user's email.",
            "headers": {
              "set-cookie": {
                "schema": { "type": "array", "items": { "type": "string" } }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": { "type": "string" },
                    "expiration_date": { "type": "string" },
                    "expires_in": { "type": "number" },
                    "token_type": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "operationId": "postOAuth2Token",
        "summary": "Implements the [Token Endpoint](https://tools.ietf.org/html/rfc6749#section-3.2)\n as defined per the OAuth2 RFC.",
        "tags": ["oauth2"],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/TokenRequestBody" }
            },
            "application/json": {
              "schema": { "$ref": "#/components/schemas/TokenRequestBody" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfully issued, see https://tools.ietf.org/html/rfc6749#section-5 .",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["access_token", "token_type"],
                  "properties": {
                    "access_token": { "type": "string" },
                    "token_type": {
                      "description": "See https://tools.ietf.org/html/rfc6749#section-7.1",
                      "type": "string",
                      "enum": ["bearer", "mac"]
                    },
                    "expires_in": {
                      "description": "The lifetime in seconds of the access token",
                      "type": "number"
                    },
                    "refresh_token": {
                      "description": "See https://tools.ietf.org/html/rfc6749#section-6",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Access token error response, see https://tools.ietf.org/html/rfc6749#section-5.2",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["error"],
                  "properties": {
                    "error": {
                      "type": "string",
                      "enum": [
                        "invalid_request",
                        "invalid_client",
                        "invalid_grant",
                        "unauthorized_client",
                        "unsupported_grant_type",
                        "invalid_scope"
                      ]
                    },
                    "error_description": { "type": "string" },
                    "error_uri": { "type": "string" }
                  }
                }
              }
            }
          }
        },
        "security": [{ "basicAuth": ["oauth2"] }]
      }
    },
    "/organisations/{organisationId}/data/{projectCode}": {
      "post": {
        "operationId": "postOrganisationData",
        "summary": "Push the data for a given organisation's project.",
        "tags": ["exchange"],
        "parameters": [
          { "$ref": "#/components/parameters/projectCode" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "security": [{ "bearerAuth": ["data"] }],
        "requestBody": {
          "description": "The actual data",
          "required": true,
          "content": {
            "application/json": {
              "example": [
                {
                  "sensorId": "XZ-HHH-ZZ",
                  "valueName": "x",
                  "date": "2020-01-01T08:03:51.000Z",
                  "value": 123,
                  "precision": 100,
                  "labels": ["machine_12345"]
                },
                {
                  "sensorId": "XZ-HHH-ZZ",
                  "valueName": "y",
                  "date": "2020-01-01T08:03:51.000Z",
                  "value": 0,
                  "precision": 99,
                  "labels": ["machine_12345"]
                },
                {
                  "sensorId": "XZ-HHH-ZZ",
                  "valueName": "z",
                  "date": "2020-01-01T08:03:51.000Z",
                  "value": 1,
                  "precision": 100,
                  "labels": ["machine_12345"]
                }
              ],
              "schema": { "$ref": "#/components/schemas/InputData" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The data were successfully queued for processing"
          }
        }
      }
    },
    "/oauth2/reset": {
      "post": {
        "operationId": "postPasswordChangeRequest",
        "summary": "Allow to request a password reset mail",
        "tags": ["oauth2"],
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["email"],
                "properties": {
                  "email": { "type": "string", "format": "email" }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Request successfully queued" } }
      }
    },
    "/users/{userId}/invitations/response": {
      "post": {
        "operationId": "postUserInvitationResponse",
        "summary": "Handle invitation response to an organisation",
        "tags": ["users"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "accepted": true,
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0"
              },
              "schema": {
                "type": "object",
                "required": ["accepted", "organisationId"],
                "properties": {
                  "accepted": { "type": "boolean" },
                  "organisationId": {
                    "$ref": "#/components/schemas/OrganisationUUID"
                  }
                }
              }
            }
          }
        },
        "responses": { "200": { "description": "Success" } }
      }
    },
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors": {
      "post": {
        "operationId": "postUserOrganisationAssetSensor",
        "summary": "Create a new sensor for an user's asset.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/assetId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The sensor to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "syncMode": "none",
                "externalId": "S-0001",
                "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "data": {
                  "name": "Minion Sensor",
                  "overridenType": { "example": "qualitative" },
                  "series": [
                    {
                      "name": "minion",
                      "type": "quantitative",
                      "unit": "Kg",
                      "sourceType": "data"
                    },
                    {
                      "name": "example",
                      "type": "quantitative",
                      "unit": "none",
                      "sourceType": "event",
                      "eventType": "realtime_alert",
                      "eventField": "aggregatableValue1"
                    }
                  ],
                  "variables": { "x": 1 },
                  "alertsTriggers": {
                    "minion": [
                      {
                        "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                        "name": "An alert trigger for a given sensor",
                        "i18nMessage": { "fr-FR": "The threshold were hit" },
                        "type": "realtime",
                        "occurences": 3,
                        "resetDelay": 3600000,
                        "rule": {
                          "type": "branch",
                          "operator": "and",
                          "leftNode": {
                            "type": "label",
                            "operator": "any",
                            "target": "assets",
                            "name": "configurations",
                            "values": ["c12", "c13"]
                          },
                          "rightNode": {
                            "operator": "or",
                            "leftNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            },
                            "rightNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/SensorModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created sensor",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "sensors": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "S-0001",
                      "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Minion Sensor",
                        "overridenType": { "example": "qualitative" },
                        "series": [
                          {
                            "name": "minion",
                            "type": "quantitative",
                            "unit": "Kg",
                            "sourceType": "data"
                          },
                          {
                            "name": "example",
                            "type": "quantitative",
                            "unit": "none",
                            "sourceType": "event",
                            "eventType": "realtime_alert",
                            "eventField": "aggregatableValue1"
                          }
                        ],
                        "variables": { "x": 1 },
                        "alertsTriggers": {
                          "minion": [
                            {
                              "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                              "name": "An alert trigger for a given sensor",
                              "i18nMessage": {
                                "fr-FR": "The threshold were hit"
                              },
                              "type": "realtime",
                              "occurences": 3,
                              "resetDelay": 3600000,
                              "rule": {
                                "type": "branch",
                                "operator": "and",
                                "leftNode": {
                                  "type": "label",
                                  "operator": "any",
                                  "target": "assets",
                                  "name": "configurations",
                                  "values": ["c12", "c13"]
                                },
                                "rightNode": {
                                  "operator": "or",
                                  "leftNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  },
                                  "rightNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/SensorItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets": {
      "post": {
        "operationId": "postUserOrganisationFactoryAsset",
        "summary": "Create a new asset for an user's organisation's factory.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The asset to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "a5537000-0000-0000-0000-000000000001",
                "syncMode": "none",
                "externalId": "LN-0001",
                "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                "currentConfiguration": "main",
                "currentPhase": "p34",
                "currentCycle": "c23",
                "metrics": {
                  "cadency": {
                    "value": 86,
                    "unit": "rotations/minutes",
                    "status": "good"
                  },
                  "output": {
                    "value": 33,
                    "unit": "rotations",
                    "goal": 1664,
                    "status": "good"
                  }
                },
                "powerState": "on",
                "operatingState": "normal",
                "healthState": "good",
                "data": { "name": "Minion Area", "tags": [], "type": "area" },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/AssetModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created asset",
            "content": {
              "application/json": {
                "example": {
                  "item": "a5537000-0000-0000-0000-000000000001",
                  "assets": {
                    "a5537000-0000-0000-0000-000000000001": {
                      "id": "a5537000-0000-0000-0000-000000000001",
                      "syncMode": "none",
                      "externalId": "LN-0001",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "currentConfiguration": "main",
                      "currentPhase": "p34",
                      "currentCycle": "c23",
                      "metrics": {
                        "cadency": {
                          "value": 86,
                          "unit": "rotations/minutes",
                          "status": "good"
                        },
                        "output": {
                          "value": 33,
                          "unit": "rotations",
                          "goal": 1664,
                          "status": "good"
                        }
                      },
                      "powerState": "on",
                      "operatingState": "normal",
                      "healthState": "good",
                      "data": {
                        "name": "Minion Area",
                        "tags": [],
                        "type": "area"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/AssetItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions": {
      "post": {
        "operationId": "postUserOrganisationFactoryIntervention",
        "summary": "Create a new intervention for an user's organisation.",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The intervention to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "a17e4a4c-e000-0000-0000-000000000000",
                "authorId": "41c041c0-0000-0000-0000-000000000000",
                "imagesIds": [],
                "attachmentsIds": [],
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-07T00:00:00Z",
                "data": {
                  "assignedUsersIds": [
                    "41c041c0-0000-0000-0000-000000000000",
                    "41c041c0-0000-0000-0000-000000000000"
                  ],
                  "archived": false,
                  "priority": "not_set",
                  "assetsIds": [
                    "a5537000-0000-0000-0000-000000000001",
                    "a5537000-0000-0000-0000-000000000002"
                  ],
                  "report": {
                    "rootCauses": "some thing happens",
                    "fixDetails": "an intervention fix details",
                    "startDate": "2020-01-05T00:00:00Z",
                    "endDate": "2020-01-06T00:00:00Z"
                  }
                }
              },
              "schema": { "$ref": "#/components/schemas/InterventionModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created intervention",
            "content": {
              "application/json": {
                "example": {
                  "item": "a17e4a4c-e000-0000-0000-000000000000",
                  "interventions": {
                    "a17e4a4c-e000-0000-0000-000000000000": {
                      "id": "a17e4a4c-e000-0000-0000-000000000000",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "imagesIds": [],
                      "attachmentsIds": [],
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-07T00:00:00Z",
                      "data": {
                        "assignedUsersIds": [
                          "41c041c0-0000-0000-0000-000000000000",
                          "41c041c0-0000-0000-0000-000000000000"
                        ],
                        "archived": false,
                        "priority": "not_set",
                        "assetsIds": [
                          "a5537000-0000-0000-0000-000000000001",
                          "a5537000-0000-0000-0000-000000000002"
                        ],
                        "report": {
                          "rootCauses": "some thing happens",
                          "fixDetails": "an intervention fix details",
                          "startDate": "2020-01-05T00:00:00Z",
                          "endDate": "2020-01-06T00:00:00Z"
                        }
                      }
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/InterventionItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors": {
      "post": {
        "operationId": "postUserOrganisationFactorySensor",
        "summary": "Create a new sensor for an user's factory.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The sensor to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "syncMode": "none",
                "externalId": "S-0001",
                "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "data": {
                  "name": "Minion Sensor",
                  "overridenType": { "example": "qualitative" },
                  "series": [
                    {
                      "name": "minion",
                      "type": "quantitative",
                      "unit": "Kg",
                      "sourceType": "data"
                    },
                    {
                      "name": "example",
                      "type": "quantitative",
                      "unit": "none",
                      "sourceType": "event",
                      "eventType": "realtime_alert",
                      "eventField": "aggregatableValue1"
                    }
                  ],
                  "variables": { "x": 1 },
                  "alertsTriggers": {
                    "minion": [
                      {
                        "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                        "name": "An alert trigger for a given sensor",
                        "i18nMessage": { "fr-FR": "The threshold were hit" },
                        "type": "realtime",
                        "occurences": 3,
                        "resetDelay": 3600000,
                        "rule": {
                          "type": "branch",
                          "operator": "and",
                          "leftNode": {
                            "type": "label",
                            "operator": "any",
                            "target": "assets",
                            "name": "configurations",
                            "values": ["c12", "c13"]
                          },
                          "rightNode": {
                            "operator": "or",
                            "leftNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            },
                            "rightNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/SensorModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created sensor",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "sensors": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "S-0001",
                      "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Minion Sensor",
                        "overridenType": { "example": "qualitative" },
                        "series": [
                          {
                            "name": "minion",
                            "type": "quantitative",
                            "unit": "Kg",
                            "sourceType": "data"
                          },
                          {
                            "name": "example",
                            "type": "quantitative",
                            "unit": "none",
                            "sourceType": "event",
                            "eventType": "realtime_alert",
                            "eventField": "aggregatableValue1"
                          }
                        ],
                        "variables": { "x": 1 },
                        "alertsTriggers": {
                          "minion": [
                            {
                              "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                              "name": "An alert trigger for a given sensor",
                              "i18nMessage": {
                                "fr-FR": "The threshold were hit"
                              },
                              "type": "realtime",
                              "occurences": 3,
                              "resetDelay": 3600000,
                              "rule": {
                                "type": "branch",
                                "operator": "and",
                                "leftNode": {
                                  "type": "label",
                                  "operator": "any",
                                  "target": "assets",
                                  "name": "configurations",
                                  "values": ["c12", "c13"]
                                },
                                "rightNode": {
                                  "operator": "or",
                                  "leftNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  },
                                  "rightNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/SensorItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/invitations": {
      "post": {
        "operationId": "postUserOrganisationInvitation",
        "summary": "Handle the invitation of a new user in an organisation",
        "tags": ["users"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserOrganisationInvitation"
              },
              "example": {
                "email": "john.doe@diagrams-technologies.com",
                "givenName": "John",
                "familyName": "Doe",
                "membership": ["technician"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user has been invited",
            "content": {
              "application/json": {
                "example": {
                  "user": {
                    "item": "41c041c0-0000-0000-0000-000000000000",
                    "users": {
                      "41c041c0-0000-0000-0000-000000000000": {
                        "id": "41c041c0-0000-0000-0000-000000000000",
                        "roles": ["user"],
                        "memberships": [
                          {
                            "roles": ["technician"],
                            "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                            "status": "member",
                            "lastInvitationDate": "2020-01-01T00:00:00Z"
                          }
                        ],
                        "data": {
                          "email": "john.doe@diagrams-technologies.com",
                          "name": "John Doe",
                          "givenName": "John",
                          "familyName": "Doe",
                          "locale": "fr-FR",
                          "timeZone": "Europe/Paris"
                        },
                        "creation": "2020-01-01T00:00:00Z",
                        "lastModification": "2020-01-01T00:00:00Z",
                        "emailStatus": "bouncing"
                      }
                    }
                  },
                  "token": "token"
                },
                "schema": {
                  "type": "object",
                  "required": ["user", "token"],
                  "properties": {
                    "user": { "$ref": "#/components/schemas/UserItem" },
                    "token": { "type": "string" }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/invitation/followup": {
      "post": {
        "operationId": "postUserOrganisationInvitationFollowup",
        "summary": "Send a new invitation to user to join an organisation",
        "tags": ["users"],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "security": [{ "bearerAuth": ["user"] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userId"],
                "properties": {
                  "userId": { "$ref": "#/components/schemas/UserUUID" }
                }
              },
              "example": { "userId": "3a049490-2178-41cb-b48c-04f827c49be9" }
            }
          }
        },
        "responses": { "201": { "description": "The user has been reinvited" } }
      }
    },
    "/organisations/{organisationId}/users/{userId}/notifications/{notificationId}/read": {
      "post": {
        "operationId": "postUserOrganisationNotificationRead",
        "summary": "Mark notification as read/unread for an user",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/from" },
          { "$ref": "#/components/parameters/to" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/notificationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "201": { "description": "Notification read status changed" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/projects": {
      "post": {
        "operationId": "postUserOrganisationProject",
        "summary": "Create a new user's organisation's project.",
        "tags": ["projects"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The project to create",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "author": "41c041c0-0000-0000-0000-000000000000",
                "data": {
                  "name": "Customer Project",
                  "description": "A customer project setup by itself.",
                  "projectCode": "bench",
                  "algorithms": ["pipelines"],
                  "bridge": {
                    "type": "pull",
                    "handler": "handlePowerTrackSynchronization",
                    "schedule": "0 0 * * *"
                  },
                  "ingestion": {
                    "handler": "handleDataBenchIngestion",
                    "sourceTopic": "raw",
                    "batchSize": 2000,
                    "delay": 30000
                  },
                  "indexation": {
                    "handler": "handleDataBenchIndexation",
                    "sourceTopic": "enriched",
                    "batchSize": 2000,
                    "delay": 30000
                  }
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/ProjectModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created project",
            "content": {
              "application/json": {
                "example": {
                  "item": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                  "projects": {
                    "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "31e331e3-b0b0-b0b0-b0b0-abbacacab0b0",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "author": "41c041c0-0000-0000-0000-000000000000",
                      "data": {
                        "name": "Customer Project",
                        "description": "A customer project setup by itself.",
                        "projectCode": "bench",
                        "algorithms": ["pipelines"],
                        "bridge": {
                          "type": "pull",
                          "handler": "handlePowerTrackSynchronization",
                          "schedule": "0 0 * * *"
                        },
                        "ingestion": {
                          "handler": "handleDataBenchIngestion",
                          "sourceTopic": "raw",
                          "batchSize": 2000,
                          "delay": 30000
                        },
                        "indexation": {
                          "handler": "handleDataBenchIndexation",
                          "sourceTopic": "enriched",
                          "batchSize": 2000,
                          "delay": 30000
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/ProjectItem" }
              }
            }
          }
        }
      }
    },
    "/attachments/{attachmentId}": {
      "put": {
        "operationId": "putAttachment",
        "summary": "Upserts an attachments",
        "security": [{ "bearerAuth": ["admin"] }],
        "parameters": [
          { "$ref": "#/components/parameters/attachmentId" },
          { "$ref": "#/components/parameters/withAlertId" },
          { "$ref": "#/components/parameters/withReportId" },
          { "$ref": "#/components/parameters/withInterventionId" },
          { "$ref": "#/components/parameters/FileName" },
          { "$ref": "#/components/parameters/FileSize" },
          { "$ref": "#/components/parameters/AttachmentFileType" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "tags": ["attachments"],
        "requestBody": { "$ref": "#/components/requestBodies/Attachment" },
        "responses": { "201": { "description": "Saved the attachment" } }
      }
    },
    "/images/{imageId}": {
      "put": {
        "operationId": "putImage",
        "summary": "Upsert an image.",
        "tags": ["images"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/withAlertId" },
          { "$ref": "#/components/parameters/withInterventionId" },
          { "$ref": "#/components/parameters/imageId" },
          { "$ref": "#/components/parameters/FileName" },
          { "$ref": "#/components/parameters/FileSize" },
          { "$ref": "#/components/parameters/ImageFileType" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": { "$ref": "#/components/requestBodies/Image" },
        "responses": { "201": { "description": "Saved the image" } }
      }
    },
    "/notifications/{notificationId}": {
      "put": {
        "operationId": "putNotificationEvent",
        "summary": "Upserts an organisation's application's notification.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["ml"] }],
        "parameters": [
          { "$ref": "#/components/parameters/notificationId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "e7e47001-0000-0000-0000-000000000000",
                "type": "ALERT_DELETED",
                "timestamp": 1580674802020,
                "data": {
                  "organisationId": "abbacaca-caca-abba-caca-abbacacac0c0",
                  "factoryId": "abbacaca-caca-abba-caca-abbacacac1c1",
                  "alertId": "abbacaca-caca-abba-caca-abbacacac4c4"
                }
              },
              "schema": { "$ref": "#/components/schemas/NotificationEvent" }
            }
          }
        },
        "responses": {
          "204": { "description": "Notification successfully emitted" }
        }
      }
    },
    "/organisations/{organisationId}/factories/{factoryId}/events/{eventId}": {
      "put": {
        "operationId": "putOrganisationFactoryEvent",
        "summary": "Upserts an organisation event in SQS.",
        "tags": ["data"],
        "security": [{ "bearerAuth": ["ml"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/eventId" },
          {
            "name": "hasAttachments",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          {
            "name": "hasImages",
            "in": "query",
            "schema": { "type": "boolean" }
          },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "type": "realtime_alert",
                "timestamp": 1609459200000,
                "data": {
                  "projectCode": "bench",
                  "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                  "ancestorsIds": [
                    "a5537000-0000-0000-0000-000000000001",
                    "a5537000-0000-0000-0000-000000000002"
                  ],
                  "assetsIds": [
                    "a5537000-0000-0000-0000-000000000001",
                    "a5537000-0000-0000-0000-000000000002"
                  ],
                  "sensorsIds": [
                    "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                    "5e450402-b0b0-b0b0-b0b0-abbacacab0b0"
                  ],
                  "valuesNames": ["voltage", "intensity"],
                  "labels": {
                    "assets": {
                      "values": { "aCustomProp": "a_custom_value" },
                      "tags": ["a_custom_label"],
                      "configurations": ["c4"],
                      "cycles": ["c4c4"],
                      "phases": ["p4"]
                    },
                    "ancestors": {
                      "values": { "aCustomProp": "a_custom_value" },
                      "tags": ["a_custom_label"],
                      "configurations": ["c4"],
                      "cycles": ["c4c4"],
                      "phases": ["p4"]
                    },
                    "tags": [
                      "ATagLabelOfYourChoice",
                      "AnotherTagLabelOfYourChoice"
                    ]
                  },
                  "startDate": "2021-02-07T08:01:18.637Z",
                  "endDate": "2021-02-07T09:01:18.637Z",
                  "triggeringValue": 25,
                  "activatedAlertsTriggersIds": [
                    "acdc41ce-acdc-41ce-acdc-41ceacdc41ce",
                    "acdc41ce-acdc-41ce-acdc-41ceacdc41cf"
                  ],
                  "variables": { "x": 20 }
                }
              },
              "schema": { "$ref": "#/components/schemas/EventModel" }
            }
          }
        },
        "responses": { "204": { "description": "Event successfully ingested" } }
      }
    },
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/feedback": {
      "put": {
        "operationId": "putUserOrganisationAlertFeedback",
        "summary": "Update an alert with an user's feedback",
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/alertId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "tags": ["alerts"],
        "requestBody": {
          "description": "The user's feedback",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["userFeedback"],
                "properties": {
                  "userFeedback": {
                    "$ref": "#/components/schemas/userFeedback"
                  }
                }
              }
            }
          }
        },
        "responses": { "201": { "description": "Updated the alert" } }
      }
    },
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors/{sensorId}": {
      "put": {
        "operationId": "putUserOrganisationAssetSensor",
        "summary": "Upsert a sensor of an user's organisation's asset.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/assetId" },
          { "$ref": "#/components/parameters/sensorId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The sensor",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "syncMode": "none",
                "externalId": "S-0001",
                "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "data": {
                  "name": "Minion Sensor",
                  "overridenType": { "example": "qualitative" },
                  "series": [
                    {
                      "name": "minion",
                      "type": "quantitative",
                      "unit": "Kg",
                      "sourceType": "data"
                    },
                    {
                      "name": "example",
                      "type": "quantitative",
                      "unit": "none",
                      "sourceType": "event",
                      "eventType": "realtime_alert",
                      "eventField": "aggregatableValue1"
                    }
                  ],
                  "variables": { "x": 1 },
                  "alertsTriggers": {
                    "minion": [
                      {
                        "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                        "name": "An alert trigger for a given sensor",
                        "i18nMessage": { "fr-FR": "The threshold were hit" },
                        "type": "realtime",
                        "occurences": 3,
                        "resetDelay": 3600000,
                        "rule": {
                          "type": "branch",
                          "operator": "and",
                          "leftNode": {
                            "type": "label",
                            "operator": "any",
                            "target": "assets",
                            "name": "configurations",
                            "values": ["c12", "c13"]
                          },
                          "rightNode": {
                            "operator": "or",
                            "leftNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            },
                            "rightNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/SensorModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created sensor",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "sensors": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "S-0001",
                      "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Minion Sensor",
                        "overridenType": { "example": "qualitative" },
                        "series": [
                          {
                            "name": "minion",
                            "type": "quantitative",
                            "unit": "Kg",
                            "sourceType": "data"
                          },
                          {
                            "name": "example",
                            "type": "quantitative",
                            "unit": "none",
                            "sourceType": "event",
                            "eventType": "realtime_alert",
                            "eventField": "aggregatableValue1"
                          }
                        ],
                        "variables": { "x": 1 },
                        "alertsTriggers": {
                          "minion": [
                            {
                              "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                              "name": "An alert trigger for a given sensor",
                              "i18nMessage": {
                                "fr-FR": "The threshold were hit"
                              },
                              "type": "realtime",
                              "occurences": 3,
                              "resetDelay": 3600000,
                              "rule": {
                                "type": "branch",
                                "operator": "and",
                                "leftNode": {
                                  "type": "label",
                                  "operator": "any",
                                  "target": "assets",
                                  "name": "configurations",
                                  "values": ["c12", "c13"]
                                },
                                "rightNode": {
                                  "operator": "or",
                                  "leftNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  },
                                  "rightNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/SensorItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}": {
      "put": {
        "operationId": "putUserOrganisationFactory",
        "summary": "Upsert an user's organisation's factory.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user's factory",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "syncMode": "none",
                "externalId": "F-0001",
                "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "rootAssetsIds": [],
                "linkedOrganisationsIds": [],
                "data": {
                  "name": "Minions Factory",
                  "locale": "fr-FR",
                  "timeZone": "Europe/Paris"
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/FactoryModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created factory",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "factories": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "F-0001",
                      "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "rootAssetsIds": [],
                      "linkedOrganisationsIds": [],
                      "data": {
                        "name": "Minions Factory",
                        "locale": "fr-FR",
                        "timeZone": "Europe/Paris"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/FactoryItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
      "put": {
        "operationId": "putUserOrganisationFactoryAsset",
        "summary": "Upsert an user's organisation's factory asset.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/assetId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user's factory asset",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "a5537000-0000-0000-0000-000000000001",
                "syncMode": "none",
                "externalId": "LN-0001",
                "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                "currentConfiguration": "main",
                "currentPhase": "p34",
                "currentCycle": "c23",
                "metrics": {
                  "cadency": {
                    "value": 86,
                    "unit": "rotations/minutes",
                    "status": "good"
                  },
                  "output": {
                    "value": 33,
                    "unit": "rotations",
                    "goal": 1664,
                    "status": "good"
                  }
                },
                "powerState": "on",
                "operatingState": "normal",
                "healthState": "good",
                "data": { "name": "Minion Area", "tags": [], "type": "area" },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/AssetModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created asset",
            "content": {
              "application/json": {
                "example": {
                  "item": "a5537000-0000-0000-0000-000000000001",
                  "assets": {
                    "a5537000-0000-0000-0000-000000000001": {
                      "id": "a5537000-0000-0000-0000-000000000001",
                      "syncMode": "none",
                      "externalId": "LN-0001",
                      "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                      "currentConfiguration": "main",
                      "currentPhase": "p34",
                      "currentCycle": "c23",
                      "metrics": {
                        "cadency": {
                          "value": 86,
                          "unit": "rotations/minutes",
                          "status": "good"
                        },
                        "output": {
                          "value": 33,
                          "unit": "rotations",
                          "goal": 1664,
                          "status": "good"
                        }
                      },
                      "powerState": "on",
                      "operatingState": "normal",
                      "healthState": "good",
                      "data": {
                        "name": "Minion Area",
                        "tags": [],
                        "type": "area"
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/AssetItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
      "put": {
        "operationId": "putUserOrganisationFactoryIntervention",
        "summary": "Upsert a intervention of an user",
        "tags": ["interventions"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/interventionId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The intervention",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "a17e4a4c-e000-0000-0000-000000000000",
                "authorId": "41c041c0-0000-0000-0000-000000000000",
                "imagesIds": [],
                "attachmentsIds": [],
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-07T00:00:00Z",
                "data": {
                  "assignedUsersIds": [
                    "41c041c0-0000-0000-0000-000000000000",
                    "41c041c0-0000-0000-0000-000000000000"
                  ],
                  "archived": false,
                  "priority": "not_set",
                  "assetsIds": [
                    "a5537000-0000-0000-0000-000000000001",
                    "a5537000-0000-0000-0000-000000000002"
                  ],
                  "report": {
                    "rootCauses": "some thing happens",
                    "fixDetails": "an intervention fix details",
                    "startDate": "2020-01-05T00:00:00Z",
                    "endDate": "2020-01-06T00:00:00Z"
                  }
                }
              },
              "schema": { "$ref": "#/components/schemas/InterventionModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created intervention",
            "content": {
              "application/json": {
                "example": {
                  "item": "a17e4a4c-e000-0000-0000-000000000000",
                  "interventions": {
                    "a17e4a4c-e000-0000-0000-000000000000": {
                      "id": "a17e4a4c-e000-0000-0000-000000000000",
                      "authorId": "41c041c0-0000-0000-0000-000000000000",
                      "imagesIds": [],
                      "attachmentsIds": [],
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-07T00:00:00Z",
                      "data": {
                        "assignedUsersIds": [
                          "41c041c0-0000-0000-0000-000000000000",
                          "41c041c0-0000-0000-0000-000000000000"
                        ],
                        "archived": false,
                        "priority": "not_set",
                        "assetsIds": [
                          "a5537000-0000-0000-0000-000000000001",
                          "a5537000-0000-0000-0000-000000000002"
                        ],
                        "report": {
                          "rootCauses": "some thing happens",
                          "fixDetails": "an intervention fix details",
                          "startDate": "2020-01-05T00:00:00Z",
                          "endDate": "2020-01-06T00:00:00Z"
                        }
                      }
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/InterventionItem" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences/{level}": {
      "put": {
        "operationId": "putUserOrganisationFactoryPreferences",
        "summary": "Upserts the preferences of an organisation, a factory or a user.",
        "tags": ["organisations"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/PreferenceLevel" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The user|organisation|factory preferences.",
          "required": true,
          "content": {
            "application/json": {
              "example": { "sensorDisplayExternalId": true },
              "schema": {
                "$ref": "#/components/schemas/PartialPreferencesModel"
              }
            }
          }
        },
        "responses": {
          "201": { "$ref": "#/components/responses/PreferencesResponse" }
        }
      }
    },
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
      "put": {
        "operationId": "putUserOrganisationFactorySensor",
        "summary": "Upsert a sensor in a user's factory.",
        "tags": ["factories"],
        "security": [{ "bearerAuth": ["user"] }],
        "parameters": [
          { "$ref": "#/components/parameters/userId" },
          { "$ref": "#/components/parameters/organisationId" },
          { "$ref": "#/components/parameters/factoryId" },
          { "$ref": "#/components/parameters/sensorId" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "requestBody": {
          "description": "The sensor",
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "syncMode": "none",
                "externalId": "S-0001",
                "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                "data": {
                  "name": "Minion Sensor",
                  "overridenType": { "example": "qualitative" },
                  "series": [
                    {
                      "name": "minion",
                      "type": "quantitative",
                      "unit": "Kg",
                      "sourceType": "data"
                    },
                    {
                      "name": "example",
                      "type": "quantitative",
                      "unit": "none",
                      "sourceType": "event",
                      "eventType": "realtime_alert",
                      "eventField": "aggregatableValue1"
                    }
                  ],
                  "variables": { "x": 1 },
                  "alertsTriggers": {
                    "minion": [
                      {
                        "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                        "name": "An alert trigger for a given sensor",
                        "i18nMessage": { "fr-FR": "The threshold were hit" },
                        "type": "realtime",
                        "occurences": 3,
                        "resetDelay": 3600000,
                        "rule": {
                          "type": "branch",
                          "operator": "and",
                          "leftNode": {
                            "type": "label",
                            "operator": "any",
                            "target": "assets",
                            "name": "configurations",
                            "values": ["c12", "c13"]
                          },
                          "rightNode": {
                            "operator": "or",
                            "leftNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            },
                            "rightNode": {
                              "type": "value",
                              "operator": "eq",
                              "value": 1664
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "creation": "2020-01-01T00:00:00Z",
                "lastModification": "2020-01-01T00:00:00Z"
              },
              "schema": { "$ref": "#/components/schemas/SensorModel" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created sensor",
            "content": {
              "application/json": {
                "example": {
                  "item": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "sensors": {
                    "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                      "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "syncMode": "none",
                      "externalId": "S-0001",
                      "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                      "data": {
                        "name": "Minion Sensor",
                        "overridenType": { "example": "qualitative" },
                        "series": [
                          {
                            "name": "minion",
                            "type": "quantitative",
                            "unit": "Kg",
                            "sourceType": "data"
                          },
                          {
                            "name": "example",
                            "type": "quantitative",
                            "unit": "none",
                            "sourceType": "event",
                            "eventType": "realtime_alert",
                            "eventField": "aggregatableValue1"
                          }
                        ],
                        "variables": { "x": 1 },
                        "alertsTriggers": {
                          "minion": [
                            {
                              "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                              "name": "An alert trigger for a given sensor",
                              "i18nMessage": {
                                "fr-FR": "The threshold were hit"
                              },
                              "type": "realtime",
                              "occurences": 3,
                              "resetDelay": 3600000,
                              "rule": {
                                "type": "branch",
                                "operator": "and",
                                "leftNode": {
                                  "type": "label",
                                  "operator": "any",
                                  "target": "assets",
                                  "name": "configurations",
                                  "values": ["c12", "c13"]
                                },
                                "rightNode": {
                                  "operator": "or",
                                  "leftNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  },
                                  "rightNode": {
                                    "type": "value",
                                    "operator": "eq",
                                    "value": 1664
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "creation": "2020-01-01T00:00:00Z",
                      "lastModification": "2020-01-01T00:00:00Z"
                    }
                  }
                },
                "schema": { "$ref": "#/components/schemas/SensorItem" }
              }
            }
          }
        }
      }
    },
    "/oauth2/authorize": {
      "get": {
        "operationId": "getOAuth2Authorize",
        "summary": "Implements the [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1)\n as defined per the OAuth2 RFC.",
        "tags": ["oauth2"],
        "parameters": [
          { "$ref": "#/components/parameters/responseType" },
          { "$ref": "#/components/parameters/clientId" },
          { "$ref": "#/components/parameters/redirectURI" },
          { "$ref": "#/components/parameters/scope" },
          { "$ref": "#/components/parameters/state" },
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ],
        "responses": {
          "302": {
            "description": "Redirects the user to the authorization interface."
          }
        }
      }
    },
    "/ping": {
      "get": {
        "operationId": "getPing",
        "summary": "Checks API's availability.",
        "tags": ["system"],
        "responses": {
          "200": {
            "description": "Pong",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "pong": { "type": "string", "enum": ["pong"] }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          { "$ref": "#/components/parameters/xSdkVersion" },
          { "$ref": "#/components/parameters/xApplicationVersion" },
          { "$ref": "#/components/parameters/xApiVersion" }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AlertStatuses": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertStatus" },
        "minItems": 1
      },
      "AlertUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "AlertsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "SortDirection": { "type": "string", "enum": ["asc", "desc"] },
      "ImageUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "ImagesUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ImageUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "alertsSortByValue": {
        "type": "string",
        "enum": [
          "severity",
          "priority",
          "assignedAt",
          "startAt",
          "creation",
          "lastModification"
        ]
      },
      "AlertsStat": {
        "type": "object",
        "required": ["organisationId", "stats"],
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "stats": {
            "type": "object",
            "required": ["discarded", "fixed", "closed", "open", "total"],
            "properties": {
              "discarded": { "type": "number" },
              "fixed": { "type": "number" },
              "closed": { "type": "number" },
              "open": { "type": "number" },
              "total": { "type": "number" }
            }
          }
        }
      },
      "AlertsStats": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertsStat" }
      },
      "ApplicationData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "allowedScopes",
          "allowedGrantTypes",
          "callbackUrl",
          "isActive"
        ],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "allowedScopes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Scope" },
            "minItems": 1
          },
          "allowedGrantTypes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/GrantType" },
            "minItems": 1
          },
          "callbackUrl": { "type": "string" },
          "isActive": { "type": "boolean" }
        }
      },
      "ApplicationItem": {
        "type": "object",
        "required": ["item", "applications"],
        "properties": {
          "item": { "$ref": "#/components/schemas/ApplicationUUID" },
          "applications": {
            "$ref": "#/components/schemas/ApplicationModelHash"
          }
        }
      },
      "ApplicationModel": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/ApplicationUUID" },
          "authorId": { "$ref": "#/components/schemas/UserUUID" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "data": { "$ref": "#/components/schemas/ApplicationData" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" },
          "secret": { "type": "string" }
        }
      },
      "ApplicationUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "ApplicationModelHash": {
        "type": "object",
        "patternProperties": {
          "undefined": { "$ref": "#/components/schemas/ApplicationModel" }
        }
      },
      "ApplicationsItems": {
        "type": "object",
        "required": ["items", "applications"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/ApplicationsUUIDS" },
          "applications": {
            "$ref": "#/components/schemas/ApplicationModelHash"
          }
        }
      },
      "ApplicationsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ApplicationUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "GrantType": {
        "type": "string",
        "enum": [
          "code",
          "token",
          "password",
          "refresh",
          "client_credentials",
          "verify",
          "password_change"
        ]
      },
      "Scope": {
        "type": "string",
        "enum": ["user", "admin", "data", "webhook", "oauth2", "ml"]
      },
      "applicationsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "AssetAreaData": {
        "type": "object",
        "required": ["type"],
        "properties": { "type": { "type": "string", "enum": ["area"] } }
      },
      "AssetBaseData": {
        "type": "object",
        "required": ["name", "tags"],
        "properties": {
          "name": { "type": "string" },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "parentId": { "$ref": "#/components/schemas/AssetUUID" }
        }
      },
      "AssetConfiguration": { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" },
      "AssetData": {
        "allOf": [
          { "$ref": "#/components/schemas/AssetBaseData" },
          {
            "anyOf": [
              { "$ref": "#/components/schemas/AssetAreaData" },
              { "$ref": "#/components/schemas/AssetLineData" },
              { "$ref": "#/components/schemas/AssetMachineData" },
              { "$ref": "#/components/schemas/AssetPartData" }
            ]
          }
        ]
      },
      "AssetItem": {
        "type": "object",
        "required": ["item", "assets"],
        "properties": {
          "item": { "$ref": "#/components/schemas/AssetUUID" },
          "assets": { "$ref": "#/components/schemas/AssetModelHash" }
        }
      },
      "AssetLineData": {
        "type": "object",
        "required": ["type", "configurations"],
        "properties": {
          "type": { "type": "string", "enum": ["line"] },
          "configurations": {
            "type": "object",
            "patternProperties": {
              "^[A-Za-z0-9_-]+$": {
                "type": "object",
                "required": ["machinesTree"],
                "properties": {
                  "machinesTree": {
                    "$ref": "#/components/schemas/LineMachineTree"
                  }
                }
              }
            }
          }
        }
      },
      "AssetMachineData": {
        "type": "object",
        "required": ["type"],
        "properties": { "type": { "type": "string", "enum": ["machine"] } }
      },
      "AssetPartData": {
        "type": "object",
        "required": ["type"],
        "properties": { "type": { "type": "string", "enum": ["part"] } }
      },
      "AssetModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "id": { "$ref": "#/components/schemas/AssetUUID" },
              "organisationId": {
                "$ref": "#/components/schemas/OrganisationUUID"
              },
              "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
              "childrenIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
              "ancestorsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
              "metrics": { "$ref": "#/components/schemas/LineMetrics" },
              "currentConfiguration": {
                "$ref": "#/components/schemas/AssetConfiguration"
              },
              "currentPhase": {
                "$ref": "#/components/schemas/ManufacturingPhase"
              },
              "currentCycle": {
                "$ref": "#/components/schemas/ManufacturingCycle"
              },
              "powerState": {
                "type": "string",
                "enum": ["unknown", "on", "off"]
              },
              "operatingState": {
                "type": "string",
                "enum": ["unknown", "normal", "stopped", "idle"]
              },
              "healthState": {
                "type": "string",
                "enum": ["unknown", "good", "faulty", "erroring"]
              },
              "data": { "$ref": "#/components/schemas/AssetData" },
              "creation": { "$ref": "#/components/schemas/Date" },
              "lastModification": { "$ref": "#/components/schemas/Date" }
            }
          }
        ]
      },
      "AssetType": {
        "type": "string",
        "enum": ["area", "line", "machine", "part"]
      },
      "AssetUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "AssetModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/AssetModel"
          }
        }
      },
      "AssetsItems": {
        "type": "object",
        "required": ["items", "assets"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/AssetsUUIDS" },
          "assets": { "$ref": "#/components/schemas/AssetModelHash" }
        }
      },
      "AssetsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AssetUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "LineMachineTree": {
        "type": "object",
        "properties": {
          "nodes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AssetUUID" }
          },
          "edges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "source": { "$ref": "#/components/schemas/AssetUUID" },
                "target": { "$ref": "#/components/schemas/AssetUUID" }
              }
            }
          }
        }
      },
      "LineMetrics": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cadency": {
            "type": "object",
            "required": ["value", "unit", "status"],
            "properties": {
              "value": { "type": "number" },
              "unit": { "type": "string" },
              "status": { "$ref": "#/components/schemas/LineMetricsStatus" }
            }
          },
          "output": {
            "type": "object",
            "required": ["value", "unit", "status"],
            "properties": {
              "value": { "type": "number" },
              "goal": { "type": "number" },
              "unit": { "type": "string" },
              "status": { "$ref": "#/components/schemas/LineMetricsStatus" }
            }
          }
        }
      },
      "LineMetricsStatus": {
        "type": "string",
        "enum": ["good", "faulty", "error"]
      },
      "ManufacturingCycle": { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" },
      "ManufacturingPhase": { "type": "string", "pattern": "^[A-Za-z0-9_-]+$" },
      "ManufacturingPhases": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ManufacturingPhase" }
      },
      "assetsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "UniqueNonEmptyAssetsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AssetUUID" },
        "minItems": 0,
        "uniqueItems": true
      },
      "AnomalyEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/AnomalyEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["alertCode", "startDate", "endDate"],
                "properties": {
                  "alertCode": { "$ref": "#/components/schemas/AlertCode" },
                  "customI18NMessage": {
                    "$ref": "#/components/schemas/I18NString"
                  },
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          }
        }
      },
      "AnomalyEventType": { "type": "string", "enum": ["anomaly"] },
      "AssetConfigurations": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AssetConfiguration" }
      },
      "AssetLabels": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "values": { "$ref": "#/components/schemas/ValuedLabels" },
          "tags": { "$ref": "#/components/schemas/Tags" },
          "configurations": {
            "$ref": "#/components/schemas/AssetConfigurations"
          },
          "cycles": { "$ref": "#/components/schemas/ManufacturingCycles" },
          "phases": { "$ref": "#/components/schemas/ManufacturingPhases" }
        }
      },
      "BaseDataLabels": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "assets": { "$ref": "#/components/schemas/AssetLabels" },
          "ancestors": { "$ref": "#/components/schemas/AssetLabels" },
          "tags": { "$ref": "#/components/schemas/Tags" }
        }
      },
      "Cursor": { "type": "string" },
      "CycleEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/CycleEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate", "cycleId"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" },
                  "cycleId": { "$ref": "#/components/schemas/NanoId" },
                  "cycleValue": { "type": "number" }
                }
              }
            ]
          }
        }
      },
      "CycleEventType": { "type": "string", "enum": ["cycle"] },
      "DataLabels": {
        "type": "object",
        "required": [
          "projectCode",
          "organisationId",
          "factoryId",
          "ancestorsIds",
          "assetsIds",
          "sensorsIds",
          "labels"
        ],
        "properties": {
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "mlConfigId": { "type": "string" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "ancestorsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
          "assetsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
          "sensorsIds": { "$ref": "#/components/schemas/SensorsUUIDS" },
          "valuesNames": { "$ref": "#/components/schemas/ValuesNames" },
          "labels": { "$ref": "#/components/schemas/BaseDataLabels" },
          "runId": { "$ref": "#/components/schemas/RunUUID" },
          "usersFeedback": { "$ref": "#/components/schemas/usersFeedback" }
        }
      },
      "DriftDetectionEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/DriftDetectionEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          }
        }
      },
      "DriftDetectionEventType": {
        "type": "string",
        "enum": ["drift_detection"]
      },
      "DSPADDataAnalysisEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/DSPADDataAnalysisEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          }
        }
      },
      "DSPADDataAnalysisEventType": {
        "type": "string",
        "enum": ["dspad_data_mvt"]
      },
      "DSPADPredictEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/DSPADPredictEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" },
                  "runName": { "type": "string" }
                }
              }
            ]
          }
        }
      },
      "DSPADPredictEventType": { "type": "string", "enum": ["dspad_predict"] },
      "EventModel": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SegmentedAlertDetectionPredictEventModel"
          },
          { "$ref": "#/components/schemas/ForecastLearnEventModel" },
          { "$ref": "#/components/schemas/RealtimeAlertEventSchemaModel" },
          { "$ref": "#/components/schemas/DriftDetectionEventModel" },
          { "$ref": "#/components/schemas/ForecastPredictEventModel" },
          { "$ref": "#/components/schemas/DSPADPredictEventModel" },
          { "$ref": "#/components/schemas/ProcessEventSchemaModel" },
          { "$ref": "#/components/schemas/AnomalyEventModel" },
          { "$ref": "#/components/schemas/DSPADDataAnalysisEventModel" },
          { "$ref": "#/components/schemas/CycleEventModel" },
          { "$ref": "#/components/schemas/PhaseEventModel" }
        ]
      },
      "EventType": {
        "type": "string",
        "enum": [
          "segmented_anomaly_detection_predict",
          "univariate_forecast_learn",
          "realtime_alert",
          "drift_detection",
          "univariate_forecast_predict",
          "dspad_predict",
          "process",
          "anomaly",
          "dspad_data_mvt",
          "cycle",
          "phase"
        ]
      },
      "EventTypes": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/EventType" }
      },
      "EventUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "EventModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/EventModel"
          }
        }
      },
      "EventsItems": {
        "type": "object",
        "required": ["total", "cursors", "events", "items"],
        "properties": {
          "total": { "type": "number" },
          "cursors": {
            "type": "object",
            "properties": {
              "before": { "$ref": "#/components/schemas/Cursor" },
              "since": { "$ref": "#/components/schemas/Cursor" }
            }
          },
          "items": { "$ref": "#/components/schemas/EventsUUIDS" },
          "events": { "$ref": "#/components/schemas/EventModelHash" }
        }
      },
      "EventsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/EventUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "ForecastLearnEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/ForecastLearnEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/DataLabels" }
        }
      },
      "ForecastLearnEventType": {
        "type": "string",
        "enum": ["univariate_forecast_learn"]
      },
      "ForecastPredictEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/ForecastPredictEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          }
        }
      },
      "ForecastPredictEventType": {
        "type": "string",
        "enum": ["univariate_forecast_predict"]
      },
      "ManufacturingCycles": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ManufacturingCycle" }
      },
      "NanoId": {
        "type": "string",
        "pattern": "^[useandom\\-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict]{21}$"
      },
      "PhaseEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/PhaseEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate", "phaseName"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" },
                  "phaseName": { "type": "string" },
                  "phaseValue": { "type": "number" }
                }
              }
            ]
          }
        }
      },
      "PhaseEventType": { "type": "string", "enum": ["phase"] },
      "ProcessEventSchemaModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/ProcessEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "required": ["stepName"],
                "properties": {
                  "triggeringValue": { "type": "number" },
                  "stepName": { "type": "string" },
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          }
        }
      },
      "ProcessEventType": { "type": "string", "enum": ["process"] },
      "RealtimeAlertEventSchemaModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": { "$ref": "#/components/schemas/RealtimeAlertEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "required": [
                  "triggeringValue",
                  "variables",
                  "activatedAlertsTriggersIds",
                  "startDate",
                  "endDate"
                ],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" },
                  "triggeringValue": { "type": "number" },
                  "variables": {
                    "$ref": "#/components/schemas/SensorVariables"
                  },
                  "activatedAlertsTriggersIds": {
                    "$ref": "#/components/schemas/AlertsTriggersUUIDS"
                  },
                  "customI18NMessage": {
                    "$ref": "#/components/schemas/I18NString"
                  }
                }
              }
            ]
          }
        }
      },
      "RealtimeAlertEventType": {
        "type": "string",
        "enum": ["realtime_alert"]
      },
      "RunUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "SegmentedAlertDetectionPredictEventModel": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/EventUUID" },
          "type": {
            "$ref": "#/components/schemas/SegmentedAlertDetectionPredictEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "additionalProperties": true,
                "required": ["startDate", "endDate"],
                "properties": {
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          }
        }
      },
      "SegmentedAlertDetectionPredictEventType": {
        "type": "string",
        "enum": ["segmented_anomaly_detection_predict"]
      },
      "Size": {
        "type": "number",
        "minimum": 1,
        "maximum": 10000,
        "multipleOf": 10
      },
      "userFeedback": {
        "type": "number",
        "maximum": 100,
        "minimum": -100,
        "multipleOf": 1
      },
      "usersFeedback": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/userFeedback"
          }
        }
      },
      "ValuedLabelName": { "type": "string", "pattern": "^[a-zA-Z0-9_]+$" },
      "ValuedLabels": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^[a-zA-Z0-9_]+$": { "$ref": "#/components/schemas/LabelValue" }
        }
      },
      "DoSyncMode": {
        "type": "string",
        "enum": ["one-way-in", "one-way-out", "two-ways"]
      },
      "FactoryModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/FactoryModel"
          }
        }
      },
      "FactoriesItems": {
        "type": "object",
        "required": ["items", "factories"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/FactoriesUUIDS" },
          "factories": { "$ref": "#/components/schemas/FactoryModelHash" }
        }
      },
      "FactoriesUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/FactoryUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "FactoryData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "locale", "timeZone"],
        "properties": {
          "name": { "type": "string" },
          "locale": { "$ref": "#/components/schemas/Locale" },
          "timeZone": { "$ref": "#/components/schemas/TimeZone" }
        }
      },
      "FactoryItem": {
        "type": "object",
        "required": ["item", "factories"],
        "properties": {
          "item": { "$ref": "#/components/schemas/FactoryUUID" },
          "factories": { "$ref": "#/components/schemas/FactoryModelHash" }
        }
      },
      "FactoryModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "id": { "$ref": "#/components/schemas/FactoryUUID" },
              "organisationId": {
                "$ref": "#/components/schemas/OrganisationUUID"
              },
              "rootAssetsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
              "linkedOrganisationsIds": {
                "$ref": "#/components/schemas/OrganisationsUUIDS"
              },
              "data": { "$ref": "#/components/schemas/FactoryData" },
              "creation": { "$ref": "#/components/schemas/Date" },
              "lastModification": { "$ref": "#/components/schemas/Date" }
            }
          }
        ]
      },
      "FactoryUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "NoSyncMode": { "type": "string", "enum": ["none"] },
      "factoriesSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "SyncMode": {
        "oneOf": [
          { "$ref": "#/components/schemas/NoSyncMode" },
          { "$ref": "#/components/schemas/DoSyncMode" }
        ]
      },
      "SynchronizableItem": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "syncMode": { "$ref": "#/components/schemas/NoSyncMode" },
              "externalId": { "type": "string" }
            }
          },
          {
            "type": "object",
            "required": ["syncMode"],
            "properties": {
              "syncMode": { "$ref": "#/components/schemas/DoSyncMode" },
              "externalId": { "type": "string" }
            }
          }
        ]
      },
      "AlertAssignations": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["id", "assignedAt"],
          "properties": {
            "id": { "$ref": "#/components/schemas/UserUUID" },
            "assignedAt": { "$ref": "#/components/schemas/Date" },
            "viewedAt": { "$ref": "#/components/schemas/Date" }
          }
        }
      },
      "AlertCode": {
        "oneOf": [
          { "$ref": "#/components/schemas/StandardAlertCode" },
          { "$ref": "#/components/schemas/CustomAlertCode" }
        ]
      },
      "AlertItem": {
        "type": "object",
        "required": ["item", "alerts"],
        "properties": {
          "item": { "$ref": "#/components/schemas/AlertUUID" },
          "alerts": { "$ref": "#/components/schemas/AlertModelHash" },
          "interventions": {
            "$ref": "#/components/schemas/InterventionModelHash"
          },
          "sensors": { "$ref": "#/components/schemas/SensorModelHash" },
          "attachments": { "$ref": "#/components/schemas/AttachmentModelHash" },
          "images": { "$ref": "#/components/schemas/ImageModelHash" }
        }
      },
      "AlertModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          { "$ref": "#/components/schemas/BaseAlertModel" }
        ]
      },
      "AlertStatus": {
        "title": "AlertStatus",
        "type": "string",
        "enum": ["open", "discarded", "fixed", "closed"]
      },
      "AlertModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/AlertModel"
          }
        }
      },
      "AlertsItems": {
        "type": "object",
        "required": ["items", "alerts"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/AlertsUUIDS" },
          "alerts": { "$ref": "#/components/schemas/AlertModelHash" },
          "interventions": {
            "$ref": "#/components/schemas/InterventionModelHash"
          },
          "sensors": { "$ref": "#/components/schemas/SensorModelHash" },
          "attachments": { "$ref": "#/components/schemas/AttachmentModelHash" },
          "images": { "$ref": "#/components/schemas/ImageModelHash" }
        }
      },
      "BaseAlertData": {
        "type": "object",
        "required": ["code", "priority", "severity", "viewed", "details"],
        "properties": {
          "details": {
            "oneOf": [
              { "$ref": "#/components/schemas/NoAlertDetailsModel" },
              { "$ref": "#/components/schemas/RealtimeAlertDetailsModel" },
              { "$ref": "#/components/schemas/SilentSensorsAlertDetailsModel" }
            ]
          },
          "code": { "$ref": "#/components/schemas/AlertCode" },
          "i18nMessage": { "$ref": "#/components/schemas/I18NString" },
          "priority": { "$ref": "#/components/schemas/Priority" },
          "severity": {
            "type": "string",
            "enum": [
              "not_set",
              "critical",
              "major",
              "moderate",
              "minor",
              "cosmetic"
            ]
          },
          "viewed": { "type": "boolean" },
          "assignedUsersIds": { "$ref": "#/components/schemas/UsersUUIDS" },
          "comment": { "type": "string" }
        }
      },
      "BaseAlertModel": {
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/AlertUUID" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "assetId": { "$ref": "#/components/schemas/AssetUUID" },
          "assignations": { "$ref": "#/components/schemas/AlertAssignations" },
          "interventionId": { "$ref": "#/components/schemas/InterventionUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "imagesIds": { "$ref": "#/components/schemas/ImagesUUIDS" },
          "attachmentsIds": { "$ref": "#/components/schemas/AttachmentsUUIDS" },
          "sensorsIds": { "$ref": "#/components/schemas/SensorsUUIDS" },
          "sensorsValues": { "$ref": "#/components/schemas/ValuesNames" },
          "eventsIds": { "$ref": "#/components/schemas/EventsUUIDS" },
          "recurringAlertId": { "$ref": "#/components/schemas/AlertUUID" },
          "startAt": { "$ref": "#/components/schemas/Date" },
          "endAt": { "$ref": "#/components/schemas/Date" },
          "taskStatus": { "$ref": "#/components/schemas/TaskStatus" },
          "status": { "$ref": "#/components/schemas/AlertStatus" },
          "usersFeedback": { "$ref": "#/components/schemas/usersFeedback" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" },
          "data": { "$ref": "#/components/schemas/BaseAlertData" }
        }
      },
      "CustomAlertCode": {
        "description": "User defined alert codes.",
        "type": "string",
        "pattern": "^custom:[a-z0-9_]+"
      },
      "I18NString": {
        "description": "Some text displayable in multiple languages.",
        "type": "object",
        "patternProperties": { "^[a-z]{2}-[A-Z]{2,3}$": { "type": "string" } }
      },
      "ImageModel": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "urls",
          "stats",
          "creation",
          "lastModification",
          "scope"
        ],
        "properties": {
          "id": { "$ref": "#/components/schemas/ImageUUID" },
          "authorId": { "$ref": "#/components/schemas/UserUUID" },
          "scope": { "$ref": "#/components/schemas/ImageScope" },
          "alert": { "$ref": "#/components/schemas/AlertUUID" },
          "intervention": { "$ref": "#/components/schemas/InterventionUUID" },
          "urls": {
            "type": "object",
            "additionalProperties": false,
            "required": ["original"],
            "properties": {
              "original": { "type": "string" },
              "large": { "type": "string" },
              "medium": { "type": "string" },
              "thumb": { "type": "string" }
            }
          },
          "stats": {
            "type": "object",
            "additionalProperties": false,
            "required": ["name", "size", "type"],
            "properties": {
              "name": { "type": "string" },
              "size": { "type": "number" },
              "type": { "type": "string" }
            }
          },
          "resized": { "type": "string" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" }
        }
      },
      "ImageScope": {
        "title": "ImageScope",
        "type": "string",
        "enum": ["data-science", "customer"]
      },
      "ImageModelHash": {
        "type": "object",
        "patternProperties": {
          "undefined": { "$ref": "#/components/schemas/ImageModel" }
        }
      },
      "InterventionData": {
        "type": "object",
        "additionalProperties": false,
        "description": "Intervention data the user can change.",
        "required": ["assignedUsersIds", "assetsIds", "archived", "priority"],
        "properties": {
          "assignedUsersIds": {
            "$ref": "#/components/schemas/NonEmptyUsersUUIDS"
          },
          "assetsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
          "archived": { "type": "boolean" },
          "pauseAlertsTriggers": { "type": "boolean" },
          "type": { "$ref": "#/components/schemas/InterventionType" },
          "priority": { "$ref": "#/components/schemas/Priority" },
          "qualification": {
            "$ref": "#/components/schemas/InterventionQualification"
          },
          "report": { "$ref": "#/components/schemas/InterventionReport" }
        }
      },
      "InterventionItem": {
        "type": "object",
        "required": ["item", "interventions"],
        "properties": {
          "item": { "$ref": "#/components/schemas/InterventionUUID" },
          "interventions": {
            "$ref": "#/components/schemas/InterventionModelHash"
          },
          "alerts": { "$ref": "#/components/schemas/AlertModelHash" },
          "images": { "$ref": "#/components/schemas/ImageModelHash" },
          "attachments": { "$ref": "#/components/schemas/AttachmentModelHash" },
          "users": { "$ref": "#/components/schemas/UserModelHash" }
        }
      },
      "InterventionQualification": {
        "type": "object",
        "description": "The user can qualify alerts while creating interventions and give feedback on it.",
        "required": ["usersFeedback", "alertsIds"],
        "additionalProperties": false,
        "properties": {
          "usersFeedback": { "$ref": "#/components/schemas/usersFeedback" },
          "alertsIds": { "$ref": "#/components/schemas/NonEmptyAlertsUUIDS" }
        }
      },
      "InterventionReport": {
        "oneOf": [
          {
            "type": "object",
            "description": "The intervention can have a report associated once marked as done.",
            "required": ["startDate"],
            "additionalProperties": false,
            "properties": {
              "rootCauses": { "type": "string" },
              "fixDetails": { "type": "string" },
              "startDate": { "$ref": "#/components/schemas/Date" },
              "endDate": { "$ref": "#/components/schemas/Date" }
            }
          },
          {
            "type": "object",
            "description": "When the intervention did not need a report, the user must add a comment.",
            "required": ["comment"],
            "additionalProperties": false,
            "properties": { "comment": { "type": "string" } }
          }
        ]
      },
      "InterventionModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          {
            "type": "object",
            "description": "An intervention done by a user in a factory",
            "required": ["data"],
            "properties": {
              "id": { "$ref": "#/components/schemas/InterventionUUID" },
              "organisationId": {
                "$ref": "#/components/schemas/OrganisationUUID"
              },
              "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
              "imagesIds": { "$ref": "#/components/schemas/ImagesUUIDS" },
              "attachmentsIds": {
                "$ref": "#/components/schemas/AttachmentsUUIDS"
              },
              "authorId": { "$ref": "#/components/schemas/UserUUID" },
              "creation": { "$ref": "#/components/schemas/Date" },
              "lastModification": { "$ref": "#/components/schemas/Date" },
              "qualifiedAt": { "$ref": "#/components/schemas/Date" },
              "reportedAt": { "$ref": "#/components/schemas/Date" },
              "archivedAt": { "$ref": "#/components/schemas/Date" },
              "taskStatus": { "$ref": "#/components/schemas/TaskStatus" },
              "data": { "$ref": "#/components/schemas/InterventionData" }
            }
          }
        ]
      },
      "InterventionType": {
        "title": "InterventionType",
        "type": "string",
        "enum": ["fix", "prevent", "control"]
      },
      "InterventionUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "InterventionModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/InterventionModel"
          }
        }
      },
      "InterventionsItems": {
        "type": "object",
        "required": ["items", "interventions"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/InterventionsUUIDS" },
          "interventions": {
            "$ref": "#/components/schemas/InterventionModelHash"
          },
          "alerts": { "$ref": "#/components/schemas/AlertModelHash" },
          "images": { "$ref": "#/components/schemas/ImageModelHash" },
          "attachments": { "$ref": "#/components/schemas/AttachmentModelHash" },
          "users": { "$ref": "#/components/schemas/UserModelHash" }
        }
      },
      "InterventionsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/InterventionUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "NoAlertDetailsModel": {
        "type": "object",
        "additionalProperties": false
      },
      "NonEmptyAlertsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertUUID" },
        "minItems": 1,
        "uniqueItems": true
      },
      "NonEmptyUsersUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/UserUUID" },
        "minItems": 1,
        "uniqueItems": false
      },
      "Priority": {
        "title": "Priority",
        "type": "string",
        "enum": ["not_set", "urgent", "important", "secondary"]
      },
      "RealtimeAlertDetailsModel": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "triggeringValue",
          "variables",
          "activatedAlertsTriggersIds"
        ],
        "properties": {
          "triggeringValue": { "type": "number" },
          "variables": { "$ref": "#/components/schemas/SensorVariables" },
          "activatedAlertsTriggersIds": {
            "$ref": "#/components/schemas/AlertsTriggersUUIDS"
          }
        }
      },
      "SilentSensorsAlertDetailsModel": {
        "type": "object",
        "additionalProperties": false,
        "required": ["totalSilence", "sensorsIds"],
        "properties": {
          "totalSilence": { "type": "boolean" },
          "sensorsIds": { "$ref": "#/components/schemas/SensorsUUIDS" }
        }
      },
      "interventionsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "priority"]
      },
      "StandardAlertCode": {
        "description": "DiagRAMS predefined alert codes.",
        "type": "string",
        "enum": [
          "missing_data",
          "bad_data",
          "wrong_delta",
          "production_drop",
          "out_of_bounds",
          "abnormal_data",
          "data_drift",
          "silence_alert",
          "realtime_alert"
        ]
      },
      "MockName": { "type": "string", "pattern": "^[a-z0-9_\\-]+$" },
      "TrendModelHash": {
        "type": "object",
        "patternProperties": {
          "undefined": { "$ref": "#/components/schemas/TrendModel" }
        }
      },
      "TrendItems": {
        "type": "object",
        "required": ["total", "items", "trends"],
        "properties": {
          "total": { "type": "number" },
          "items": { "$ref": "#/components/schemas/UUIDS" },
          "trends": { "$ref": "#/components/schemas/TrendModelHash" }
        }
      },
      "TrendModel": {
        "type": "object",
        "properties": {
          "id": { "$ref": "#/components/schemas/UUID" },
          "sensorId": { "$ref": "#/components/schemas/SensorUUID" },
          "intercept": { "type": "number" },
          "slope": { "type": "number" },
          "from": { "$ref": "#/components/schemas/Date" },
          "to": { "$ref": "#/components/schemas/Date" }
        }
      },
      "NonEmptyValuesNames": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ValueName" },
        "minItems": 1
      },
      "OrganisationData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "locale", "timeZone"],
        "properties": {
          "name": { "type": "string" },
          "locale": { "$ref": "#/components/schemas/Locale" },
          "timeZone": { "$ref": "#/components/schemas/TimeZone" }
        }
      },
      "OrganisationItem": {
        "type": "object",
        "required": ["item", "organisations"],
        "properties": {
          "item": { "$ref": "#/components/schemas/OrganisationUUID" },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationModelHash"
          }
        }
      },
      "OrganisationModel": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoriesIds": { "$ref": "#/components/schemas/FactoriesUUIDS" },
          "data": { "$ref": "#/components/schemas/OrganisationData" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" }
        }
      },
      "OrganisationUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "OrganisationModelHash": {
        "type": "object",
        "patternProperties": {
          "undefined": { "$ref": "#/components/schemas/OrganisationModel" }
        }
      },
      "OrganisationsItems": {
        "type": "object",
        "required": ["items", "organisations"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/OrganisationsUUIDS" },
          "organisations": {
            "$ref": "#/components/schemas/OrganisationModelHash"
          }
        }
      },
      "OrganisationsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/OrganisationUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "organisationsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification"]
      },
      "DataTopic": { "type": "string", "pattern": "^[a-z0-9]+$" },
      "MLAlgorithms": {
        "type": "array",
        "items": { "type": "string", "enum": ["pipelines", "custom"] }
      },
      "ProjectCode": { "type": "string", "pattern": "^[a-z0-9]+$" },
      "ProjectData": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "description",
          "projectCode",
          "algorithms",
          "bridge"
        ],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "algorithms": { "$ref": "#/components/schemas/MLAlgorithms" },
          "bridge": {
            "oneOf": [
              {
                "type": "object",
                "required": ["type"],
                "properties": { "type": { "type": "string", "enum": ["push"] } }
              },
              {
                "type": "object",
                "required": ["type"],
                "properties": {
                  "type": { "type": "string", "enum": ["pull"] },
                  "handler": { "type": "string" },
                  "schedule": { "type": "string" }
                }
              }
            ]
          },
          "ingestion": { "$ref": "#/components/schemas/ProjectIngestion" },
          "indexation": { "$ref": "#/components/schemas/ProjectIndexation" }
        }
      },
      "ProjectIndexation": {
        "type": "object",
        "properties": {
          "handler": { "type": "string" },
          "sourceTopic": { "$ref": "#/components/schemas/DataTopic" },
          "batchSize": { "type": "integer" },
          "delay": { "type": "integer" }
        },
        "required": ["handler", "sourceTopic", "batchSize", "delay"]
      },
      "ProjectIngestion": {
        "type": "object",
        "properties": {
          "handler": { "type": "string" },
          "sourceTopic": { "$ref": "#/components/schemas/DataTopic" },
          "batchSize": { "type": "integer" },
          "delay": { "type": "integer" }
        },
        "required": ["handler", "sourceTopic", "batchSize", "delay"]
      },
      "ProjectItem": {
        "type": "object",
        "required": ["item", "projects"],
        "properties": {
          "item": { "$ref": "#/components/schemas/ProjectUUID" },
          "projects": { "$ref": "#/components/schemas/ProjectModelHash" }
        }
      },
      "ProjectModel": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/ProjectUUID" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "author": { "$ref": "#/components/schemas/UserUUID" },
          "data": { "$ref": "#/components/schemas/ProjectData" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" }
        }
      },
      "ProjectUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "ProjectModelHash": {
        "type": "object",
        "patternProperties": {
          "undefined": { "$ref": "#/components/schemas/ProjectModel" }
        }
      },
      "ProjectsItems": {
        "type": "object",
        "required": ["items", "projects"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/ProjectsUUIDS" },
          "projects": { "$ref": "#/components/schemas/ProjectModelHash" }
        }
      },
      "ProjectsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ProjectUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "projectsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "AttachmentModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          {
            "type": "object",
            "required": ["id", "stats", "scope"],
            "properties": {
              "id": { "$ref": "#/components/schemas/AttachmentUUID" },
              "authorId": { "$ref": "#/components/schemas/UserUUID" },
              "alert": { "$ref": "#/components/schemas/AlertUUID" },
              "intervention": {
                "$ref": "#/components/schemas/InterventionUUID"
              },
              "report": { "$ref": "#/components/schemas/ReportUUID" },
              "scope": { "$ref": "#/components/schemas/AttachmentScope" },
              "url": { "type": "string" },
              "stats": {
                "type": "object",
                "additionalProperties": false,
                "required": ["name", "size", "type"],
                "properties": {
                  "name": { "type": "string" },
                  "size": { "type": "number" },
                  "type": { "type": "string" }
                }
              },
              "creation": { "$ref": "#/components/schemas/Date" },
              "lastModification": { "$ref": "#/components/schemas/Date" }
            }
          }
        ]
      },
      "AttachmentScope": {
        "title": "AttachmentScope",
        "type": "string",
        "enum": ["data-science", "customer"]
      },
      "AttachmentUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "AttachmentModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/AttachmentModel"
          }
        }
      },
      "AttachmentsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AttachmentUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "ReportData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "description"],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" }
        }
      },
      "ReportItem": {
        "type": "object",
        "required": ["item", "reports"],
        "properties": {
          "item": { "$ref": "#/components/schemas/ReportUUID" },
          "reports": { "$ref": "#/components/schemas/ReportModelHash" },
          "attachments": { "$ref": "#/components/schemas/AttachmentModelHash" }
        }
      },
      "ReportModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          {
            "type": "object",
            "required": [
              "data",
              "authorId",
              "factoryId",
              "creation",
              "lastModification"
            ],
            "properties": {
              "id": { "$ref": "#/components/schemas/ReportUUID" },
              "attachmentId": { "$ref": "#/components/schemas/AttachmentUUID" },
              "organisationId": {
                "$ref": "#/components/schemas/OrganisationUUID"
              },
              "authorId": { "$ref": "#/components/schemas/UserUUID" },
              "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
              "data": { "$ref": "#/components/schemas/ReportData" },
              "creation": { "$ref": "#/components/schemas/Date" },
              "lastModification": { "$ref": "#/components/schemas/Date" }
            }
          }
        ]
      },
      "ReportUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "ReportModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/ReportModel"
          }
        }
      },
      "ReportsItems": {
        "type": "object",
        "required": ["items", "reports"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/ReportsUUIDS" },
          "reports": { "$ref": "#/components/schemas/ReportModelHash" },
          "attachments": { "$ref": "#/components/schemas/AttachmentModelHash" }
        }
      },
      "ReportsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ReportUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "reportsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "AlertTrigger": {
        "allOf": [
          {
            "type": "object",
            "required": ["id", "name", "i18nMessage"],
            "properties": {
              "id": { "$ref": "#/components/schemas/AlertTriggerUUID" },
              "name": { "type": "string" },
              "i18nMessage": { "$ref": "#/components/schemas/I18NString" }
            }
          },
          {
            "oneOf": [
              { "$ref": "#/components/schemas/SilenceAlertTrigger" },
              { "$ref": "#/components/schemas/RealtimeAlertTrigger" }
            ]
          }
        ]
      },
      "AlertTriggerUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "AlertType": { "type": "string", "enum": ["realtime", "silence"] },
      "AlertTriggerTypes": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertType" }
      },
      "AlertsTriggersUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/AlertTriggerUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "DataSensorSerieSource": {
        "type": "object",
        "required": ["sourceType"],
        "properties": { "sourceType": { "enum": ["data"] } }
      },
      "EventSensorSerieSource": {
        "type": "object",
        "required": ["sourceType", "eventField", "eventType"],
        "properties": {
          "sourceType": { "enum": ["event"] },
          "eventField": { "$ref": "#/components/schemas/EventField" },
          "eventType": { "$ref": "#/components/schemas/EventType" },
          "eventHasARange": { "type": "boolean" }
        }
      },
      "FirstEmission": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^[a-zA-Z0-9_]+$": { "$ref": "#/components/schemas/Date" }
        }
      },
      "SensorInferredType": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^[a-zA-Z0-9_]+$": { "$ref": "#/components/schemas/SensorDataType" }
        }
      },
      "QualitativeSensorSerie": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": { "enum": ["qualitative"] },
          "categories": {
            "type": "object",
            "patternProperties": { "^[0-9]+$": { "type": "string" } }
          }
        }
      },
      "QuantitativeSensorSerie": {
        "type": "object",
        "required": ["type"],
        "properties": { "type": { "enum": ["quantitative"] } }
      },
      "RealtimeAlertLabelTarget": {
        "title": "The target for label tests (linked assets or also its ancestors)",
        "type": "string",
        "enum": ["ancestors", "assets", "all"]
      },
      "RealtimeAlertLabelsOperator": {
        "title": "Wether all labels should match or any",
        "type": "string",
        "enum": ["all", "any"]
      },
      "RealtimeAlertTriggerBranch": {
        "type": "object",
        "required": ["operator", "leftNode", "rightNode"],
        "properties": {
          "type": { "type": "string", "enum": ["branch"] },
          "operator": {
            "title": "Realtime alert trigger branch operator",
            "type": "string",
            "enum": ["and", "or"]
          },
          "leftNode": {
            "$ref": "#/components/schemas/RealtimeAlertTriggerRule"
          },
          "rightNode": {
            "$ref": "#/components/schemas/RealtimeAlertTriggerRule"
          }
        }
      },
      "RealtimeAlertTriggerLabelTest": {
        "type": "object",
        "required": ["type", "operator", "name", "target", "values"],
        "properties": {
          "type": { "type": "string", "enum": ["label"] },
          "operator": {
            "$ref": "#/components/schemas/RealtimeAlertLabelsOperator"
          },
          "target": { "$ref": "#/components/schemas/RealtimeAlertLabelTarget" },
          "name": {
            "title": "Name of the label to test",
            "type": "string",
            "enum": ["phases", "cycles", "configurations", "tags"]
          },
          "values": {
            "title": "Values of the label to check",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "RealtimeAlertTriggerRule": {
        "oneOf": [
          { "$ref": "#/components/schemas/RealtimeAlertTriggerLabelTest" },
          {
            "$ref": "#/components/schemas/RealtimeAlertTriggerValuedLabelTest"
          },
          { "$ref": "#/components/schemas/RealtimeAlertTriggerValueTest" },
          { "$ref": "#/components/schemas/RealtimeAlertTriggerBranch" }
        ]
      },
      "RealtimeAlertTrigger": {
        "type": "object",
        "required": ["type", "occurences", "rule", "resetDelay"],
        "properties": {
          "type": {
            "description": "Realtime alert trigger type for a given rule positively evaluated",
            "type": "string",
            "enum": ["realtime"]
          },
          "occurences": {
            "description": "Required amount of positive evaluation of the rule to trigger an alert.",
            "type": "number",
            "minimum": 1
          },
          "duration": {
            "description": "Minimum time in microseconds during which the rule evaluates positively to trigger an alert",
            "type": "number"
          },
          "resetDelay": {
            "description": "Duration in microseconds during which the rule is resumed after a trigger",
            "type": "number"
          },
          "rule": { "$ref": "#/components/schemas/RealtimeAlertTriggerRule" }
        }
      },
      "RealtimeAlertTriggerValueTest": {
        "type": "object",
        "required": ["type", "operator", "value"],
        "properties": {
          "type": { "type": "string", "enum": ["value"] },
          "operator": {
            "title": "Realtime alert trigger value test operator",
            "type": "string",
            "enum": ["eq", "gt", "gte", "lt", "lte", "and", "xor"]
          },
          "value": {
            "oneOf": [
              { "description": "A constant value", "type": "number" },
              { "$ref": "#/components/schemas/SensorVariable" }
            ]
          }
        }
      },
      "RealtimeAlertTriggerValuedLabelTest": {
        "title": "An alert rule based on valued labels",
        "type": "object",
        "required": ["type", "operator", "target", "values"],
        "properties": {
          "type": { "type": "string", "enum": ["valued_label"] },
          "operator": {
            "$ref": "#/components/schemas/RealtimeAlertLabelsOperator"
          },
          "target": { "$ref": "#/components/schemas/RealtimeAlertLabelTarget" },
          "values": {
            "title": "Key/values to check",
            "type": "object",
            "patternProperties": { "^.*$": { "type": "string" } }
          }
        }
      },
      "SensorData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["name", "variables", "series", "alertsTriggers"],
        "properties": {
          "name": { "type": "string" },
          "variables": { "$ref": "#/components/schemas/SensorVariables" },
          "overridenType": {
            "type": "object",
            "additionalProperties": false,
            "patternProperties": {
              "^[a-zA-Z0-9_]+$": {
                "$ref": "#/components/schemas/SensorDataType"
              }
            }
          },
          "series": {
            "type": "array",
            "minItems": 1,
            "items": { "$ref": "#/components/schemas/SensorSerie" }
          },
          "alertsTriggers": {
            "type": "object",
            "additionalProperties": false,
            "patternProperties": {
              "^[a-zA-Z0-9_]+$": {
                "type": "array",
                "minItems": 1,
                "items": { "$ref": "#/components/schemas/AlertTrigger" }
              }
            }
          }
        }
      },
      "SensorDataType": {
        "title": "sensorType",
        "type": "string",
        "enum": ["qualitative", "quantitative"]
      },
      "SensorItem": {
        "type": "object",
        "required": ["item", "sensors"],
        "properties": {
          "item": { "$ref": "#/components/schemas/SensorUUID" },
          "sensors": { "$ref": "#/components/schemas/SensorModelHash" },
          "assets": { "$ref": "#/components/schemas/AssetModelHash" }
        }
      },
      "SensorQuery": {
        "description": "The query to be run to retrieve the sensor values",
        "type": "object",
        "required": ["aggregationType", "template", "pace", "timeFrame"],
        "properties": {
          "aggregationType": { "type": "string", "enum": ["ratio", "sum"] },
          "template": {
            "description": "The template of the query to run",
            "type": "string"
          },
          "pace": {
            "description": "The pace of the sensor values computation",
            "type": "integer",
            "multipleOf": 5
          },
          "timeFrame": {
            "description": "The time frame necessary to compute the value of the sensor",
            "type": "object",
            "required": ["unit", "value"],
            "properties": {
              "unit": { "type": "string", "enum": ["days", "hours"] },
              "value": { "type": "number", "minimum": 1 }
            }
          },
          "timeZone": { "$ref": "#/components/schemas/TimeZone" }
        }
      },
      "SensorModel": {
        "allOf": [
          { "$ref": "#/components/schemas/SynchronizableItem" },
          {
            "type": "object",
            "required": ["data"],
            "properties": {
              "id": { "$ref": "#/components/schemas/SensorUUID" },
              "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
              "organisationId": {
                "$ref": "#/components/schemas/OrganisationUUID"
              },
              "assetId": { "$ref": "#/components/schemas/AssetUUID" },
              "data": { "$ref": "#/components/schemas/SensorData" },
              "stats": { "$ref": "#/components/schemas/SensorStats" },
              "inferredType": {
                "$ref": "#/components/schemas/SensorInferredType"
              },
              "firstEmission": { "$ref": "#/components/schemas/FirstEmission" },
              "creation": { "$ref": "#/components/schemas/Date" },
              "lastModification": { "$ref": "#/components/schemas/Date" },
              "queries": {
                "type": "object",
                "additionalProperties": false,
                "patternProperties": {
                  "^[a-zA-Z0-9_]+$": {
                    "$ref": "#/components/schemas/SensorQuery"
                  }
                }
              }
            }
          }
        ]
      },
      "SensorSerie": {
        "allOf": [
          {
            "type": "object",
            "required": ["name", "unit"],
            "properties": {
              "name": { "$ref": "#/components/schemas/ValueName" },
              "unit": { "$ref": "#/components/schemas/SensorSerieUnit" },
              "description": { "type": "string" },
              "displayName": {
                "description": "Name to display for the serie",
                "type": "string"
              }
            }
          },
          {
            "oneOf": [
              { "$ref": "#/components/schemas/QuantitativeSensorSerie" },
              { "$ref": "#/components/schemas/QualitativeSensorSerie" }
            ]
          },
          {
            "oneOf": [
              { "$ref": "#/components/schemas/DataSensorSerieSource" },
              { "$ref": "#/components/schemas/EventSensorSerieSource" }
            ]
          }
        ]
      },
      "SensorSerieUnit": {
        "description": "SI Units, see https://en.wikipedia.org/wiki/International_System_of_Units .",
        "type": "string"
      },
      "SensorStats": {
        "type": "object",
        "additionalProperties": false,
        "patternProperties": {
          "^[a-zA-Z0-9_]+$": {
            "type": "object",
            "additionalProperties": false,
            "required": ["ever"],
            "properties": {
              "ever": {
                "required": ["min", "max"],
                "description": "Statistics for the sensor in the long run",
                "type": "object",
                "properties": {
                  "cardinality": {
                    "description": "Distinct values count for this sensor",
                    "type": "number"
                  },
                  "min": {
                    "description": "Min observed value for this sensor",
                    "type": "number"
                  },
                  "max": {
                    "description": "Max observed value for this sensor",
                    "type": "number"
                  },
                  "percentiles": {
                    "type": "object",
                    "properties": {
                      "1.0": {
                        "description": "1th percentile for this sensor",
                        "type": "number"
                      },
                      "5.0": {
                        "description": "5th percentile for this sensor",
                        "type": "number"
                      },
                      "25.0": {
                        "description": "25th percentile for this sensor",
                        "type": "number"
                      },
                      "50.0": {
                        "description": "50th percentile for this sensor",
                        "type": "number"
                      },
                      "75.0": {
                        "description": "75th percentile for this sensor",
                        "type": "number"
                      },
                      "95.0": {
                        "description": "95th percentile for this sensor",
                        "type": "number"
                      },
                      "99.0": {
                        "description": "99th percentile for this sensor",
                        "type": "number"
                      }
                    }
                  }
                }
              },
              "month": { "$ref": "#/components/schemas/SensorTimeBucketStats" },
              "day": { "$ref": "#/components/schemas/SensorTimeBucketStats" },
              "hour": { "$ref": "#/components/schemas/SensorTimeBucketStats" }
            }
          }
        }
      },
      "SensorTimeBucketStats": {
        "title": "Sensor value statistics for a given time bucket",
        "type": "object",
        "additionalProperties": false,
        "required": ["cardinality", "volumetry", "minMax", "maxMin"],
        "properties": {
          "cardinality": {
            "description": "Average distinct values count for the buckets",
            "type": "number"
          },
          "volumetry": {
            "description": "Average values count for the buckets",
            "type": "number"
          },
          "maxMin": {
            "description": "Higher min value for the buckets",
            "type": "number"
          },
          "minMax": {
            "description": "Lower max value for the buckets",
            "type": "number"
          }
        }
      },
      "SensorUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "SensorVariable": {
        "type": "string",
        "description": "A variable name",
        "pattern": "^[a-z][a-z0-9]*$"
      },
      "SensorVariables": {
        "type": "object",
        "patternProperties": {
          "^[a-z][a-z0-9]*$": {
            "oneOf": [
              { "type": "number" },
              { "type": "string", "pattern": "^%[a-z][a-z0-9]*$" }
            ]
          }
        }
      },
      "SensorModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/SensorModel"
          }
        }
      },
      "SensorsItems": {
        "type": "object",
        "required": ["items", "sensors"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/SensorsUUIDS" },
          "sensors": { "$ref": "#/components/schemas/SensorModelHash" },
          "assets": { "$ref": "#/components/schemas/AssetModelHash" }
        }
      },
      "SensorsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/SensorUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "SilenceAlertTrigger": {
        "type": "object",
        "required": ["type", "duration"],
        "properties": {
          "type": {
            "description": "Silence alert trigger type fires for a given silence duration",
            "type": "string",
            "enum": ["silence"]
          },
          "duration": { "type": "number", "minimum": 1800000 }
        }
      },
      "sensorsSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "aggregation": {
        "type": "string",
        "enum": [
          "min",
          "max",
          "avg",
          "count",
          "sum",
          "p25",
          "median",
          "p75",
          "top1",
          "top2",
          "top3",
          "others"
        ]
      },
      "aggregations": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/aggregation" }
      },
      "granularity": {
        "type": "string",
        "enum": [
          "second",
          "minute",
          "fifteen_minute",
          "thirty_minute",
          "hour",
          "day",
          "week",
          "month",
          "quarter",
          "year"
        ]
      },
      "measures": {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": ["date", "values"],
          "properties": {
            "date": { "$ref": "#/components/schemas/Date" },
            "values": { "type": "array", "items": { "type": "number" } },
            "qualities": { "type": "array", "items": { "type": "number" } },
            "labels": {
              "type": "array",
              "items": { "type": "array", "items": { "type": "string" } }
            },
            "labelsCount": {
              "type": "array",
              "items": { "type": "array", "items": { "type": "number" } }
            }
          }
        }
      },
      "NonEmptySensorsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/SensorUUID" },
        "minItems": 1,
        "uniqueItems": false
      },
      "EventField": {
        "title": "eventField",
        "type": "string",
        "enum": [
          "aggregatableValue1",
          "aggregatableValue2",
          "aggregatableValue3"
        ],
        "description": "Event Field to get event Data"
      },
      "EventFields": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/EventField" }
      },
      "SensorsMLData": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "labels": { "type": "array", "items": { "type": "string" } },
            "timestamp": { "type": "array", "items": { "type": "string" } },
            "data": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "oneOf": [
                    { "type": "string" },
                    { "type": "number" },
                    { "type": "array", "items": { "type": "string" } }
                  ]
                }
              }
            }
          }
        }
      },
      "ValueName": { "type": "string", "pattern": "^[a-zA-Z0-9_]+$" },
      "ValuesNames": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/ValueName" }
      },
      "SensorsEventData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["from", "to", "sensorsIds", "measures", "eventFields"],
        "properties": {
          "from": { "$ref": "#/components/schemas/Date" },
          "to": { "$ref": "#/components/schemas/Date" },
          "sensorsIds": { "$ref": "#/components/schemas/NonEmptySensorsUUIDS" },
          "eventFields": { "$ref": "#/components/schemas/EventFields" },
          "configuration": {
            "$ref": "#/components/schemas/AssetConfiguration"
          },
          "phase": { "$ref": "#/components/schemas/ManufacturingPhase" },
          "measures": { "$ref": "#/components/schemas/measures" }
        }
      },
      "EventRangeData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["from", "to", "sensorsIds", "eventFields", "measures"],
        "properties": {
          "from": { "$ref": "#/components/schemas/Date" },
          "to": { "$ref": "#/components/schemas/Date" },
          "sensorsIds": { "$ref": "#/components/schemas/NonEmptySensorsUUIDS" },
          "eventFields": { "$ref": "#/components/schemas/EventFields" },
          "configuration": {
            "$ref": "#/components/schemas/AssetConfiguration"
          },
          "phase": { "$ref": "#/components/schemas/ManufacturingPhase" },
          "measures": { "$ref": "#/components/schemas/RangeMeasures" }
        }
      },
      "RangeMeasures": {
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "required": ["startDate", "endDate", "value"],
            "properties": {
              "startDate": { "$ref": "#/components/schemas/Date" },
              "endDate": { "$ref": "#/components/schemas/Date" },
              "value": { "type": "number" },
              "quality": { "type": "number" },
              "labels": { "type": "array", "items": { "type": "string" } }
            }
          }
        }
      },
      "Priorities": {
        "title": "Priorities",
        "type": "array",
        "minItems": 1,
        "items": { "$ref": "#/components/schemas/Priority" }
      },
      "tasksSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification"]
      },
      "TaskModel": {
        "type": "object",
        "additionalProperties": false,
        "required": ["status", "creation", "lastModification"],
        "properties": {
          "status": { "$ref": "#/components/schemas/TaskStatus" },
          "priority": { "$ref": "#/components/schemas/Priority" },
          "assetsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" }
        },
        "oneOf": [
          {
            "required": ["id", "type"],
            "properties": {
              "id": { "$ref": "#/components/schemas/AlertUUID" },
              "type": { "type": "string", "enum": ["alert"] }
            }
          },
          {
            "required": ["id", "type"],
            "properties": {
              "id": { "$ref": "#/components/schemas/InterventionUUID" },
              "type": { "type": "string", "enum": ["intervention"] }
            }
          }
        ]
      },
      "TaskStatus": {
        "type": "string",
        "enum": ["to_assign", "to_do", "in_progress", "done"]
      },
      "TasksStatuses": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/TaskStatus" },
        "minItems": 1
      },
      "TaskType": { "type": "string", "enum": ["alert", "intervention"] },
      "TasksTypes": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/TaskType" },
        "minItems": 1
      },
      "TasksModel": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/TaskModel" },
        "uniqueItems": true
      },
      "SearchFilterType": { "type": "string", "enum": ["factory", "asset"] },
      "SearchType": {
        "type": "string",
        "enum": [
          "user",
          "factory",
          "project",
          "asset",
          "application",
          "intervention",
          "alert",
          "report",
          "sensor",
          "organisation"
        ]
      },
      "MembershipCancelledNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/MembershipCancelledEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/MembershipCancelledEventData"
              }
            }
          }
        ]
      },
      "AlertDeletedEventType": { "type": "string", "enum": ["ALERT_DELETED"] },
      "AlertEventData": {
        "type": "object",
        "required": ["organisationId", "factoryId", "alertId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "alertId": { "$ref": "#/components/schemas/AlertUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "imagesIds": { "$ref": "#/components/schemas/ImagesUUIDS" },
          "attachmentsIds": { "$ref": "#/components/schemas/AttachmentsUUIDS" },
          "eventsIds": { "$ref": "#/components/schemas/EventsUUIDS" }
        }
      },
      "AlertNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  { "$ref": "#/components/schemas/AlertUpsertedEventType" },
                  { "$ref": "#/components/schemas/AlertDeletedEventType" }
                ]
              },
              "eventData": { "$ref": "#/components/schemas/AlertEventData" }
            }
          }
        ]
      },
      "AlertUpsertedEventType": {
        "type": "string",
        "enum": ["ALERT_UPSERTED"]
      },
      "AlgorithmModelEventData": {
        "type": "object",
        "required": ["organisationId", "projectId", "projectCode"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "projectId": { "$ref": "#/components/schemas/ProjectUUID" },
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" }
        }
      },
      "AlgorithmModelUpdatedEventType": {
        "type": "string",
        "enum": ["ALGORITHM_MODEL_UPDATED"]
      },
      "AlgorithmModelUpdatedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/AlgorithmModelUpdatedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/AlgorithmModelEventData"
              }
            }
          }
        ]
      },
      "ApplicationDeletedEventType": {
        "type": "string",
        "enum": ["APPLICATION_DELETED"]
      },
      "ApplicationEventData": {
        "type": "object",
        "required": ["organisationId", "userId", "applicationId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "applicationId": { "$ref": "#/components/schemas/ApplicationUUID" }
        }
      },
      "ApplicationNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationUpsertedEventType"
                  },
                  { "$ref": "#/components/schemas/ApplicationDeletedEventType" }
                ]
              },
              "eventData": {
                "$ref": "#/components/schemas/ApplicationEventData"
              }
            }
          }
        ]
      },
      "ApplicationUpsertedEventType": {
        "type": "string",
        "enum": ["APPLICATION_UPSERTED"]
      },
      "AssetDeletedEventType": { "type": "string", "enum": ["ASSET_DELETED"] },
      "AssetEventData": {
        "type": "object",
        "required": ["organisationId", "factoryId", "assetId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "assetId": { "$ref": "#/components/schemas/AssetUUID" }
        }
      },
      "AssetNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  { "$ref": "#/components/schemas/AssetUpsertedEventType" },
                  { "$ref": "#/components/schemas/AssetDeletedEventType" }
                ]
              },
              "eventData": { "$ref": "#/components/schemas/AssetEventData" }
            }
          }
        ]
      },
      "AssetUpsertedEventType": {
        "type": "string",
        "enum": ["ASSET_UPSERTED"]
      },
      "CommonNotification": {
        "type": "object",
        "required": ["id", "date", "read", "data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "date": { "$ref": "#/components/schemas/Date" },
          "read": { "type": "boolean" },
          "data": {
            "type": "object",
            "properties": {
              "organisationId": {
                "$ref": "#/components/schemas/OrganisationUUID"
              },
              "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
              "ancestorsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
              "assetsIds": { "$ref": "#/components/schemas/AssetsUUIDS" },
              "alertsIds": { "$ref": "#/components/schemas/AlertsUUIDS" },
              "sensorsIds": { "$ref": "#/components/schemas/SensorsUUIDS" }
            }
          }
        }
      },
      "EmailStatusUpdatedEventData": {
        "type": "object",
        "required": ["userId", "email", "name", "status"],
        "additionalProperties": false,
        "properties": {
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "email": { "type": "string" },
          "name": { "type": "string" },
          "status": { "$ref": "#/components/schemas/emailStatus" }
        }
      },
      "EmailStatusUpdatedEventType": {
        "type": "string",
        "enum": ["EMAIL_STATUS_UPDATED"]
      },
      "EmailStatusUpdatedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/EmailStatusUpdatedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/EmailStatusUpdatedEventData"
              }
            }
          }
        ]
      },
      "FactoryDeletedEventType": {
        "type": "string",
        "enum": ["FACTORY_DELETED"]
      },
      "FactoryEventData": {
        "type": "object",
        "required": ["organisationId", "factoryId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" }
        }
      },
      "FactoryNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  { "$ref": "#/components/schemas/FactoryUpsertedEventType" },
                  { "$ref": "#/components/schemas/FactoryDeletedEventType" }
                ]
              },
              "eventData": { "$ref": "#/components/schemas/FactoryEventData" }
            }
          }
        ]
      },
      "FactoryUpsertedEventType": {
        "type": "string",
        "enum": ["FACTORY_UPSERTED"]
      },
      "InterventionDeletedEventType": {
        "type": "string",
        "enum": ["INTERVENTION_DELETED"]
      },
      "InterventionEventData": {
        "type": "object",
        "required": ["organisationId", "factoryId", "interventionId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "interventionId": { "$ref": "#/components/schemas/InterventionUUID" },
          "alertsEventsIds": { "$ref": "#/components/schemas/EventsUUIDS" },
          "userFeedback": { "$ref": "#/components/schemas/userFeedback" },
          "imagesIds": { "$ref": "#/components/schemas/ImagesUUIDS" },
          "attachmentsIds": { "$ref": "#/components/schemas/AttachmentsUUIDS" }
        }
      },
      "InterventionNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/InterventionUpsertedEventType"
                  },
                  {
                    "$ref": "#/components/schemas/InterventionDeletedEventType"
                  }
                ]
              },
              "eventData": {
                "$ref": "#/components/schemas/InterventionEventData"
              }
            }
          }
        ]
      },
      "InterventionUpsertedEventType": {
        "type": "string",
        "enum": ["INTERVENTION_UPSERTED"]
      },
      "MembershipCancelledEventData": {
        "type": "object",
        "required": ["userId", "organisationId"],
        "additionalProperties": false,
        "properties": {
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" }
        }
      },
      "MembershipCancelledEventType": {
        "type": "string",
        "enum": ["MEMBERSHIP_CANCELLED"]
      },
      "MembershipCancelledEventSchema": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/MembershipCancelledEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/MembershipCancelledEventData"
              }
            }
          }
        ]
      },
      "NotificationModel": {
        "oneOf": [
          { "$ref": "#/components/schemas/UserCreatedNotification" },
          { "$ref": "#/components/schemas/UserUpdatedNotification" },
          { "$ref": "#/components/schemas/AlertNotification" },
          { "$ref": "#/components/schemas/AssetNotification" },
          { "$ref": "#/components/schemas/ApplicationNotification" },
          { "$ref": "#/components/schemas/InterventionNotification" },
          { "$ref": "#/components/schemas/ReportNotification" },
          { "$ref": "#/components/schemas/SensorNotification" },
          { "$ref": "#/components/schemas/FactoryNotification" },
          { "$ref": "#/components/schemas/ProjectNotification" },
          { "$ref": "#/components/schemas/AlgorithmModelUpdatedNotification" },
          { "$ref": "#/components/schemas/OrganisationNotification" },
          {
            "$ref": "#/components/schemas/OrganisationUserUpdatedNotification"
          },
          {
            "$ref": "#/components/schemas/OrganisationPreferencesUpsertedNotification"
          },
          { "$ref": "#/components/schemas/SensorSeriesDeletedNotification" },
          {
            "$ref": "#/components/schemas/PasswordChangeRequestedNotification"
          },
          { "$ref": "#/components/schemas/EmailStatusUpdatedNotification" },
          { "$ref": "#/components/schemas/UserFeedbackUpdatedNotification" },
          {
            "$ref": "#/components/schemas/UserInvitedInOrganisationNotification"
          },
          { "$ref": "#/components/schemas/MembershipCancelledEventSchema" },
          {
            "$ref": "#/components/schemas/VirtualSensorComputeRequestedNotification"
          }
        ]
      },
      "NotificationType": {
        "type": "string",
        "enum": [
          "USER_CREATED",
          "USER_UPDATED",
          "ALERT_UPSERTED",
          "ALERT_DELETED",
          "ASSET_UPSERTED",
          "ASSET_DELETED",
          "SENSOR_UPSERTED",
          "SENSOR_DELETED",
          "REPORT_UPSERTED",
          "REPORT_DELETED",
          "INTERVENTION_UPSERTED",
          "INTERVENTION_DELETED",
          "ALGORITHM_MODEL_UPDATED",
          "PROJECT_UPSERTED",
          "PROJECT_DELETED",
          "FACTORY_UPSERTED",
          "FACTORY_DELETED",
          "ORGANISATION_UPSERTED",
          "ORGANISATION_DELETED",
          "ORGANISATION_USER_UPDATED",
          "ORGANISATION_PREFERENCES_UPSERTED",
          "SENSOR_SERIES_DELETED",
          "PASSWORD_CHANGE_REQUESTED",
          "EMAIL_STATUS_UPDATED",
          "USER_FEEDBACK_UPDATED",
          "USER_INVITED_IN_ORGANISATION",
          "MEMBERSHIP_CANCELLED",
          "VIRTUAL_SENSOR_COMPUTE_REQUESTED"
        ]
      },
      "NotificationTypes": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/NotificationType" }
      },
      "NotificationModelHash": {
        "type": "object",
        "patternProperties": {
          "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$": {
            "$ref": "#/components/schemas/NotificationModel"
          }
        }
      },
      "NotificationsItems": {
        "type": "object",
        "required": ["total", "notifications", "items"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/NotificationsUUIDS" },
          "notifications": {
            "$ref": "#/components/schemas/NotificationModelHash"
          }
        }
      },
      "OrganisationDeletedEventType": {
        "type": "string",
        "enum": ["ORGANISATION_DELETED"]
      },
      "OrganisationEventData": {
        "type": "object",
        "required": ["organisationId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" }
        }
      },
      "OrganisationNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/OrganisationUpsertedEventType"
                  },
                  {
                    "$ref": "#/components/schemas/OrganisationDeletedEventType"
                  }
                ]
              },
              "eventData": {
                "$ref": "#/components/schemas/OrganisationEventData"
              }
            }
          }
        ]
      },
      "OrganisationPreferencesUpsertedEventData": {
        "type": "object",
        "required": ["organisationId", "userId", "preferences"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "preferences": {
            "$ref": "#/components/schemas/PartialPreferencesModel"
          }
        }
      },
      "OrganisationPreferencesUpsertedEventType": {
        "type": "string",
        "enum": ["ORGANISATION_PREFERENCES_UPSERTED"]
      },
      "OrganisationPreferencesUpsertedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/OrganisationPreferencesUpsertedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/OrganisationPreferencesUpsertedEventData"
              }
            }
          }
        ]
      },
      "OrganisationUpsertedEventType": {
        "type": "string",
        "enum": ["ORGANISATION_UPSERTED"]
      },
      "OrganisationUserUpdatedEventData": {
        "type": "object",
        "required": ["organisationId", "userId", "userName", "accepted"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "userName": { "type": "string" },
          "accepted": { "type": "boolean" }
        }
      },
      "OrganisationUserUpdatedEventType": {
        "type": "string",
        "enum": ["ORGANISATION_USER_UPDATED"]
      },
      "OrganisationUserUpdatedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/OrganisationUserUpdatedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/OrganisationUserUpdatedEventData"
              }
            }
          }
        ]
      },
      "PasswordChangeRequestedEventData": {
        "type": "object",
        "required": ["token", "email", "userName", "locale"],
        "additionalProperties": false,
        "properties": {
          "token": { "type": "string" },
          "email": { "type": "string" },
          "userName": { "type": "string" },
          "locale": { "$ref": "#/components/schemas/Locale" }
        }
      },
      "PasswordChangeRequestedEventType": {
        "type": "string",
        "enum": ["PASSWORD_CHANGE_REQUESTED"]
      },
      "PasswordChangeRequestedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/PasswordChangeRequestedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/PasswordChangeRequestedEventData"
              }
            }
          }
        ]
      },
      "ProjectDeletedEventType": {
        "type": "string",
        "enum": ["PROJECT_DELETED"]
      },
      "ProjectEventData": {
        "type": "object",
        "required": [
          "organisationId",
          "projectId",
          "projectCode",
          "topicsToAdd",
          "topicsToRemove"
        ],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "projectId": { "$ref": "#/components/schemas/ProjectUUID" },
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "topicsToAdd": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DataTopic" }
          },
          "topicsToRemove": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/DataTopic" }
          }
        }
      },
      "ProjectNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  { "$ref": "#/components/schemas/ProjectUpsertedEventType" },
                  { "$ref": "#/components/schemas/ProjectDeletedEventType" }
                ]
              },
              "eventData": { "$ref": "#/components/schemas/ProjectEventData" }
            }
          }
        ]
      },
      "ProjectUpsertedEventType": {
        "type": "string",
        "enum": ["PROJECT_UPSERTED"]
      },
      "ReportDeletedEventType": {
        "type": "string",
        "enum": ["REPORT_DELETED"]
      },
      "ReportEventData": {
        "type": "object",
        "required": ["organisationId", "factoryId", "reportId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "reportId": { "$ref": "#/components/schemas/ReportUUID" }
        }
      },
      "ReportNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  { "$ref": "#/components/schemas/ReportUpsertedEventType" },
                  { "$ref": "#/components/schemas/ReportDeletedEventType" }
                ]
              },
              "eventData": { "$ref": "#/components/schemas/ReportEventData" }
            }
          }
        ]
      },
      "ReportUpsertedEventType": {
        "type": "string",
        "enum": ["REPORT_UPSERTED"]
      },
      "SensorDeletedEventType": {
        "type": "string",
        "enum": ["SENSOR_DELETED"]
      },
      "SensorEventData": {
        "type": "object",
        "required": ["organisationId", "factoryId", "sensorId"],
        "additionalProperties": false,
        "properties": {
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "factoryId": { "$ref": "#/components/schemas/FactoryUUID" },
          "sensorId": { "$ref": "#/components/schemas/SensorUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" }
        }
      },
      "SensorNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "oneOf": [
                  { "$ref": "#/components/schemas/SensorUpsertedEventType" },
                  { "$ref": "#/components/schemas/SensorDeletedEventType" }
                ]
              },
              "eventData": { "$ref": "#/components/schemas/SensorEventData" }
            }
          }
        ]
      },
      "SensorSeriesDeletedEventData": {
        "type": "object",
        "required": ["sensorId", "valueName"],
        "additionalProperties": false,
        "properties": {
          "sensorId": { "$ref": "#/components/schemas/SensorUUID" },
          "valueName": { "$ref": "#/components/schemas/ValueName" }
        }
      },
      "SensorSeriesDeletedEventType": {
        "type": "string",
        "enum": ["SENSOR_SERIES_DELETED"]
      },
      "SensorSeriesDeletedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/SensorSeriesDeletedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/SensorSeriesDeletedEventData"
              }
            }
          }
        ]
      },
      "SensorUpsertedEventType": {
        "type": "string",
        "enum": ["SENSOR_UPSERTED"]
      },
      "UserCreatedEventData": {
        "type": "object",
        "required": ["user", "verifyToken"],
        "additionalProperties": false,
        "properties": {
          "user": { "$ref": "#/components/schemas/UserModel" },
          "verifyToken": { "$ref": "#/components/schemas/VerifyToken" }
        }
      },
      "UserCreatedEventType": { "type": "string", "enum": ["USER_CREATED"] },
      "UserCreatedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": { "$ref": "#/components/schemas/UserCreatedEventType" },
              "eventData": {
                "$ref": "#/components/schemas/UserCreatedEventData"
              }
            }
          }
        ]
      },
      "UserFeedbackUpdatedEventData": {
        "type": "object",
        "required": [
          "eventsIds",
          "organisationId",
          "userId",
          "userFeedBack",
          "beforeDate",
          "afterDate"
        ],
        "additionalProperties": false,
        "properties": {
          "alertId": { "$ref": "#/components/schemas/AlertUUID" },
          "eventsIds": { "$ref": "#/components/schemas/EventsUUIDS" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "userFeedBack": { "$ref": "#/components/schemas/userFeedback" },
          "beforeDate": { "$ref": "#/components/schemas/Date" },
          "afterDate": { "$ref": "#/components/schemas/Date" }
        }
      },
      "UserFeedbackUpdatedEventType": {
        "type": "string",
        "enum": ["USER_FEEDBACK_UPDATED"]
      },
      "UserFeedbackUpdatedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/UserFeedbackUpdatedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/UserFeedbackUpdatedEventData"
              }
            }
          }
        ]
      },
      "UserInvitedInOrganisationEventData": {
        "type": "object",
        "required": [
          "inviterId",
          "userId",
          "organisationId",
          "userName",
          "userEmail",
          "organisationName",
          "organisationRoles",
          "token"
        ],
        "additionalProperties": false,
        "properties": {
          "inviterId": { "$ref": "#/components/schemas/UserUUID" },
          "userId": { "$ref": "#/components/schemas/UserUUID" },
          "organisationId": { "$ref": "#/components/schemas/OrganisationUUID" },
          "userName": { "type": "string" },
          "userEmail": { "type": "string" },
          "organisationName": { "type": "string" },
          "organisationRoles": {
            "oneOf": [
              { "$ref": "#/components/schemas/UserFactoryRoles" },
              { "$ref": "#/components/schemas/UserOrganisationRoles" }
            ]
          },
          "token": { "type": "string" }
        }
      },
      "UserInvitedInOrganisationEventType": {
        "type": "string",
        "enum": ["USER_INVITED_IN_ORGANISATION"]
      },
      "UserInvitedInOrganisationNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/UserInvitedInOrganisationEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/UserInvitedInOrganisationEventData"
              }
            }
          }
        ]
      },
      "UserUpdatedEventData": {
        "type": "object",
        "required": ["user"],
        "additionalProperties": false,
        "properties": {
          "user": { "$ref": "#/components/schemas/UserModel" },
          "verifyToken": { "$ref": "#/components/schemas/VerifyToken" }
        }
      },
      "UserUpdatedEventType": { "type": "string", "enum": ["USER_UPDATED"] },
      "UserUpdatedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": { "$ref": "#/components/schemas/UserUpdatedEventType" },
              "eventData": {
                "$ref": "#/components/schemas/UserUpdatedEventData"
              }
            }
          }
        ]
      },
      "VirtualSensorComputeRequestedEventData": {
        "type": "object",
        "required": ["sensorId", "projectCode", "sensorValueName"],
        "additionalProperties": false,
        "properties": {
          "sensorId": { "$ref": "#/components/schemas/SensorUUID" },
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "sensorValueName": { "$ref": "#/components/schemas/ValueName" }
        }
      },
      "VirtualSensorComputeRequestedEventType": {
        "type": "string",
        "enum": ["VIRTUAL_SENSOR_COMPUTE_REQUESTED"]
      },
      "VirtualSensorComputeRequestedNotification": {
        "allOf": [
          { "$ref": "#/components/schemas/CommonNotification" },
          {
            "type": "object",
            "required": ["type", "eventData"],
            "properties": {
              "type": {
                "$ref": "#/components/schemas/VirtualSensorComputeRequestedEventType"
              },
              "eventData": {
                "$ref": "#/components/schemas/VirtualSensorComputeRequestedEventData"
              }
            }
          }
        ]
      },
      "AllPreferencesModel": {
        "type": "object",
        "required": ["default", "organisation", "user"],
        "properties": {
          "default": { "$ref": "#/components/schemas/DefaultPreferencesModel" },
          "organisation": {
            "$ref": "#/components/schemas/PartialPreferencesModel"
          },
          "factory": { "$ref": "#/components/schemas/PartialPreferencesModel" },
          "user": { "$ref": "#/components/schemas/PartialPreferencesModel" }
        }
      },
      "DefaultPreferencesModel": {
        "type": "object",
        "required": [
          "displayParentName",
          "sensorDisplayExternalId",
          "sensorDisplaySerie",
          "useFactoryTimeZone",
          "showGraphLabels",
          "showGraphConfigurations",
          "showGraphCycles",
          "showGraphPhases"
        ],
        "properties": {
          "displayParentName": { "type": "boolean" },
          "sensorDisplayExternalId": { "type": "boolean" },
          "sensorDisplaySerie": {
            "$ref": "#/components/schemas/SensorDisplaySerie"
          },
          "useFactoryTimeZone": { "type": "boolean" },
          "showGraphLabels": { "type": "boolean" },
          "showGraphConfigurations": { "type": "boolean" },
          "showGraphCycles": { "type": "boolean" },
          "showGraphPhases": { "type": "boolean" }
        }
      },
      "PartialPreferencesModel": {
        "type": "object",
        "properties": {
          "displayParentName": { "type": "boolean" },
          "sensorDisplayExternalId": { "type": "boolean" },
          "sensorDisplaySerie": {
            "$ref": "#/components/schemas/SensorDisplaySerie"
          },
          "useFactoryTimeZone": { "type": "boolean" },
          "showGraphLabels": { "type": "boolean" },
          "showGraphConfigurations": { "type": "boolean" },
          "showGraphCycles": { "type": "boolean" },
          "showGraphPhases": { "type": "boolean" }
        }
      },
      "SensorDisplaySerie": {
        "type": "string",
        "enum": ["always", "never", "ifExists"]
      },
      "Date": { "type": "string", "format": "date-time" },
      "emailStatus": {
        "type": "string",
        "enum": ["bouncing", "reachable", "dropped", "unknown"]
      },
      "FactoryScopedUserOrganisationMembership": {
        "type": "object",
        "required": ["roles", "factories"],
        "properties": {
          "roles": { "$ref": "#/components/schemas/UserOrganisationRoles" },
          "factories": {
            "type": "array",
            "maxItems": 5,
            "items": {
              "type": "object",
              "required": ["id", "roles"],
              "properties": {
                "id": { "$ref": "#/components/schemas/FactoryUUID" },
                "roles": { "$ref": "#/components/schemas/UserFactoryRoles" },
                "status": {
                  "$ref": "#/components/schemas/UserMembershipStatus"
                },
                "lastInvitationDate": { "$ref": "#/components/schemas/Date" }
              }
            }
          }
        }
      },
      "GlobalUserOrganisationMembership": {
        "type": "object",
        "required": ["roles"],
        "properties": {
          "roles": { "$ref": "#/components/schemas/UserFactoryRoles" }
        }
      },
      "Locale": {
        "type": "string",
        "pattern": "^[a-z]{2}-[A-Z]{2,3}$",
        "maxLength": 5
      },
      "Limit": {
        "type": "number",
        "multipleOf": 10,
        "minimum": 10,
        "enum": [10, 50, 100, 500, 1000]
      },
      "Start": { "type": "number", "minimum": 0, "multipleOf": 10 },
      "Role": {
        "type": "string",
        "enum": ["admin", "user", "candidate", "third"]
      },
      "usersSortByValue": {
        "type": "string",
        "enum": ["creation", "lastModification", "name"]
      },
      "TimeZone": {
        "type": "string",
        "pattern": "^[a-zA-Z]+(/[a-zA-Z_]+){0,2}$",
        "maxLength": 50
      },
      "Total": { "type": "number", "multipleOf": 1, "minimum": 0 },
      "UserData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["email", "name", "locale", "timeZone"],
        "properties": {
          "email": { "type": "string", "format": "email" },
          "name": { "type": "string" },
          "givenName": { "type": "string" },
          "familyName": { "type": "string" },
          "phone": { "type": "string", "pattern": "^\\+[0-9]+$" },
          "birthDay": {
            "type": "string",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}$"
          },
          "locale": { "$ref": "#/components/schemas/Locale" },
          "timeZone": { "$ref": "#/components/schemas/TimeZone" }
        }
      },
      "UserFactoryRoles": {
        "type": "array",
        "minItems": 1,
        "items": { "type": "string", "enum": ["manager", "technician"] }
      },
      "UserItem": {
        "type": "object",
        "required": ["item", "users"],
        "properties": {
          "item": { "$ref": "#/components/schemas/UserUUID" },
          "users": { "$ref": "#/components/schemas/UserModelHash" }
        }
      },
      "UserMembership": {
        "allOf": [
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FactoryScopedUserOrganisationMembership"
              },
              {
                "$ref": "#/components/schemas/GlobalUserOrganisationMembership"
              }
            ]
          },
          {
            "type": "object",
            "required": ["id", "status", "lastInvitationDate"],
            "properties": {
              "id": { "$ref": "#/components/schemas/OrganisationUUID" },
              "status": { "$ref": "#/components/schemas/UserMembershipStatus" },
              "lastInvitationDate": { "$ref": "#/components/schemas/Date" },
              "canReinvite": { "type": "boolean" }
            }
          }
        ]
      },
      "UserMembershipStatus": {
        "type": "string",
        "enum": ["member", "pending", "declined", "cancelled"]
      },
      "UserOrganisationRoles": {
        "type": "array",
        "minItems": 1,
        "items": { "type": "string", "enum": ["member"] }
      },
      "UserModel": {
        "type": "object",
        "additionalProperties": false,
        "required": ["data"],
        "properties": {
          "id": { "$ref": "#/components/schemas/UserUUID" },
          "roles": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Role" }
          },
          "password": { "type": "string" },
          "memberships": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/UserMembership" }
          },
          "data": { "$ref": "#/components/schemas/UserData" },
          "creation": { "$ref": "#/components/schemas/Date" },
          "lastModification": { "$ref": "#/components/schemas/Date" },
          "emailStatus": { "$ref": "#/components/schemas/emailStatus" }
        }
      },
      "UserUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "UserModelHash": {
        "type": "object",
        "patternProperties": {
          "undefined": { "$ref": "#/components/schemas/UserModel" }
        }
      },
      "UsersItems": {
        "type": "object",
        "required": ["items", "users"],
        "properties": {
          "total": { "$ref": "#/components/schemas/Total" },
          "items": { "$ref": "#/components/schemas/UsersUUIDS" },
          "users": { "$ref": "#/components/schemas/UserModelHash" }
        }
      },
      "UsersUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/UserUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "UUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "UUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/UUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "AlgorithmRun": {
        "type": "object",
        "additionalProperties": false,
        "required": ["projectCode", "command"],
        "properties": {
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "command": { "type": "string" },
          "algorithm": { "type": "string" }
        }
      },
      "IngestionStage": { "type": "string", "enum": ["raw", "enriched"] },
      "DspadDataAnalysisParameters": {
        "type": "object",
        "required": ["projectCode", "mlConfigId", "startDate", "endDate"],
        "properties": {
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "mlConfigId": { "type": "string" },
          "startDate": { "$ref": "#/components/schemas/Date" },
          "endDate": { "$ref": "#/components/schemas/Date" }
        }
      },
      "DspadDataCheckParameters": {
        "type": "object",
        "required": ["projectCode", "mlConfigId"],
        "properties": {
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "mlConfigId": { "type": "string" }
        }
      },
      "DspadStableRegistersDataAnalysisParameters": {
        "type": "object",
        "required": [
          "projectCode",
          "mlConfigId",
          "direction",
          "startDate",
          "endDate"
        ],
        "properties": {
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "mlConfigId": { "type": "string" },
          "direction": { "$ref": "#/components/schemas/RegisterDirection" },
          "startDate": { "$ref": "#/components/schemas/Date" },
          "endDate": { "$ref": "#/components/schemas/Date" }
        }
      },
      "DspadStableRegistersDataCheckParameters": {
        "type": "object",
        "required": [
          "projectCode",
          "mlConfigId",
          "direction",
          "startDate",
          "endDate"
        ],
        "properties": {
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "mlConfigId": { "type": "string" },
          "direction": { "$ref": "#/components/schemas/RegisterDirection" },
          "startDate": { "$ref": "#/components/schemas/Date" },
          "endDate": { "$ref": "#/components/schemas/Date" }
        }
      },
      "RegisterDirection": { "type": "string", "enum": ["ascent", "descent"] },
      "DspadDetectionParameters": {
        "type": "object",
        "required": [
          "name",
          "projectCode",
          "sensorsIds",
          "valuesNames",
          "mlSettings"
        ],
        "properties": {
          "name": { "type": "string" },
          "description": { "type": "string" },
          "projectCode": { "$ref": "#/components/schemas/ProjectCode" },
          "modelPath": { "type": "string" },
          "sensorsIds": { "$ref": "#/components/schemas/NonEmptySensorsUUIDS" },
          "valuesNames": { "$ref": "#/components/schemas/NonEmptyValuesNames" },
          "mlSettings": {
            "type": "object",
            "required": ["anomaly_type", "context"],
            "properties": {
              "anomaly_type": { "type": "string" },
              "context": {
                "type": "object",
                "required": ["message"],
                "properties": { "message": { "type": "string" } }
              }
            }
          }
        }
      },
      "Timestamp": { "type": "number" },
      "PasswordChangeBody": {
        "type": "object",
        "description": "Password change grant type.",
        "required": ["grant_type", "token", "new_password"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["password_change"] },
          "token": { "type": "string" },
          "new_password": { "type": "string" }
        }
      },
      "AuthorizationCodeRequestBody": {
        "type": "object",
        "description": "Authorization code grant, see https://tools.ietf.org/html/rfc6749#section-4.1",
        "required": ["grant_type"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["authorization_code"] },
          "code": { "type": "string" },
          "client_id": { "type": "string" },
          "redirect_uri": {
            "type": "string",
            "pattern": "^https?://",
            "format": "uri"
          }
        }
      },
      "ClientCredentialsRequestBody": {
        "type": "object",
        "description": "Client credentials grant, see https://tools.ietf.org/html/rfc6749#section-4.4",
        "required": ["grant_type"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["client_credentials"] },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "PasswordRequestBody": {
        "type": "object",
        "description": "Resource owner password credentials grant, see https://tools.ietf.org/html/rfc6749#section-4.3",
        "required": ["grant_type", "username", "password"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["password"] },
          "username": { "type": "string" },
          "password": { "type": "string" },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "RefreshTokenRequestBody": {
        "type": "object",
        "description": "Token refresh grant type, see https://tools.ietf.org/html/rfc6749#section-6 .",
        "required": ["grant_type", "refresh_token"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["refresh_token"] },
          "refresh_token": { "type": "string" },
          "scope": {
            "type": "string",
            "description": "See https://tools.ietf.org/html/rfc6749#section-3.3"
          }
        }
      },
      "TokenRequestBody": {
        "oneOf": [
          { "$ref": "#/components/schemas/PasswordRequestBody" },
          { "$ref": "#/components/schemas/AuthorizationCodeRequestBody" },
          { "$ref": "#/components/schemas/ClientCredentialsRequestBody" },
          { "$ref": "#/components/schemas/RefreshTokenRequestBody" },
          { "$ref": "#/components/schemas/VerifyTokenRequestBody" },
          { "$ref": "#/components/schemas/PasswordChangeBody" }
        ]
      },
      "VerifyTokenRequestBody": {
        "type": "object",
        "description": "Custom token verify grant type.",
        "required": ["grant_type", "verify_token"],
        "properties": {
          "grant_type": { "type": "string", "enum": ["verify_token"] },
          "verify_token": { "$ref": "#/components/schemas/VerifyToken" }
        }
      },
      "VerifyToken": { "type": "string" },
      "DenormalizedInputData": {
        "type": "array",
        "items": {
          "type": "object",
          "additionalProperties": false,
          "required": ["date", "sensorId", "value"],
          "properties": {
            "date": {
              "type": "string",
              "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{1,3}|)Z$"
            },
            "sensorId": { "type": "string" },
            "valueName": { "$ref": "#/components/schemas/ValueName" },
            "value": { "type": "number" },
            "precision": { "$ref": "#/components/schemas/ValuePrecision" },
            "labels": { "$ref": "#/components/schemas/Tags" }
          }
        }
      },
      "GroupedInputData": {
        "type": "object",
        "additionalProperties": false,
        "required": ["date", "values"],
        "properties": {
          "date": {
            "type": "string",
            "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\\.[0-9]{1,3}|)Z$"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": ["sensorId", "value"],
              "properties": {
                "sensorId": { "type": "string" },
                "valueName": { "$ref": "#/components/schemas/ValueName" },
                "value": { "type": "number" },
                "precision": { "$ref": "#/components/schemas/ValuePrecision" },
                "labels": { "$ref": "#/components/schemas/Tags" }
              }
            }
          }
        }
      },
      "InputData": {
        "anyOf": [
          { "$ref": "#/components/schemas/GroupedInputData" },
          { "$ref": "#/components/schemas/DenormalizedInputData" }
        ]
      },
      "LabelValue": { "type": "string", "pattern": "^[^:]+$" },
      "Tags": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/LabelValue" }
      },
      "ValuePrecision": {
        "type": "number",
        "minimum": 0,
        "maximum": 100,
        "multipleOf": 1
      },
      "SendGridEventType": {
        "type": "string",
        "enum": [
          "processed",
          "dropped",
          "delivered",
          "deferred",
          "bounce",
          "blocked",
          "open",
          "click",
          "spamreport",
          "unsubscribe",
          "group_unsubscribe",
          "group_resubscribe"
        ]
      },
      "UserOrganisationInvitation": {
        "type": "object",
        "additionalProperties": false,
        "required": ["email", "givenName", "familyName", "membership"],
        "properties": {
          "email": { "type": "string", "format": "email" },
          "givenName": { "type": "string" },
          "familyName": { "type": "string" },
          "membership": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/FactoryScopedUserOrganisationMembership"
              },
              {
                "$ref": "#/components/schemas/GlobalUserOrganisationMembership"
              }
            ]
          }
        }
      },
      "BinaryModel": { "type": "string", "format": "binary" },
      "AnomalyType": {
        "type": "string",
        "enum": [
          "abnormal_machine_behavior",
          "abnormal_sensor_behavior",
          "missing_data"
        ]
      },
      "MLContext": { "type": "object", "additionalProperties": true },
      "MLLearnResult": {
        "type": "object",
        "additionalProperties": false,
        "required": ["type", "learn", "n_sample"],
        "properties": {
          "type": { "type": "string", "enum": ["learn"] },
          "learn": { "type": "boolean" },
          "n_sample": { "type": "number" }
        }
      },
      "MLPredictionResult": {
        "type": "object",
        "additionalProperties": false,
        "required": ["type", "timestamp", "lower", "mean", "upper"],
        "properties": {
          "type": { "type": "string", "enum": ["forecast_predict"] },
          "timestamp": { "$ref": "#/components/schemas/Date" },
          "lower": { "type": "number" },
          "mean": { "type": "number" },
          "upper": { "type": "number" }
        }
      },
      "MlResultAttachments": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["name"],
          "properties": { "name": { "type": "string" } }
        }
      },
      "MlResultImages": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["name"],
          "properties": { "name": { "type": "string" } }
        }
      },
      "MLResult": {
        "type": "object",
        "additionalProperties": true,
        "required": ["type", "context"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["succeeded", "errored", "discarded"]
          },
          "images": { "$ref": "#/components/schemas/MlResultImages" },
          "attachments": { "$ref": "#/components/schemas/MlResultAttachments" },
          "debug": {
            "type": "object",
            "required": ["code", "stack"],
            "properties": {
              "code": { "type": "string" },
              "stack": { "type": "string" }
            }
          },
          "data": { "$ref": "#/components/schemas/SensorsValues" },
          "anomalies": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "required": ["type"],
              "properties": {
                "type": { "$ref": "#/components/schemas/AnomalyType" },
                "startDate": { "$ref": "#/components/schemas/Date" },
                "endDate": { "$ref": "#/components/schemas/Date" }
              }
            }
          },
          "results": {
            "type": "array",
            "items": {
              "anyOf": [
                { "$ref": "#/components/schemas/MLPredictionResult" },
                { "$ref": "#/components/schemas/MLLearnResult" }
              ]
            }
          },
          "context": {
            "allOf": [
              { "$ref": "#/components/schemas/DataLabels" },
              {
                "type": "object",
                "required": ["runDate", "runId", "eventType"],
                "properties": {
                  "runDate": { "$ref": "#/components/schemas/Date" },
                  "runId": { "$ref": "#/components/schemas/RunUUID" },
                  "eventType": { "$ref": "#/components/schemas/EventType" },
                  "runName": { "type": "string" },
                  "startDate": { "$ref": "#/components/schemas/Date" },
                  "endDate": { "$ref": "#/components/schemas/Date" }
                }
              }
            ]
          },
          "mlContext": { "$ref": "#/components/schemas/MLContext" }
        }
      },
      "SensorsValues": {
        "type": "array",
        "items": {
          "type": "object",
          "required": ["sensorId"],
          "properties": {
            "sensorId": { "type": "string" },
            "valueName": { "type": "string" },
            "values": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  { "type": "string" },
                  { "type": "number" },
                  { "type": "number" },
                  { "type": "array", "items": { "type": "string" } }
                ],
                "additionalItems": false,
                "minItems": 4,
                "maxItems": 4
              }
            }
          }
        }
      },
      "AlertDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/AlertDeletedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/AlertEventData" }
        }
      },
      "AlertUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/AlertUpsertedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/AlertEventData" }
        }
      },
      "AlgorithmModelUpdatedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/AlgorithmModelUpdatedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/AlgorithmModelEventData" }
        }
      },
      "ApplicationDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/ApplicationDeletedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/ApplicationEventData" }
        }
      },
      "ApplicationUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/ApplicationUpsertedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/ApplicationEventData" }
        }
      },
      "AssetDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/AssetDeletedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/AssetEventData" }
        }
      },
      "AssetUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/AssetUpsertedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/AssetEventData" }
        }
      },
      "EmailStatusUpdatedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/EmailStatusUpdatedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/EmailStatusUpdatedEventData" }
        }
      },
      "FactoryDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/FactoryDeletedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/FactoryEventData" }
        }
      },
      "FactoryUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/FactoryUpsertedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/FactoryEventData" }
        }
      },
      "InterventionDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/InterventionDeletedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/InterventionEventData" }
        }
      },
      "InterventionUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/InterventionUpsertedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/InterventionEventData" }
        }
      },
      "MembershipCancelledEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/MembershipCancelledEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/MembershipCancelledEventData"
          }
        }
      },
      "NotificationEvent": {
        "oneOf": [
          { "$ref": "#/components/schemas/AlertDeletedEvent" },
          { "$ref": "#/components/schemas/AlertUpsertedEvent" },
          { "$ref": "#/components/schemas/AlgorithmModelUpdatedEvent" },
          { "$ref": "#/components/schemas/ApplicationDeletedEvent" },
          { "$ref": "#/components/schemas/ApplicationUpsertedEvent" },
          { "$ref": "#/components/schemas/AssetDeletedEvent" },
          { "$ref": "#/components/schemas/AssetUpsertedEvent" },
          { "$ref": "#/components/schemas/EmailStatusUpdatedEvent" },
          { "$ref": "#/components/schemas/FactoryDeletedEvent" },
          { "$ref": "#/components/schemas/FactoryUpsertedEvent" },
          { "$ref": "#/components/schemas/InterventionDeletedEvent" },
          { "$ref": "#/components/schemas/InterventionUpsertedEvent" },
          { "$ref": "#/components/schemas/MembershipCancelledEvent" },
          { "$ref": "#/components/schemas/OrganisationDeletedEvent" },
          {
            "$ref": "#/components/schemas/OrganisationPreferencesUpsertedEvent"
          },
          { "$ref": "#/components/schemas/OrganisationUpsertedEvent" },
          { "$ref": "#/components/schemas/OrganisationUserUpdatedEvent" },
          { "$ref": "#/components/schemas/PasswordChangeRequestedEvent" },
          { "$ref": "#/components/schemas/ProjectDeletedEvent" },
          { "$ref": "#/components/schemas/ProjectUpsertedEvent" },
          { "$ref": "#/components/schemas/ReportDeletedEvent" },
          { "$ref": "#/components/schemas/ReportUpsertedEvent" },
          { "$ref": "#/components/schemas/SensorDeletedEvent" },
          { "$ref": "#/components/schemas/SensorSeriesDeletedEvent" },
          { "$ref": "#/components/schemas/SensorUpsertedEvent" },
          { "$ref": "#/components/schemas/UserCreatedEvent" },
          { "$ref": "#/components/schemas/UserFeedbackUpdatedEvent" },
          { "$ref": "#/components/schemas/UserInvitedInOrganisationEvent" },
          { "$ref": "#/components/schemas/UserUpdatedEvent" },
          { "$ref": "#/components/schemas/VirtualSensorComputeRequestedEvent" }
        ]
      },
      "NotificationUUID": {
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "maxLength": 36
      },
      "NotificationsUUIDS": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/NotificationUUID" },
        "minItems": 0,
        "uniqueItems": false
      },
      "OrganisationDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/OrganisationDeletedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/OrganisationEventData" }
        }
      },
      "OrganisationPreferencesUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/OrganisationPreferencesUpsertedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/OrganisationPreferencesUpsertedEventData"
          }
        }
      },
      "OrganisationUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/OrganisationUpsertedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/OrganisationEventData" }
        }
      },
      "OrganisationUserUpdatedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/OrganisationUserUpdatedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/OrganisationUserUpdatedEventData"
          }
        }
      },
      "PasswordChangeRequestedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/PasswordChangeRequestedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/PasswordChangeRequestedEventData"
          }
        }
      },
      "ProjectDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/ProjectDeletedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/ProjectEventData" }
        }
      },
      "ProjectUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/ProjectUpsertedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/ProjectEventData" }
        }
      },
      "ReportDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/ReportDeletedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/ReportEventData" }
        }
      },
      "ReportUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/ReportUpsertedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/ReportEventData" }
        }
      },
      "SensorDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/SensorDeletedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/SensorEventData" }
        }
      },
      "SensorSeriesDeletedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/SensorSeriesDeletedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/SensorSeriesDeletedEventData"
          }
        }
      },
      "SensorUpsertedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/SensorUpsertedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/SensorEventData" }
        }
      },
      "UserCreatedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/UserCreatedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/UserCreatedEventData" }
        }
      },
      "UserFeedbackUpdatedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/UserFeedbackUpdatedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/UserFeedbackUpdatedEventData"
          }
        }
      },
      "UserInvitedInOrganisationEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/UserInvitedInOrganisationEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/UserInvitedInOrganisationEventData"
          }
        }
      },
      "UserUpdatedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": { "$ref": "#/components/schemas/UserUpdatedEventType" },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": { "$ref": "#/components/schemas/UserUpdatedEventData" }
        }
      },
      "VirtualSensorComputeRequestedEvent": {
        "type": "object",
        "required": ["id", "type", "timestamp", "data"],
        "additionalProperties": false,
        "properties": {
          "id": { "$ref": "#/components/schemas/NotificationUUID" },
          "type": {
            "$ref": "#/components/schemas/VirtualSensorComputeRequestedEventType"
          },
          "timestamp": { "$ref": "#/components/schemas/Timestamp" },
          "data": {
            "$ref": "#/components/schemas/VirtualSensorComputeRequestedEventData"
          }
        }
      },
      "PreferenceLevel": {
        "type": "string",
        "enum": ["organisation", "factory", "user"]
      }
    },
    "parameters": {
      "alertId": {
        "in": "path",
        "name": "alertId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/AlertUUID" }
      },
      "direction": {
        "in": "query",
        "name": "direction",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/components/schemas/SortDirection" }
        }
      },
      "fromFilter": {
        "name": "from",
        "in": "query",
        "description": "The date from which to start filtering data (included)",
        "required": false,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "toFilter": {
        "name": "to",
        "in": "query",
        "description": "The date until which to stop filtering data (excluded)",
        "required": false,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "OptionalWithAlertsIds": {
        "name": "withAlertsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AlertsUUIDS" }
      },
      "withAlertsStatuses": {
        "in": "query",
        "name": "withStatuses",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AlertStatuses" }
      },
      "alertsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 6,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/alertsSortByValue" }
        }
      },
      "withAlertId": {
        "in": "query",
        "name": "withAlertId",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AlertUUID" }
      },
      "WithAttachments": {
        "in": "query",
        "name": "withAttachments",
        "required": true,
        "schema": { "type": "boolean" }
      },
      "WithImages": {
        "in": "query",
        "name": "withImages",
        "required": true,
        "schema": { "type": "boolean" }
      },
      "withOrphanAlertsOnly": {
        "in": "query",
        "name": "withOrphanAlertsOnly",
        "description": "Filter to only alerts not attached to interventions",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "applicationId": {
        "in": "path",
        "name": "applicationId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/ApplicationUUID" }
      },
      "OptionalWithApplicationsIds": {
        "name": "withApplicationsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/ApplicationsUUIDS" }
      },
      "applicationsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/applicationsSortByValue" }
        }
      },
      "assetId": {
        "in": "path",
        "name": "assetId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/AssetUUID" }
      },
      "IncludeChildrenIds": {
        "name": "includeChildrenIds",
        "in": "query",
        "required": true,
        "schema": { "type": "boolean" }
      },
      "OptionalWithAssetsIds": {
        "name": "withAssetsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AssetsUUIDS" }
      },
      "OptionalWithAssetsTypes": {
        "name": "withAssetsTypes",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/AssetType" }
        }
      },
      "OptionalWithParentsAssetsIds": {
        "name": "withParentsAssetsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AssetsUUIDS" }
      },
      "OptionalWithRootAssetsFirst": {
        "name": "withRootAssetsFirst",
        "in": "query",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "assetsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/assetsSortByValue" }
        }
      },
      "afterDate": {
        "name": "afterDate",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "beforeDate": {
        "name": "beforeDate",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "before": {
        "in": "query",
        "required": false,
        "name": "before",
        "description": "An opaque value to get next results",
        "schema": { "$ref": "#/components/schemas/Cursor" }
      },
      "eventId": {
        "name": "eventId",
        "in": "path",
        "required": true,
        "schema": { "$ref": "#/components/schemas/EventUUID" }
      },
      "OptionalsensorsIds": {
        "name": "sensorsIds",
        "in": "query",
        "description": "The sensors ids to collect data from",
        "required": false,
        "schema": { "$ref": "#/components/schemas/NonEmptySensorsUUIDS" }
      },
      "OptionalvaluesNames": {
        "name": "valuesNames",
        "in": "query",
        "description": "The value names to read from the sensors",
        "required": false,
        "schema": { "$ref": "#/components/schemas/NonEmptyValuesNames" }
      },
      "OptionalWithEventsIds": {
        "name": "withEventsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/EventsUUIDS" }
      },
      "OptionalWithEventType": {
        "name": "withEventsTypes",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/EventTypes" }
      },
      "OptionalWithFactoriesIds": {
        "name": "withFactoriesIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/FactoriesUUIDS" }
      },
      "OptionalWithOrganisationsIds": {
        "name": "withOrganisationsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/OrganisationsUUIDS" }
      },
      "OptionalWithUsersFeedback": {
        "name": "withUsersFeedback",
        "in": "query",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "since": {
        "in": "query",
        "required": false,
        "name": "since",
        "description": "An opaque value to get new results",
        "schema": { "$ref": "#/components/schemas/Cursor" }
      },
      "size": {
        "in": "query",
        "required": false,
        "name": "size",
        "description": "The size of the dataset to return",
        "schema": { "$ref": "#/components/schemas/Size" }
      },
      "factoryId": {
        "in": "path",
        "name": "factoryId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/FactoryUUID" }
      },
      "factoriesSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/factoriesSortByValue" }
        }
      },
      "interventionId": {
        "in": "path",
        "name": "interventionId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/InterventionUUID" }
      },
      "OptionalWithInterventionsIds": {
        "name": "withInterventionsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/InterventionsUUIDS" }
      },
      "interventionsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/interventionsSortByValue" }
        }
      },
      "withInterventionId": {
        "in": "query",
        "name": "withInterventionId",
        "required": false,
        "schema": { "$ref": "#/components/schemas/InterventionUUID" }
      },
      "mockName": {
        "in": "path",
        "name": "mockName",
        "required": true,
        "schema": { "$ref": "#/components/schemas/MockName" }
      },
      "organisationId": {
        "in": "path",
        "name": "organisationId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/OrganisationUUID" }
      },
      "organisationsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 2,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/organisationsSortByValue" }
        }
      },
      "projectId": {
        "in": "path",
        "name": "projectId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/ProjectUUID" }
      },
      "OptionalWithProjectsIds": {
        "name": "withProjectsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/ProjectsUUIDS" }
      },
      "projectCode": {
        "in": "path",
        "name": "projectCode",
        "required": true,
        "schema": { "$ref": "#/components/schemas/ProjectCode" }
      },
      "projectsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/projectsSortByValue" }
        }
      },
      "OptionalWithReportsIds": {
        "name": "withReportsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/ReportsUUIDS" }
      },
      "reportId": {
        "in": "path",
        "name": "reportId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/ReportUUID" }
      },
      "reportsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/reportsSortByValue" }
        }
      },
      "withReportId": {
        "in": "query",
        "name": "withReportId",
        "required": false,
        "schema": { "$ref": "#/components/schemas/ReportUUID" }
      },
      "withAlertTriggerTypes": {
        "in": "query",
        "name": "withAlertTriggerTypes",
        "description": "Filter to only sensors with the given alert trigger types set",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AlertTriggerTypes" }
      },
      "OptionalWithSensorsIds": {
        "name": "withSensorsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/SensorsUUIDS" }
      },
      "sensorId": {
        "in": "path",
        "name": "sensorId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/SensorUUID" }
      },
      "sensorsSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/sensorsSortByValue" }
        }
      },
      "valueName": {
        "in": "path",
        "name": "valueName",
        "required": true,
        "schema": { "$ref": "#/components/schemas/ValueName" }
      },
      "withFactorySensorsOnly": {
        "in": "query",
        "name": "withFactorySensorsOnly",
        "description": "Filter to only sensors directly attached to the factory",
        "required": true,
        "schema": { "type": "boolean" }
      },
      "aggregations": {
        "name": "aggregations",
        "in": "query",
        "description": "The aggregations to apply",
        "required": true,
        "schema": { "$ref": "#/components/schemas/aggregations" }
      },
      "from": {
        "name": "from",
        "in": "query",
        "description": "The date from which to start collecting data (included)",
        "required": true,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "granularity": {
        "name": "granularity",
        "in": "query",
        "description": "The granularity of the aggregated data",
        "required": true,
        "schema": { "$ref": "#/components/schemas/granularity" }
      },
      "WithTimeZone": {
        "name": "withTimeZone",
        "in": "query",
        "description": "The timezone to apply for time buckets",
        "required": false,
        "schema": { "$ref": "#/components/schemas/TimeZone" }
      },
      "to": {
        "name": "to",
        "in": "query",
        "description": "The date until which to stop collecting data (excluded)",
        "required": true,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "sensorEventTypesQueryParameter": {
        "name": "eventTypes",
        "in": "query",
        "description": "The type of event to get aggregated data",
        "required": true,
        "schema": { "$ref": "#/components/schemas/EventTypes" }
      },
      "includeLabels": {
        "name": "includeLabels",
        "in": "query",
        "schema": { "type": "boolean" },
        "description": "Whether to include the labels in the response or not."
      },
      "OptionalWithAssetConfigurations": {
        "name": "withAssetConfigurations",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AssetConfigurations" }
      },
      "OptionalWithDataLabels": {
        "name": "withDataLabels",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/Tags" }
      },
      "OptionalWithManufacturingCycles": {
        "name": "withManufacturingCycles",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/ManufacturingCycles" }
      },
      "OptionalWithManufacturingPhases": {
        "name": "withManufacturingPhases",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/ManufacturingPhases" }
      },
      "OptionalWithValuedLabelsNames": {
        "name": "withValuedLabelsNames",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/ValuedLabelName" }
        }
      },
      "OptionalWithValuedLabelsValues": {
        "name": "withValuedLabelsValues",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/LabelValue" }
        }
      },
      "eventField": {
        "in": "path",
        "name": "eventField",
        "required": true,
        "schema": { "$ref": "#/components/schemas/EventField" }
      },
      "eventFieldsQueryParameter": {
        "name": "eventFields",
        "in": "query",
        "description": "The event fields to read event data from the sensors",
        "required": true,
        "schema": { "$ref": "#/components/schemas/EventFields" }
      },
      "sensorsIds": {
        "name": "sensorsIds",
        "in": "query",
        "description": "The sensors ids to collect data from",
        "required": true,
        "schema": { "$ref": "#/components/schemas/NonEmptySensorsUUIDS" }
      },
      "valuesNames": {
        "name": "valuesNames",
        "in": "query",
        "description": "The value names to read from the sensors",
        "required": true,
        "schema": { "$ref": "#/components/schemas/NonEmptyValuesNames" }
      },
      "OptionalWithAncestorsIds": {
        "name": "withAncestorsIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/AssetsUUIDS" }
      },
      "tasksSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 2,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/tasksSortByValue" }
        }
      },
      "withPriorities": {
        "in": "query",
        "name": "withPriorities",
        "required": true,
        "schema": { "$ref": "#/components/schemas/Priorities" }
      },
      "withTasksStatuses": {
        "in": "query",
        "name": "withStatuses",
        "required": true,
        "schema": { "$ref": "#/components/schemas/TasksStatuses" }
      },
      "withTasksTypes": {
        "in": "query",
        "name": "withTypes",
        "required": true,
        "schema": { "$ref": "#/components/schemas/TasksTypes" }
      },
      "SearchSentence": {
        "name": "searchSentence",
        "description": "The search query (min 3 chars).",
        "in": "query",
        "required": true,
        "schema": { "type": "string", "minLength": 3 }
      },
      "SearchType": {
        "name": "searchType",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/SearchType" }
      },
      "WithFilterIds": {
        "name": "withFilterIds",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/UUID" }
        }
      },
      "WithFilterTypes": {
        "name": "withFilterTypes",
        "in": "query",
        "required": false,
        "schema": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/SearchFilterType" }
        }
      },
      "IncludeOrganisationLevelItemsQueryParameter": {
        "in": "query",
        "name": "includeOrganisationLevelItems",
        "required": false,
        "schema": { "type": "boolean" }
      },
      "OptionalWithNotificationTypesQueryParameter": {
        "in": "query",
        "name": "withNotificationTypes",
        "required": false,
        "schema": { "$ref": "#/components/schemas/NotificationTypes" }
      },
      "withMembershipsStatuses": {
        "in": "query",
        "name": "withMembershipsStatuses",
        "schema": {
          "type": "array",
          "items": { "$ref": "#/components/schemas/UserMembershipStatus" }
        }
      },
      "OptionalWithUsersIds": {
        "name": "withUsersIds",
        "in": "query",
        "required": false,
        "schema": { "$ref": "#/components/schemas/UsersUUIDS" }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "The number of items to retrieve",
        "required": true,
        "schema": { "$ref": "#/components/schemas/Limit" }
      },
      "start": {
        "name": "start",
        "in": "query",
        "description": "The index in results",
        "required": true,
        "schema": { "$ref": "#/components/schemas/Start" }
      },
      "usersSortBy": {
        "in": "query",
        "name": "sortBy",
        "required": true,
        "schema": {
          "type": "array",
          "minItems": 1,
          "maxItems": 3,
          "uniqueItems": true,
          "items": { "$ref": "#/components/schemas/usersSortByValue" }
        }
      },
      "userId": {
        "in": "path",
        "name": "userId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/UserUUID" }
      },
      "date": {
        "name": "date",
        "in": "query",
        "required": true,
        "schema": { "$ref": "#/components/schemas/Date" }
      },
      "ingestionStage": {
        "in": "path",
        "name": "ingestionStage",
        "required": true,
        "schema": { "$ref": "#/components/schemas/IngestionStage" }
      },
      "cookie": {
        "name": "cookie",
        "in": "header",
        "required": false,
        "schema": { "type": "string" }
      },
      "notificationId": {
        "in": "path",
        "name": "notificationId",
        "required": true,
        "schema": { "$ref": "#/components/schemas/NotificationUUID" }
      },
      "AttachmentFileType": {
        "name": "x-file-type",
        "in": "header",
        "required": true,
        "schema": { "type": "string", "enum": ["application/pdf", "text/html"] }
      },
      "attachmentId": {
        "name": "attachmentId",
        "in": "path",
        "required": true,
        "schema": { "$ref": "#/components/schemas/AttachmentUUID" }
      },
      "FileName": {
        "name": "x-file-name",
        "in": "header",
        "required": true,
        "schema": { "type": "string" }
      },
      "FileSize": {
        "name": "x-file-size",
        "in": "header",
        "required": true,
        "schema": { "type": "number" }
      },
      "ImageFileType": {
        "name": "x-file-type",
        "in": "header",
        "required": true,
        "schema": { "type": "string", "enum": ["image/jpeg", "image/png"] }
      },
      "imageId": {
        "name": "imageId",
        "in": "path",
        "required": true,
        "schema": { "$ref": "#/components/schemas/ImageUUID" }
      },
      "runId": {
        "name": "runId",
        "in": "path",
        "required": true,
        "schema": { "$ref": "#/components/schemas/UUID" }
      },
      "PreferenceLevel": {
        "name": "level",
        "in": "path",
        "required": true,
        "schema": { "$ref": "#/components/schemas/PreferenceLevel" }
      },
      "clientId": {
        "in": "query",
        "name": "client_id",
        "required": true,
        "schema": { "type": "string" }
      },
      "redirectURI": {
        "in": "query",
        "name": "redirect_uri",
        "required": false,
        "schema": { "type": "string", "pattern": "^https?://", "format": "uri" }
      },
      "responseType": {
        "in": "query",
        "name": "response_type",
        "required": true,
        "schema": { "type": "string", "enum": ["code", "token"] }
      },
      "scope": {
        "in": "query",
        "name": "scope",
        "description": "See https://tools.ietf.org/html/rfc6749#section-3.3",
        "required": false,
        "schema": { "type": "string" }
      },
      "state": {
        "in": "query",
        "name": "state",
        "required": true,
        "schema": { "type": "string" }
      },
      "xSdkVersion": {
        "name": "X-SDK-Version",
        "in": "header",
        "required": false,
        "example": "1.1.2-beta.1",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        }
      },
      "xApplicationVersion": {
        "name": "X-Application-Version",
        "in": "header",
        "required": false,
        "example": "1.1.2-beta.1",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        }
      },
      "xApiVersion": {
        "name": "X-API-Version",
        "in": "header",
        "required": false,
        "example": "1.1.2-beta.1",
        "schema": {
          "type": "string",
          "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
        }
      }
    },
    "headers": {},
    "requestBodies": {
      "Aveva": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["projectCode"],
              "properties": {
                "projectCode": { "$ref": "#/components/schemas/ProjectCode" }
              }
            }
          }
        }
      },
      "PowerTrackSyncConfig": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["projectCode"],
              "properties": {
                "projectCode": { "$ref": "#/components/schemas/ProjectCode" }
              }
            }
          }
        }
      },
      "OpenSearchSnapshot": {
        "description": "The snapshot management configuration",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": ["operation"],
              "properties": {
                "operation": { "type": "string", "enum": ["restore", "backup"] }
              }
            }
          }
        }
      },
      "Attachment": {
        "description": "The uploaded attachment",
        "required": true,
        "content": {
          "application/pdf": {
            "schema": { "$ref": "#/components/schemas/BinaryModel" }
          },
          "text/html": {
            "schema": { "$ref": "#/components/schemas/BinaryModel" }
          }
        }
      },
      "Image": {
        "description": "The uploaded image",
        "required": true,
        "content": {
          "image/jpeg": {
            "schema": { "$ref": "#/components/schemas/BinaryModel" }
          },
          "image/png": {
            "schema": { "$ref": "#/components/schemas/BinaryModel" }
          }
        }
      },
      "Report": {
        "description": "The uploaded report",
        "required": true,
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ReportModel" }
          }
        }
      }
    },
    "responses": {
      "AlertItemResponse": {
        "description": "An alert item",
        "content": {
          "application/json": {
            "example": {
              "item": "ce5ca55e-caca-abba-caca-abbacacacaca",
              "alerts": {
                "ce5ca55e-caca-abba-caca-abbacacacaca": {
                  "id": "ce5ca55e-caca-abba-caca-abbacacacaca",
                  "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "assetId": "a5537000-0000-0000-0000-000000000001",
                  "interventionId": "a17e4a4c-e000-0000-0000-000000000000",
                  "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                  "sensorsIds": [
                    "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                    "5e450402-b0b0-b0b0-b0b0-abbacacab0b0"
                  ],
                  "imagesIds": [
                    "14614614-0000-0000-0000-000000000000",
                    "14614614-0000-0000-0000-000000000001"
                  ],
                  "sensorsValues": ["t"],
                  "eventsIds": [],
                  "creation": "2020-01-01T00:00:00Z",
                  "lastModification": "2020-01-01T00:00:00Z",
                  "data": {
                    "code": "custom:my_own_message",
                    "i18nMessage": {
                      "fr-FR": "Un message de diagnostic en fran√ßais",
                      "en-US": "A diagnostic message in english"
                    },
                    "priority": "not_set",
                    "severity": "critical",
                    "viewed": false,
                    "details": {},
                    "assignedUsersIds": [
                      "abbacaca-b0b0-b0b0-b0b0-abbacacab2b2",
                      "abbacaca-b0b0-b0b0-b0b0-abbacacab3b3"
                    ],
                    "comment": "A comment by manager"
                  }
                }
              },
              "sensors": {
                "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                  "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "syncMode": "none",
                  "externalId": "S-0001",
                  "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "data": {
                    "name": "Minion Sensor",
                    "overridenType": { "example": "qualitative" },
                    "series": [
                      {
                        "name": "minion",
                        "type": "quantitative",
                        "unit": "Kg",
                        "sourceType": "data"
                      },
                      {
                        "name": "example",
                        "type": "quantitative",
                        "unit": "none",
                        "sourceType": "event",
                        "eventType": "realtime_alert",
                        "eventField": "aggregatableValue1"
                      }
                    ],
                    "variables": { "x": 1 },
                    "alertsTriggers": {
                      "minion": [
                        {
                          "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                          "name": "An alert trigger for a given sensor",
                          "i18nMessage": { "fr-FR": "The threshold were hit" },
                          "type": "realtime",
                          "occurences": 3,
                          "resetDelay": 3600000,
                          "rule": {
                            "type": "branch",
                            "operator": "and",
                            "leftNode": {
                              "type": "label",
                              "operator": "any",
                              "target": "assets",
                              "name": "configurations",
                              "values": ["c12", "c13"]
                            },
                            "rightNode": {
                              "operator": "or",
                              "leftNode": {
                                "type": "value",
                                "operator": "eq",
                                "value": 1664
                              },
                              "rightNode": {
                                "type": "value",
                                "operator": "eq",
                                "value": 1664
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "creation": "2020-01-01T00:00:00Z",
                  "lastModification": "2020-01-01T00:00:00Z"
                }
              }
            },
            "schema": { "$ref": "#/components/schemas/AlertItem" }
          }
        }
      },
      "AlertsCollection": {
        "description": "A collection of alerts",
        "content": {
          "application/json": {
            "example": {
              "items": ["ce5ca55e-caca-abba-caca-abbacacacaca"],
              "alerts": {
                "ce5ca55e-caca-abba-caca-abbacacacaca": {
                  "id": "ce5ca55e-caca-abba-caca-abbacacacaca",
                  "organisationId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "assetId": "a5537000-0000-0000-0000-000000000001",
                  "interventionId": "a17e4a4c-e000-0000-0000-000000000000",
                  "factoryId": "fab1ab00-0000-0000-0000-000000000000",
                  "sensorsIds": [
                    "5e450401-b0b0-b0b0-b0b0-abbacacab0b0",
                    "5e450402-b0b0-b0b0-b0b0-abbacacab0b0"
                  ],
                  "imagesIds": [
                    "14614614-0000-0000-0000-000000000000",
                    "14614614-0000-0000-0000-000000000001"
                  ],
                  "sensorsValues": ["t"],
                  "eventsIds": [],
                  "creation": "2020-01-01T00:00:00Z",
                  "lastModification": "2020-01-01T00:00:00Z",
                  "data": {
                    "code": "custom:my_own_message",
                    "i18nMessage": {
                      "fr-FR": "Un message de diagnostic en fran√ßais",
                      "en-US": "A diagnostic message in english"
                    },
                    "priority": "not_set",
                    "severity": "critical",
                    "viewed": false,
                    "details": {},
                    "assignedUsersIds": [
                      "abbacaca-b0b0-b0b0-b0b0-abbacacab2b2",
                      "abbacaca-b0b0-b0b0-b0b0-abbacacab3b3"
                    ],
                    "comment": "A comment by manager"
                  }
                }
              },
              "sensors": {
                "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0": {
                  "id": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "syncMode": "none",
                  "externalId": "S-0001",
                  "factoryId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "assetId": "abbacaca-b0b0-b0b0-b0b0-abbacacab0b0",
                  "data": {
                    "name": "Minion Sensor",
                    "overridenType": { "example": "qualitative" },
                    "series": [
                      {
                        "name": "minion",
                        "type": "quantitative",
                        "unit": "Kg",
                        "sourceType": "data"
                      },
                      {
                        "name": "example",
                        "type": "quantitative",
                        "unit": "none",
                        "sourceType": "event",
                        "eventType": "realtime_alert",
                        "eventField": "aggregatableValue1"
                      }
                    ],
                    "variables": { "x": 1 },
                    "alertsTriggers": {
                      "minion": [
                        {
                          "id": "a1347000-b0b0-b0b0-b0b0-abbacacab0b0",
                          "name": "An alert trigger for a given sensor",
                          "i18nMessage": { "fr-FR": "The threshold were hit" },
                          "type": "realtime",
                          "occurences": 3,
                          "resetDelay": 3600000,
                          "rule": {
                            "type": "branch",
                            "operator": "and",
                            "leftNode": {
                              "type": "label",
                              "operator": "any",
                              "target": "assets",
                              "name": "configurations",
                              "values": ["c12", "c13"]
                            },
                            "rightNode": {
                              "operator": "or",
                              "leftNode": {
                                "type": "value",
                                "operator": "eq",
                                "value": 1664
                              },
                              "rightNode": {
                                "type": "value",
                                "operator": "eq",
                                "value": 1664
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "creation": "2020-01-01T00:00:00Z",
                  "lastModification": "2020-01-01T00:00:00Z"
                }
              }
            },
            "schema": { "$ref": "#/components/schemas/AlertsItems" }
          }
        }
      },
      "EventDataResponse": {
        "description": "The sensors raw event data",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/SensorsEventData" }
          }
        }
      },
      "TasksCollection": {
        "description": "A collection of tasks",
        "content": {
          "application/json": {
            "example": [
              {
                "type": "alert",
                "id": "ce5ca55e-caca-abba-caca-abbacacacaca",
                "status": "done",
                "creation": "2010-03-06T00:00:00Z",
                "lastModification": "2012-01-15T00:00:00Z"
              },
              {
                "type": "intervention",
                "id": "a17e4a4c-e000-0000-0000-000000000000",
                "status": "to_do",
                "creation": "2010-03-06T00:00:00Z",
                "lastModification": "2012-01-15T00:00:00Z"
              }
            ],
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": ["total", "items", "stats"],
              "properties": {
                "total": { "type": "number" },
                "stats": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "alert": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "to_assign": { "type": "number" },
                        "to_do": { "type": "number" },
                        "in_progress": { "type": "number" },
                        "done": { "type": "number" }
                      }
                    },
                    "intervention": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "to_assign": { "type": "number" },
                        "to_do": { "type": "number" },
                        "in_progress": { "type": "number" },
                        "done": { "type": "number" }
                      }
                    },
                    "_all": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "to_assign": { "type": "number" },
                        "to_do": { "type": "number" },
                        "in_progress": { "type": "number" },
                        "done": { "type": "number" }
                      }
                    }
                  }
                },
                "items": { "$ref": "#/components/schemas/TasksModel" }
              }
            }
          }
        }
      },
      "AllPreferencesResponse": {
        "description": "The organisation's preferences.",
        "content": {
          "application/json": {
            "example": {
              "default": {
                "displayParentName": true,
                "sensorDisplayExternalId": true,
                "sensorDisplaySerie": "always",
                "useFactoryTimeZone": true,
                "showGraphLabels": true,
                "showGraphConfigurations": false,
                "showGraphCycles": false,
                "showGraphPhases": true
              },
              "organisation": { "sensorDisplayExternalId": true },
              "factory": { "sensorDisplayExternalId": true },
              "user": { "sensorDisplayExternalId": true }
            },
            "schema": { "$ref": "#/components/schemas/AllPreferencesModel" }
          }
        }
      },
      "PreferencesResponse": {
        "description": "The preferences object.",
        "content": {
          "application/json": {
            "example": { "sensorDisplayExternalId": true },
            "schema": { "$ref": "#/components/schemas/PartialPreferencesModel" }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "Bearer authentication with a user API token",
        "scheme": "bearer"
      },
      "basicAuth": {
        "description": "Basic authentication with APPLICATION_ID/APPLICATION_SECRET credentials",
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    { "name": "system", "description": "System endpoints" },
    {
      "name": "oauth2",
      "description": "Endpoints related to authentication with OAuth2"
    },
    { "name": "auth", "description": "Endpoints related to authentication" },
    {
      "name": "users",
      "description": "Endpoints relative to the platform users"
    },
    {
      "name": "organisations",
      "description": "Endpoints relative to the platform organisations"
    },
    {
      "name": "factories",
      "description": "Endpoints relative to the platform factories, assets, sensors‚Ä¶"
    },
    {
      "name": "interventions",
      "description": "Endpoints relative to interventions"
    },
    { "name": "data", "description": "Endpoints relative to data exchange" },
    {
      "name": "exchange",
      "description": "Endpoints for data exchange with tier systems"
    },
    { "name": "alerts", "description": "Endpoints for alerts" },
    { "name": "search", "description": "Endpoints for searching resources" },
    { "name": "reports", "description": "Endpoints for organisation reports" },
    { "name": "trends", "description": "Endpoints for organisation trends" },
    { "name": "sensors", "description": "Endpoints for virtual sensors" },
    { "name": "attachments", "description": "Endpoints for attachments" },
    { "name": "images", "description": "Endpoints for images" }
  ]
}
