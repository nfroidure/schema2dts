// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with array_of_things.json 1`] = `
"declare type Main = {
    fruits?: string[];
    vegetables?: Definitions.Veggie[];
};
declare namespace Definitions {
    export type Veggie = {
        veggieName: string;
        veggieLike: boolean;
    };
}"
`;

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with wierd_schema.json 1`] = `"declare type Main = {} | null;"`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with callback_example.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace PutCallbacksOnValidatedRequestQueryQueryUrl {
            export namespace Responses {
                export type $201 = Components.Responses.PutCallbacksOnValidatedRequestQueryQueryUrl201<201>;
            }
            export type Output = Responses.$201;
            export type Input = {};
        }
        export namespace PostStreams {
            export namespace Callbacks {
                export type StreamValidated = Components.Callbacks.OnValidated;
                export type OnData = Components.Callbacks.PostStreamsCallbacksOnData;
            }
            export namespace Responses {
                export type $201 = Components.Responses.PostStreams201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type CallbackUrl = Components.Parameters.PostStreams0;
            }
            export type Input = {
                readonly callbackUrl: Parameters.CallbackUrl;
            };
        }
        export namespace PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata {
            export type Body = Components.RequestBodies.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
            export namespace Responses {
                export type $202 = Components.Responses.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata202<202>;
                export type $204 = Components.Responses.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata204<204>;
            }
            export type Output = Responses.$202 | Responses.$204;
            export type Input = {
                readonly body?: Body;
            };
        }
    }
    export namespace Responses {
        export type PutCallbacksOnValidatedRequestQueryQueryUrl201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostStreams201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPostStreams201Body0;
        };
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata202<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace CallbacksOnValidatedRequestQueryQueryUrl {
            export import Put = Components.Operations.PutCallbacksOnValidatedRequestQueryQueryUrl;
        }
        export namespace Streams {
            export import Post = Components.Operations.PostStreams;
        }
        export namespace CallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata {
            export import Post = Components.Operations.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
        }
    }
    export namespace Callbacks {
        export type OnValidatedClone = Components.Callbacks.OnValidated;
        export namespace OnValidated {
            export type RequestQueryQueryUrl = Components.PathItems.CallbacksOnValidatedRequestQueryQueryUrl;
        }
        export namespace PostStreamsCallbacksOnData {
            export type RequestQueryCallbackUrldata = Components.PathItems.CallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
        }
    }
    export namespace RequestBodies {
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata = Components.Schemas.RequestBodiesPostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldataBody0;
    }
    export namespace Parameters {
        export type PostStreams0 = string;
    }
    export namespace Schemas {
        export type RequestBodiesPostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldataBody0 = {
            timestamp?: string;
            userData?: string;
        };
        export type ResponsesPostStreams201Body0 = {
            subscriptionId: string;
        };
    }
}
declare namespace API {
    export import PostStreams = Components.Operations.PostStreams;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with callback_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace PutCallbacksOnValidatedRequestQueryQueryUrl {
            export namespace Responses {
                export type $201 = Components.Responses.PutCallbacksOnValidatedRequestQueryQueryUrl201<201>;
            }
            export type Output = Responses.$201;
            export type Input = {};
        }
        export namespace PostStreams {
            export namespace Callbacks {
                export type StreamValidated = Components.Callbacks.OnValidated;
                export type OnData = Components.Callbacks.PostStreamsCallbacksOnData;
            }
            export namespace Responses {
                export type $201 = Components.Responses.PostStreams201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type CallbackUrl = Components.Parameters.PostStreams0;
            }
            export type Input = {
                readonly callbackUrl: Parameters.CallbackUrl;
            };
        }
        export namespace PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata {
            export type Body = Components.RequestBodies.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
            export namespace Responses {
                export type $202 = Components.Responses.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata202<202>;
            }
            export type Output = Responses.$202;
            export type Input = {
                readonly body?: Body;
            };
        }
    }
    export namespace Responses {
        export type PutCallbacksOnValidatedRequestQueryQueryUrl201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostStreams201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPostStreams201Body0;
        };
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata202<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace CallbacksOnValidatedRequestQueryQueryUrl {
            export import Put = Components.Operations.PutCallbacksOnValidatedRequestQueryQueryUrl;
        }
        export namespace Streams {
            export import Post = Components.Operations.PostStreams;
        }
        export namespace CallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata {
            export import Post = Components.Operations.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
        }
    }
    export namespace Callbacks {
        export type OnValidatedClone = Components.Callbacks.OnValidated;
        export namespace OnValidated {
            export type RequestQueryQueryUrl = Components.PathItems.CallbacksOnValidatedRequestQueryQueryUrl;
        }
        export namespace PostStreamsCallbacksOnData {
            export type RequestQueryCallbackUrldata = Components.PathItems.CallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
        }
    }
    export namespace RequestBodies {
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata = Components.Schemas.RequestBodiesPostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldataBody0;
    }
    export namespace Parameters {
        export type PostStreams0 = string;
    }
    export namespace Schemas {
        export type RequestBodiesPostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldataBody0 = {
            timestamp?: string;
            userData?: string;
        };
        export type ResponsesPostStreams201Body0 = {
            subscriptionId: string;
        };
    }
}
declare namespace API {
    export import PostStreams = Components.Operations.PostStreams;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with callback_example.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace PutCallbacksOnValidatedRequestQueryQueryUrl {
            export namespace Responses {
                export type $201 = Components.Responses.PutCallbacksOnValidatedRequestQueryQueryUrl201<201>;
            }
            export type Output = Responses.$201;
            export type Input = {};
        }
        export namespace PostStreams {
            export namespace Callbacks {
                export type StreamValidated = Components.Callbacks.OnValidated;
                export type OnData = Components.Callbacks.PostStreamsCallbacksOnData;
            }
            export namespace Responses {
                export type $201 = Components.Responses.PostStreams201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type CallbackUrl = Components.Parameters.PostStreams0;
            }
            export type Input = {
                readonly callbackUrl: Parameters.CallbackUrl;
            };
        }
        export namespace PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata {
            export type Body = Components.RequestBodies.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
            export namespace Responses {
                export type $202 = Components.Responses.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata202<202>;
                export type $204 = Components.Responses.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata204<204>;
            }
            export type Output = Responses.$202 | Responses.$204;
            export type Input = {
                readonly body?: Body;
            };
        }
    }
    export namespace Responses {
        export type PutCallbacksOnValidatedRequestQueryQueryUrl201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostStreams201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPostStreams201Body0;
        };
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata202<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace CallbacksOnValidatedRequestQueryQueryUrl {
            export import Put = Components.Operations.PutCallbacksOnValidatedRequestQueryQueryUrl;
        }
        export namespace Streams {
            export import Post = Components.Operations.PostStreams;
        }
        export namespace CallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata {
            export import Post = Components.Operations.PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
        }
    }
    export namespace Callbacks {
        export type OnValidatedClone = Components.Callbacks.OnValidated;
        export namespace OnValidated {
            export type RequestQueryQueryUrl = Components.PathItems.CallbacksOnValidatedRequestQueryQueryUrl;
        }
        export namespace PostStreamsCallbacksOnData {
            export type RequestQueryCallbackUrldata = Components.PathItems.CallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata;
        }
    }
    export namespace RequestBodies {
        export type PostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldata = Components.Schemas.RequestBodiesPostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldataBody0;
    }
    export namespace Parameters {
        export type PostStreams0 = string;
    }
    export namespace Schemas {
        export type RequestBodiesPostCallbacksPostStreamsCallbacksOnDataRequestQueryCallbackUrldataBody0 = {
            timestamp?: string;
            userData?: string;
        };
        export type ResponsesPostStreams201Body0 = {
            subscriptionId: string;
        };
    }
}
export namespace AnotherAPI {
    export import PostStreams = Components.Operations.PostStreams;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace DeleteAlert {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteAlert204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteApplication {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteApplication204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteIntervention {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteIntervention204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteProject {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteProject204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlert {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationAlert204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationAlert {
            export namespace Responses {
                export type $200 = Components.Responses.AlertItemResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlert {
            export type Body = Components.RequestBodies.PutUserOrganisationAlert;
            export namespace Responses {
                export type $201 = Components.Responses.AlertItemResponse<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlertAttachment {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationAlertAttachment204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly attachmentId: Parameters.AttachmentId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertAttachment {
            export type Body = Components.RequestBodies.Attachment;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertAttachment201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.AttachmentFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly attachmentId: Parameters.AttachmentId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlertImage {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationAlertImage204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type ImageId = Components.Parameters.ImageId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly imageId: Parameters.ImageId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationApplication {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationApplication204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationApplication {
            export type Body = Components.RequestBodies.PutUserOrganisationApplication;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationApplication201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationIntervention {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationIntervention204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationInterventionImage {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationInterventionImage204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationInterventionImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationInterventionImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationMembership {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationMembership204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type CollaboratorId = Components.Parameters.DeleteUserOrganisationMembership2;
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly collaboratorId: Parameters.CollaboratorId;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationProject {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationProject204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationProject {
            export type Body = Components.RequestBodies.PutUserOrganisationProject;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationProject201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationSensorSeries {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationSensorSeries204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorId = Components.Parameters.SensorId;
                export type ValueName = Components.Parameters.ValueName;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorId: Parameters.SensorId;
                readonly valueName: Parameters.ValueName;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetAlertsStats {
            export namespace Responses {
                export type $200 = Components.Responses.GetAlertsStats200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetAuthProfile {
            export namespace Responses {
                export type $200 = Components.Responses.GetAuthProfile200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Cookie = Components.Parameters.Cookie;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly cookie?: Parameters.Cookie;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetMySelf {
            export namespace Responses {
                export type $302 = Components.Responses.GetMySelf302<302>;
            }
            export type Output = Responses.$302;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.GetOpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type MutedTags = Components.Parameters.GetOpenAPI0;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly mutedTags?: Parameters.MutedTags;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactory {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactory200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAlertsStats {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAlertsStats200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAsset {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAsset200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type AssetId = Components.Parameters.AssetId;
                export type IncludeChildrenIds = Components.Parameters.IncludeChildrenIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly assetId: Parameters.AssetId;
                readonly includeChildrenIds: Parameters.IncludeChildrenIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAssets {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAssets200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAssetsTypes = Components.Parameters.OptionalWithAssetsTypes;
                export type WithRootAssetsFirst = Components.Parameters.OptionalWithRootAssetsFirst;
                export type WithParentsAssetsIds = Components.Parameters.OptionalWithParentsAssetsIds;
                export type SortBy = Components.Parameters.AssetsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type IncludeChildrenIds = Components.Parameters.IncludeChildrenIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAssetsTypes?: Parameters.WithAssetsTypes;
                readonly withRootAssetsFirst?: Parameters.WithRootAssetsFirst;
                readonly withParentsAssetsIds?: Parameters.WithParentsAssetsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly includeChildrenIds: Parameters.IncludeChildrenIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryDataLabels {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryDataLabels200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryEvents {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryEvents200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithEventsIds = Components.Parameters.OptionalWithEventsIds;
                export type WithEventsTypes = Components.Parameters.OptionalWithEventType;
                export type SensorsIds = Components.Parameters.OptionalsensorsIds;
                export type ValuesNames = Components.Parameters.OptionalvaluesNames;
                export type WithUsersFeedback = Components.Parameters.OptionalWithUsersFeedback;
                export type Since = Components.Parameters.Since;
                export type Before = Components.Parameters.Before;
                export type Size = Components.Parameters.Size;
                export type BeforeDate = Components.Parameters.BeforeDate;
                export type AfterDate = Components.Parameters.AfterDate;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withEventsIds?: Parameters.WithEventsIds;
                readonly withEventsTypes?: Parameters.WithEventsTypes;
                readonly sensorsIds?: Parameters.SensorsIds;
                readonly valuesNames?: Parameters.ValuesNames;
                readonly withUsersFeedback?: Parameters.WithUsersFeedback;
                readonly since?: Parameters.Since;
                readonly before?: Parameters.Before;
                readonly size?: Parameters.Size;
                readonly beforeDate?: Parameters.BeforeDate;
                readonly afterDate?: Parameters.AfterDate;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryIntervention {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryIntervention200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryInterventions {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryInterventions200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithInterventionsIds = Components.Parameters.OptionalWithInterventionsIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type SortBy = Components.Parameters.InterventionsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithAttachments = Components.Parameters.WithAttachments;
                export type WithImages = Components.Parameters.WithImages;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withInterventionsIds?: Parameters.WithInterventionsIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withAttachments: Parameters.WithAttachments;
                readonly withImages: Parameters.WithImages;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryReports {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryReports200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithReportsIds = Components.Parameters.OptionalWithReportsIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.ReportsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withReportsIds?: Parameters.WithReportsIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactorySensor {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactorySensor200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactorySensors {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactorySensors200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type WithAlertTriggerTypes = Components.Parameters.WithAlertTriggerTypes;
                export type WithFactorySensorsOnly = Components.Parameters.WithFactorySensorsOnly;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithSensorsIds = Components.Parameters.OptionalWithSensorsIds;
                export type SortBy = Components.Parameters.SensorsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly withAlertTriggerTypes?: Parameters.WithAlertTriggerTypes;
                readonly withFactorySensorsOnly: Parameters.WithFactorySensorsOnly;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withSensorsIds?: Parameters.WithSensorsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryTrends {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryTrends200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationProject {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationProject200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationProjects {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationProjects200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type SortBy = Components.Parameters.ProjectsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithProjectsIds = Components.Parameters.OptionalWithProjectsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withProjectsIds?: Parameters.WithProjectsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type ValuesNames = Components.Parameters.ValuesNames;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly valuesNames: Parameters.ValuesNames;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateEventData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateEventData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateEventRangeData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateEventRangeData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type ValuesNames = Components.Parameters.ValuesNames;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly valuesNames: Parameters.ValuesNames;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsEventData {
            export namespace Responses {
                export type $200 = Components.Responses.EventDataResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventFields: Parameters.EventFields;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsEventRangeData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsEventRangeData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationUniversalSearch {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationUniversalSearch200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SearchType = Components.Parameters.SearchType;
                export type SearchSentence = Components.Parameters.SearchSentence;
                export type WithFilterTypes = Components.Parameters.WithFilterTypes;
                export type WithFilterIds = Components.Parameters.WithFilterIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly searchType?: Parameters.SearchType;
                readonly searchSentence: Parameters.SearchSentence;
                readonly withFilterTypes?: Parameters.WithFilterTypes;
                readonly withFilterIds?: Parameters.WithFilterIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutReport {
            export type Body = Components.RequestBodies.Report;
            export namespace Responses {
                export type $201 = Components.Responses.PutReport201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type ReportId = Components.Parameters.ReportId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly reportId: Parameters.ReportId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUniversalSearch {
            export namespace Responses {
                export type $200 = Components.Responses.GetUniversalSearch200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithOrganisationsIds = Components.Parameters.OptionalWithOrganisationsIds;
                export type SearchSentence = Components.Parameters.SearchSentence;
                export type SearchType = Components.Parameters.SearchType;
                export type WithFilterTypes = Components.Parameters.WithFilterTypes;
                export type WithFilterIds = Components.Parameters.WithFilterIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withOrganisationsIds?: Parameters.WithOrganisationsIds;
                readonly searchSentence: Parameters.SearchSentence;
                readonly searchType?: Parameters.SearchType;
                readonly withFilterTypes?: Parameters.WithFilterTypes;
                readonly withFilterIds?: Parameters.WithFilterIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUser {
            export namespace Responses {
                export type $200 = Components.Responses.GetUser200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type WithMembershipsStatuses = Components.Parameters.WithMembershipsStatuses;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly withMembershipsStatuses?: Parameters.WithMembershipsStatuses;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUser {
            export type Body = Components.RequestBodies.PutUser;
            export namespace Responses {
                export type $201 = Components.Responses.PutUser201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserFactories {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserFactories200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type SortBy = Components.Parameters.FactoriesSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserNotifications {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserNotifications200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithOrganisationsIds = Components.Parameters.OptionalWithOrganisationsIds;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithNotificationTypes = Components.Parameters.OptionalWithNotificationTypesQueryParameter;
                export type IncludeOrganisationLevelItems = Components.Parameters.IncludeOrganisationLevelItemsQueryParameter;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withOrganisationsIds?: Parameters.WithOrganisationsIds;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withNotificationTypes?: Parameters.WithNotificationTypes;
                readonly includeOrganisationLevelItems?: Parameters.IncludeOrganisationLevelItems;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisation {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisation200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisation {
            export type Body = Components.RequestBodies.PutUserOrganisation;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationAlerts {
            export namespace Responses {
                export type $200 = Components.Responses.AlertsCollection<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithSensorsIds = Components.Parameters.OptionalWithSensorsIds;
                export type WithAlertsIds = Components.Parameters.OptionalWithAlertsIds;
                export type WithStatuses = Components.Parameters.WithAlertsStatuses;
                export type WithOrphanAlertsOnly = Components.Parameters.WithOrphanAlertsOnly;
                export type WithAttachments = Components.Parameters.WithAttachments;
                export type WithImages = Components.Parameters.WithImages;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.AlertsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withSensorsIds?: Parameters.WithSensorsIds;
                readonly withAlertsIds?: Parameters.WithAlertsIds;
                readonly withStatuses?: Parameters.WithStatuses;
                readonly withOrphanAlertsOnly?: Parameters.WithOrphanAlertsOnly;
                readonly withAttachments: Parameters.WithAttachments;
                readonly withImages: Parameters.WithImages;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationApplications {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationApplications200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type SortBy = Components.Parameters.ApplicationsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithApplicationsIds = Components.Parameters.OptionalWithApplicationsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withApplicationsIds?: Parameters.WithApplicationsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationApplication {
            export type Body = Components.RequestBodies.PostUserOrganisationApplication;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationApplication201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationFactories {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationFactories200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type SortBy = Components.Parameters.FactoriesSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactory {
            export type Body = Components.RequestBodies.PostUserOrganisationFactory;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactory201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationFactoryPreferences {
            export namespace Responses {
                export type $200 = Components.Responses.AllPreferencesResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationTasks {
            export namespace Responses {
                export type $200 = Components.Responses.TasksCollection<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithUsersIds = Components.Parameters.OptionalWithUsersIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithTypes = Components.Parameters.WithTasksTypes;
                export type WithStatuses = Components.Parameters.WithTasksStatuses;
                export type WithPriorities = Components.Parameters.WithPriorities;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.TasksSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withUsersIds?: Parameters.WithUsersIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withTypes: Parameters.WithTypes;
                readonly withStatuses: Parameters.WithStatuses;
                readonly withPriorities: Parameters.WithPriorities;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationUsers {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationUsers200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithUsersIds = Components.Parameters.OptionalWithUsersIds;
                export type WithMembershipsStatuses = Components.Parameters.WithMembershipsStatuses;
                export type SortBy = Components.Parameters.UsersSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withUsersIds?: Parameters.WithUsersIds;
                readonly withMembershipsStatuses?: Parameters.WithMembershipsStatuses;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisations {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisations200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type SortBy = Components.Parameters.OrganisationsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisation {
            export type Body = Components.RequestBodies.PostUserOrganisation;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUser {
            export type Body = Components.RequestBodies.PostUser;
            export namespace Responses {
                export type $201 = Components.Responses.PostUser201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type InvitationToken = Components.Parameters.PostUser0;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly invitationToken?: Parameters.InvitationToken;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthLogin {
            export type Body = Components.RequestBodies.PostAuthLogin;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthLogin200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthLogout {
            export namespace Responses {
                export type $204 = Components.Responses.PostAuthLogout204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthPasswordChange {
            export type Body = Components.RequestBodies.PostAuthPasswordChange;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthPasswordChange200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body?: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthRefresh {
            export type Body = Components.RequestBodies.PostAuthRefresh;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthRefresh200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Cookie = Components.Parameters.Cookie;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly cookie?: Parameters.Cookie;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthVerify {
            export type Body = Components.RequestBodies.PostAuthVerify;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthVerify200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body?: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostOAuth2Token {
            export type Body = Components.RequestBodies.PostOAuth2Token;
            export namespace Responses {
                export type $200 = Components.Responses.PostOAuth2Token200<200>;
                export type $400 = Components.Responses.PostOAuth2Token400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostOrganisationData {
            export type Body = Components.RequestBodies.PostOrganisationData;
            export namespace Responses {
                export type $201 = Components.Responses.PostOrganisationData201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type ProjectCode = Components.Parameters.ProjectCode;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly projectCode: Parameters.ProjectCode;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostPasswordChangeRequest {
            export type Body = Components.RequestBodies.PostPasswordChangeRequest;
            export namespace Responses {
                export type $200 = Components.Responses.PostPasswordChangeRequest200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserInvitationResponse {
            export type Body = Components.RequestBodies.PostUserInvitationResponse;
            export namespace Responses {
                export type $200 = Components.Responses.PostUserInvitationResponse200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationAssetSensor {
            export type Body = Components.RequestBodies.PostUserOrganisationAssetSensor;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationAssetSensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AssetId = Components.Parameters.AssetId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly assetId: Parameters.AssetId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactoryAsset {
            export type Body = Components.RequestBodies.PostUserOrganisationFactoryAsset;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactoryAsset201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactoryIntervention {
            export type Body = Components.RequestBodies.PostUserOrganisationFactoryIntervention;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactoryIntervention201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactorySensor {
            export type Body = Components.RequestBodies.PostUserOrganisationFactorySensor;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactorySensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationInvitation {
            export type Body = Components.RequestBodies.PostUserOrganisationInvitation;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationInvitation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationInvitationFollowup {
            export type Body = Components.RequestBodies.PostUserOrganisationInvitationFollowup;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationInvitationFollowup201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationNotificationRead {
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationNotificationRead201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type NotificationId = Components.Parameters.NotificationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly notificationId: Parameters.NotificationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationProject {
            export type Body = Components.RequestBodies.PostUserOrganisationProject;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationProject201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutAttachment {
            export type Body = Components.RequestBodies.Attachment;
            export namespace Responses {
                export type $201 = Components.Responses.PutAttachment201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type WithAlertId = Components.Parameters.WithAlertId;
                export type WithReportId = Components.Parameters.WithReportId;
                export type WithInterventionId = Components.Parameters.WithInterventionId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.AttachmentFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly attachmentId: Parameters.AttachmentId;
                readonly withAlertId?: Parameters.WithAlertId;
                readonly withReportId?: Parameters.WithReportId;
                readonly withInterventionId?: Parameters.WithInterventionId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type WithAlertId = Components.Parameters.WithAlertId;
                export type WithInterventionId = Components.Parameters.WithInterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly withAlertId?: Parameters.WithAlertId;
                readonly withInterventionId?: Parameters.WithInterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutNotificationEvent {
            export type Body = Components.RequestBodies.PutNotificationEvent;
            export namespace Responses {
                export type $204 = Components.Responses.PutNotificationEvent204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type NotificationId = Components.Parameters.NotificationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly notificationId: Parameters.NotificationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutOrganisationFactoryEvent {
            export type Body = Components.RequestBodies.PutOrganisationFactoryEvent;
            export namespace Responses {
                export type $204 = Components.Responses.PutOrganisationFactoryEvent204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type HasAttachments = Components.Parameters.PutOrganisationFactoryEvent3;
                export type HasImages = Components.Parameters.PutOrganisationFactoryEvent4;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type EventId = Components.Parameters.EventId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly hasAttachments?: Parameters.HasAttachments;
                readonly hasImages?: Parameters.HasImages;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly eventId: Parameters.EventId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertFeedback {
            export type Body = Components.RequestBodies.PutUserOrganisationAlertFeedback;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertFeedback201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAssetSensor {
            export type Body = Components.RequestBodies.PutUserOrganisationAssetSensor;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAssetSensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AssetId = Components.Parameters.AssetId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly assetId: Parameters.AssetId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactory {
            export type Body = Components.RequestBodies.PutUserOrganisationFactory;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactory201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryAsset {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryAsset;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactoryAsset201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type AssetId = Components.Parameters.AssetId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly assetId: Parameters.AssetId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryIntervention {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryIntervention;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactoryIntervention201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryPreferences {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryPreferences;
            export namespace Responses {
                export type $201 = Components.Responses.PreferencesResponse<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type Level = Components.Parameters.PreferenceLevel;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly level: Parameters.Level;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactorySensor {
            export type Body = Components.RequestBodies.PutUserOrganisationFactorySensor;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactorySensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOAuth2Authorize {
            export namespace Responses {
                export type $302 = Components.Responses.GetOAuth2Authorize302<302>;
            }
            export type Output = Responses.$302;
            export namespace Parameters {
                export type ResponseType = Components.Parameters.ResponseType;
                export type ClientId = Components.Parameters.ClientId;
                export type RedirectUri = Components.Parameters.RedirectURI;
                export type Scope = Components.Parameters.Scope;
                export type State = Components.Parameters.State;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly responseType: Parameters.ResponseType;
                readonly clientId: Parameters.ClientId;
                readonly redirectUri?: Parameters.RedirectUri;
                readonly scope?: Parameters.Scope;
                readonly state: Parameters.State;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetPing {
            export namespace Responses {
                export type $200 = Components.Responses.GetPing200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
    }
    export namespace Responses {
        export type AlertItemResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertItem;
        };
        export type AlertsCollection<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsItems;
        };
        export type EventDataResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorsEventData;
        };
        export type TasksCollection<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesTasksCollectionBody0;
        };
        export type AllPreferencesResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AllPreferencesModel;
        };
        export type PreferencesResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.PartialPreferencesModel;
        };
        export type DeleteAlert204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteApplication204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteIntervention204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteProject204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationAlert204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationAlertAttachment204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertAttachment201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationAlertImage204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationApplication204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationApplication201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationItem;
        };
        export type DeleteUserOrganisationIntervention204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationInterventionImage204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationInterventionImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationMembership204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationProject204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationProject201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type DeleteUserOrganisationSensorSeries204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetAlertsStats200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsStats;
        };
        export type GetAuthProfile200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type GetMySelf302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPI200Body0;
        };
        export type GetOrganisationFactory200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type GetOrganisationFactoryAlertsStats200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsStat;
        };
        export type GetOrganisationFactoryAsset200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type GetOrganisationFactoryAssets200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetsItems;
        };
        export type GetOrganisationFactoryDataLabels200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationFactoryDataLabels200Body0;
        };
        export type GetOrganisationFactoryEvents200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.EventsItems;
        };
        export type GetOrganisationFactoryIntervention200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type GetOrganisationFactoryInterventions200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionsItems;
        };
        export type GetOrganisationFactoryReports200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ReportsItems;
        };
        export type GetOrganisationFactorySensor200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type GetOrganisationFactorySensors200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorsItems;
        };
        export type GetOrganisationFactoryTrends200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TrendItems;
        };
        export type GetOrganisationProject200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type GetOrganisationProjects200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectsItems;
        };
        export type GetOrganisationSensorsAggregateData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateData200Body0;
        };
        export type GetOrganisationSensorsAggregateEventData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateEventData200Body0;
        };
        export type GetOrganisationSensorsAggregateEventRangeData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateEventRangeData200Body0;
        };
        export type GetOrganisationSensorsData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsData200Body0;
        };
        export type GetOrganisationSensorsEventRangeData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsEventRangeData200Body0;
        };
        export type GetOrganisationUniversalSearch200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationUniversalSearch200Body0;
        };
        export type PutReport201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUniversalSearch200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetUniversalSearch200Body0;
        };
        export type GetUser200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type PutUser201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type GetUserFactories200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoriesItems;
        };
        export type GetUserNotifications200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.NotificationsItems;
        };
        export type GetUserOrganisation200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type PutUserOrganisation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type GetUserOrganisationApplications200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationsItems;
        };
        export type PostUserOrganisationApplication201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationItem;
        };
        export type GetUserOrganisationFactories200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoriesItems;
        };
        export type PostUserOrganisationFactory201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type GetUserOrganisationUsers200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UsersItems;
        };
        export type GetUserOrganisations200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationsItems;
        };
        export type PostUserOrganisation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type PostUser201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type PostAuthLogin200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthLogin200Body0;
        };
        export type PostAuthLogout204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostAuthPasswordChange200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthPasswordChange200Body0;
        };
        export type PostAuthRefresh200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthRefresh200Body0;
        };
        export type PostAuthVerify200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "set-cookie"?: Components.Headers.PostAuthVerify200HeadersSetCookie;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthVerify200Body0;
        };
        export type PostOAuth2Token200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2Token200Body0;
        };
        export type PostOAuth2Token400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2Token400Body0;
        };
        export type PostOrganisationData201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostPasswordChangeRequest200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserInvitationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationAssetSensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PostUserOrganisationFactoryAsset201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type PostUserOrganisationFactoryIntervention201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type PostUserOrganisationFactorySensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PostUserOrganisationInvitation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostUserOrganisationInvitation201Body0;
        };
        export type PostUserOrganisationInvitationFollowup201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationNotificationRead201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationProject201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type PutAttachment201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutNotificationEvent204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutOrganisationFactoryEvent204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertFeedback201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAssetSensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PutUserOrganisationFactory201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type PutUserOrganisationFactoryAsset201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type PutUserOrganisationFactoryIntervention201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type PutUserOrganisationFactorySensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type GetOAuth2Authorize302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetPing200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPing200Body0;
        };
    }
    export namespace Parameters {
        export type AlertId = Components.Schemas.AlertUUID;
        export type Direction = [
            Components.Schemas.SortDirection,
            ...Components.Schemas.SortDirection[]
        ];
        export type FromFilter = Components.Schemas.Date;
        export type ToFilter = Components.Schemas.Date;
        export type OptionalWithAlertsIds = Components.Schemas.AlertsUUIDS;
        export type WithAlertsStatuses = Components.Schemas.AlertStatuses;
        export type AlertsSortBy = [
            Components.Schemas.AlertsSortByValue,
            ...Components.Schemas.AlertsSortByValue[]
        ];
        export type WithAlertId = Components.Schemas.AlertUUID;
        export type WithAttachments = boolean;
        export type WithImages = boolean;
        export type WithOrphanAlertsOnly = boolean;
        export type ApplicationId = Components.Schemas.ApplicationUUID;
        export type OptionalWithApplicationsIds = Components.Schemas.ApplicationsUUIDS;
        export type ApplicationsSortBy = [
            Components.Schemas.ApplicationsSortByValue,
            ...Components.Schemas.ApplicationsSortByValue[]
        ];
        export type AssetId = Components.Schemas.AssetUUID;
        export type IncludeChildrenIds = boolean;
        export type OptionalWithAssetsIds = Components.Schemas.AssetsUUIDS;
        export type OptionalWithAssetsTypes = Components.Schemas.AssetType[];
        export type OptionalWithParentsAssetsIds = Components.Schemas.AssetsUUIDS;
        export type OptionalWithRootAssetsFirst = boolean;
        export type AssetsSortBy = [
            Components.Schemas.AssetsSortByValue,
            ...Components.Schemas.AssetsSortByValue[]
        ];
        export type AfterDate = Components.Schemas.Date;
        export type BeforeDate = Components.Schemas.Date;
        export type Before = Components.Schemas.Cursor;
        export type EventId = Components.Schemas.EventUUID;
        export type OptionalsensorsIds = Components.Schemas.NonEmptySensorsUUIDS;
        export type OptionalvaluesNames = Components.Schemas.NonEmptyValuesNames;
        export type OptionalWithEventsIds = Components.Schemas.EventsUUIDS;
        export type OptionalWithEventType = Components.Schemas.EventTypes;
        export type OptionalWithFactoriesIds = Components.Schemas.FactoriesUUIDS;
        export type OptionalWithOrganisationsIds = Components.Schemas.OrganisationsUUIDS;
        export type OptionalWithUsersFeedback = boolean;
        export type Since = Components.Schemas.Cursor;
        export type Size = Components.Schemas.Size;
        export type FactoryId = Components.Schemas.FactoryUUID;
        export type FactoriesSortBy = [
            Components.Schemas.FactoriesSortByValue,
            ...Components.Schemas.FactoriesSortByValue[]
        ];
        export type InterventionId = Components.Schemas.InterventionUUID;
        export type OptionalWithInterventionsIds = Components.Schemas.InterventionsUUIDS;
        export type InterventionsSortBy = [
            Components.Schemas.InterventionsSortByValue,
            ...Components.Schemas.InterventionsSortByValue[]
        ];
        export type WithInterventionId = Components.Schemas.InterventionUUID;
        export type MockName = Components.Schemas.MockName;
        export type OrganisationId = Components.Schemas.OrganisationUUID;
        export type OrganisationsSortBy = [
            Components.Schemas.OrganisationsSortByValue,
            ...Components.Schemas.OrganisationsSortByValue[]
        ];
        export type ProjectId = Components.Schemas.ProjectUUID;
        export type OptionalWithProjectsIds = Components.Schemas.ProjectsUUIDS;
        export type ProjectCode = Components.Schemas.ProjectCode;
        export type ProjectsSortBy = [
            Components.Schemas.ProjectsSortByValue,
            ...Components.Schemas.ProjectsSortByValue[]
        ];
        export type OptionalWithReportsIds = Components.Schemas.ReportsUUIDS;
        export type ReportId = Components.Schemas.ReportUUID;
        export type ReportsSortBy = [
            Components.Schemas.ReportsSortByValue,
            ...Components.Schemas.ReportsSortByValue[]
        ];
        export type WithReportId = Components.Schemas.ReportUUID;
        export type WithAlertTriggerTypes = Components.Schemas.AlertTriggerTypes;
        export type OptionalWithSensorsIds = Components.Schemas.SensorsUUIDS;
        export type SensorId = Components.Schemas.SensorUUID;
        export type SensorsSortBy = [
            Components.Schemas.SensorsSortByValue,
            ...Components.Schemas.SensorsSortByValue[]
        ];
        export type ValueName = Components.Schemas.ValueName;
        export type WithFactorySensorsOnly = boolean;
        export type Aggregations = Components.Schemas.Aggregations;
        export type From = Components.Schemas.Date;
        export type Granularity = Components.Schemas.Granularity;
        export type WithTimeZone = Components.Schemas.TimeZone;
        export type To = Components.Schemas.Date;
        export type SensorEventTypesQueryParameter = Components.Schemas.EventTypes;
        export type IncludeLabels = boolean;
        export type OptionalWithAssetConfigurations = Components.Schemas.AssetConfigurations;
        export type OptionalWithDataLabels = Components.Schemas.Tags;
        export type OptionalWithManufacturingCycles = Components.Schemas.ManufacturingCycles;
        export type OptionalWithManufacturingPhases = Components.Schemas.ManufacturingPhases;
        export type OptionalWithValuedLabelsNames = Components.Schemas.ValuedLabelName[];
        export type OptionalWithValuedLabelsValues = Components.Schemas.LabelValue[];
        export type EventField = Components.Schemas.EventField;
        export type EventFieldsQueryParameter = Components.Schemas.EventFields;
        export type SensorsIds = Components.Schemas.NonEmptySensorsUUIDS;
        export type ValuesNames = Components.Schemas.NonEmptyValuesNames;
        export type OptionalWithAncestorsIds = Components.Schemas.AssetsUUIDS;
        export type TasksSortBy = [
            Components.Schemas.TasksSortByValue,
            ...Components.Schemas.TasksSortByValue[]
        ];
        export type WithPriorities = Components.Schemas.Priorities;
        export type WithTasksStatuses = Components.Schemas.TasksStatuses;
        export type WithTasksTypes = Components.Schemas.TasksTypes;
        export type SearchSentence = string;
        export type SearchType = Components.Schemas.SearchType;
        export type WithFilterIds = Components.Schemas.UUID[];
        export type WithFilterTypes = Components.Schemas.SearchFilterType[];
        export type IncludeOrganisationLevelItemsQueryParameter = boolean;
        export type OptionalWithNotificationTypesQueryParameter = Components.Schemas.NotificationTypes;
        export type WithMembershipsStatuses = Components.Schemas.UserMembershipStatus[];
        export type OptionalWithUsersIds = Components.Schemas.UsersUUIDS;
        export type Limit = Components.Schemas.Limit;
        export type Start = Components.Schemas.Start;
        export type UsersSortBy = [
            Components.Schemas.UsersSortByValue,
            ...Components.Schemas.UsersSortByValue[]
        ];
        export type UserId = Components.Schemas.UserUUID;
        export type Date = Components.Schemas.Date;
        export type IngestionStage = Components.Schemas.IngestionStage;
        export type Cookie = string;
        export type NotificationId = Components.Schemas.NotificationUUID;
        export type AttachmentFileType = Enums.AttachmentFileType;
        export type AttachmentId = Components.Schemas.AttachmentUUID;
        export type FileName = string;
        export type FileSize = number;
        export type ImageFileType = Enums.ImageFileType;
        export type ImageId = Components.Schemas.ImageUUID;
        export type RunId = Components.Schemas.UUID;
        export type PreferenceLevel = Components.Schemas.PreferenceLevel;
        export type ClientId = string;
        export type RedirectURI = string;
        export type ResponseType = Enums.ResponseType;
        export type Scope = string;
        export type State = string;
        export type XSdkVersion = string;
        export type XApplicationVersion = string;
        export type XApiVersion = string;
        export type DeleteUserOrganisationMembership2 = string;
        export type GetOpenAPI0 = string[];
        export type PostUser0 = string;
        export type PutOrganisationFactoryEvent3 = boolean;
        export type PutOrganisationFactoryEvent4 = boolean;
    }
    export namespace PathItems {
        export namespace AlertsalertId {
            export import Delete = Components.Operations.DeleteAlert;
        }
        export namespace ApplicationsapplicationId {
            export import Delete = Components.Operations.DeleteApplication;
        }
        export namespace InterventionsinterventionId {
            export import Delete = Components.Operations.DeleteIntervention;
        }
        export namespace ProjectsprojectId {
            export import Delete = Components.Operations.DeleteProject;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlert;
            export import Get = Components.Operations.GetUserOrganisationAlert;
            export import Put = Components.Operations.PutUserOrganisationAlert;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdattachmentsattachmentId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlertAttachment;
            export import Put = Components.Operations.PutUserOrganisationAlertAttachment;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdimagesimageId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlertImage;
            export import Put = Components.Operations.PutUserOrganisationAlertImage;
        }
        export namespace UsersuserIdorganisationsorganisationIdapplicationsapplicationId {
            export import Delete = Components.Operations.DeleteUserOrganisationApplication;
            export import Put = Components.Operations.PutUserOrganisationApplication;
        }
        export namespace UsersuserIdorganisationsorganisationIdinterventionsinterventionId {
            export import Delete = Components.Operations.DeleteUserOrganisationIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdinterventionsinterventionIdimagesimageId {
            export import Delete = Components.Operations.DeleteUserOrganisationInterventionImage;
            export import Put = Components.Operations.PutUserOrganisationInterventionImage;
        }
        export namespace UsersuserIdorganisationsorganisationIdmembershipscollaboratorId {
            export import Delete = Components.Operations.DeleteUserOrganisationMembership;
        }
        export namespace UsersuserIdorganisationsorganisationIdprojectsprojectId {
            export import Delete = Components.Operations.DeleteUserOrganisationProject;
            export import Put = Components.Operations.PutUserOrganisationProject;
        }
        export namespace UsersuserIdorganisationsorganisationIdsensorssensorIdseriesvalueName {
            export import Delete = Components.Operations.DeleteUserOrganisationSensorSeries;
        }
        export namespace Alertsstats {
            export import Get = Components.Operations.GetAlertsStats;
        }
        export namespace Authprofile {
            export import Get = Components.Operations.GetAuthProfile;
        }
        export namespace Me {
            export import Get = Components.Operations.GetMySelf;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryId {
            export import Get = Components.Operations.GetOrganisationFactory;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdalertsstats {
            export import Get = Components.Operations.GetOrganisationFactoryAlertsStats;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdassetsassetId {
            export import Get = Components.Operations.GetOrganisationFactoryAsset;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdassets {
            export import Get = Components.Operations.GetOrganisationFactoryAssets;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdlabels {
            export import Get = Components.Operations.GetOrganisationFactoryDataLabels;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdevents {
            export import Get = Components.Operations.GetOrganisationFactoryEvents;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdinterventionsinterventionId {
            export import Get = Components.Operations.GetOrganisationFactoryIntervention;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdinterventions {
            export import Get = Components.Operations.GetOrganisationFactoryInterventions;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdreports {
            export import Get = Components.Operations.GetOrganisationFactoryReports;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdsensorssensorId {
            export import Get = Components.Operations.GetOrganisationFactorySensor;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdsensors {
            export import Get = Components.Operations.GetOrganisationFactorySensors;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdtrends {
            export import Get = Components.Operations.GetOrganisationFactoryTrends;
        }
        export namespace OrganisationsorganisationIdprojectsprojectId {
            export import Get = Components.Operations.GetOrganisationProject;
        }
        export namespace OrganisationsorganisationIdprojects {
            export import Get = Components.Operations.GetOrganisationProjects;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateData;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateEventData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateEventData;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateEventRangeData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateEventRangeData;
        }
        export namespace OrganisationsorganisationIdsensorsdata {
            export import Get = Components.Operations.GetOrganisationSensorsData;
        }
        export namespace OrganisationsorganisationIdsensorseventData {
            export import Get = Components.Operations.GetOrganisationSensorsEventData;
        }
        export namespace OrganisationsorganisationIdsensorseventRangeDataSchema {
            export import Get = Components.Operations.GetOrganisationSensorsEventRangeData;
        }
        export namespace OrganisationsorganisationIdsearch {
            export import Get = Components.Operations.GetOrganisationUniversalSearch;
        }
        export namespace ReportsreportId {
            export import Put = Components.Operations.PutReport;
        }
        export namespace Search {
            export import Get = Components.Operations.GetUniversalSearch;
        }
        export namespace UsersuserId {
            export import Get = Components.Operations.GetUser;
            export import Put = Components.Operations.PutUser;
        }
        export namespace UsersuserIdfactories {
            export import Get = Components.Operations.GetUserFactories;
        }
        export namespace UsersuserIdnotifications {
            export import Get = Components.Operations.GetUserNotifications;
        }
        export namespace UsersuserIdorganisationsorganisationId {
            export import Get = Components.Operations.GetUserOrganisation;
            export import Put = Components.Operations.PutUserOrganisation;
        }
        export namespace UsersuserIdorganisationsorganisationIdalerts {
            export import Get = Components.Operations.GetUserOrganisationAlerts;
        }
        export namespace UsersuserIdorganisationsorganisationIdapplications {
            export import Get = Components.Operations.GetUserOrganisationApplications;
            export import Post = Components.Operations.PostUserOrganisationApplication;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactories {
            export import Get = Components.Operations.GetUserOrganisationFactories;
            export import Post = Components.Operations.PostUserOrganisationFactory;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdpreferences {
            export import Get = Components.Operations.GetUserOrganisationFactoryPreferences;
        }
        export namespace UsersuserIdorganisationsorganisationIdtasks {
            export import Get = Components.Operations.GetUserOrganisationTasks;
        }
        export namespace UsersuserIdorganisationsorganisationIdusers {
            export import Get = Components.Operations.GetUserOrganisationUsers;
        }
        export namespace UsersuserIdorganisations {
            export import Get = Components.Operations.GetUserOrganisations;
            export import Post = Components.Operations.PostUserOrganisation;
        }
        export namespace Users {
            export import Post = Components.Operations.PostUser;
        }
        export namespace Authlogin {
            export import Post = Components.Operations.PostAuthLogin;
        }
        export namespace Authlogout {
            export import Post = Components.Operations.PostAuthLogout;
        }
        export namespace AuthchangePassword {
            export import Post = Components.Operations.PostAuthPasswordChange;
        }
        export namespace Authrefresh {
            export import Post = Components.Operations.PostAuthRefresh;
        }
        export namespace Authverify {
            export import Post = Components.Operations.PostAuthVerify;
        }
        export namespace Oauth2Token {
            export import Post = Components.Operations.PostOAuth2Token;
        }
        export namespace OrganisationsorganisationIddataprojectCode {
            export import Post = Components.Operations.PostOrganisationData;
        }
        export namespace Oauth2Reset {
            export import Post = Components.Operations.PostPasswordChangeRequest;
        }
        export namespace UsersuserIdinvitationsresponse {
            export import Post = Components.Operations.PostUserInvitationResponse;
        }
        export namespace UsersuserIdorganisationsorganisationIdassetsassetIdsensors {
            export import Post = Components.Operations.PostUserOrganisationAssetSensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdassets {
            export import Post = Components.Operations.PostUserOrganisationFactoryAsset;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdinterventions {
            export import Post = Components.Operations.PostUserOrganisationFactoryIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdsensors {
            export import Post = Components.Operations.PostUserOrganisationFactorySensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdinvitations {
            export import Post = Components.Operations.PostUserOrganisationInvitation;
        }
        export namespace UsersuserIdorganisationsorganisationIdinvitationfollowup {
            export import Post = Components.Operations.PostUserOrganisationInvitationFollowup;
        }
        export namespace OrganisationsorganisationIdusersuserIdnotificationsnotificationIdread {
            export import Post = Components.Operations.PostUserOrganisationNotificationRead;
        }
        export namespace UsersuserIdorganisationsorganisationIdprojects {
            export import Post = Components.Operations.PostUserOrganisationProject;
        }
        export namespace AttachmentsattachmentId {
            export import Put = Components.Operations.PutAttachment;
        }
        export namespace ImagesimageId {
            export import Put = Components.Operations.PutImage;
        }
        export namespace NotificationsnotificationId {
            export import Put = Components.Operations.PutNotificationEvent;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdeventseventId {
            export import Put = Components.Operations.PutOrganisationFactoryEvent;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdfeedback {
            export import Put = Components.Operations.PutUserOrganisationAlertFeedback;
        }
        export namespace UsersuserIdorganisationsorganisationIdassetsassetIdsensorssensorId {
            export import Put = Components.Operations.PutUserOrganisationAssetSensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryId {
            export import Put = Components.Operations.PutUserOrganisationFactory;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdassetsassetId {
            export import Put = Components.Operations.PutUserOrganisationFactoryAsset;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdinterventionsinterventionId {
            export import Put = Components.Operations.PutUserOrganisationFactoryIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdpreferenceslevel {
            export import Put = Components.Operations.PutUserOrganisationFactoryPreferences;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdsensorssensorId {
            export import Put = Components.Operations.PutUserOrganisationFactorySensor;
        }
        export namespace Oauth2Authorize {
            export import Get = Components.Operations.GetOAuth2Authorize;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type Aveva = Components.Schemas.RequestBodiesAvevaBody0;
        export type PowerTrackSyncConfig = Components.Schemas.RequestBodiesPowerTrackSyncConfigBody0;
        export type OpenSearchSnapshot = Components.Schemas.RequestBodiesOpenSearchSnapshotBody0;
        export type Attachment = Components.Schemas.BinaryModel | Components.Schemas.BinaryModel;
        export type Image = Components.Schemas.BinaryModel | Components.Schemas.BinaryModel;
        export type Report = Components.Schemas.ReportModel;
        export type PutUserOrganisationAlert = Components.Schemas.AlertModel;
        export type PutUserOrganisationApplication = Components.Schemas.ApplicationModel;
        export type PutUserOrganisationProject = Components.Schemas.ProjectModel;
        export type PutUser = Components.Schemas.UserModel;
        export type PutUserOrganisation = Components.Schemas.OrganisationModel;
        export type PostUserOrganisationApplication = Components.Schemas.ApplicationModel;
        export type PostUserOrganisationFactory = Components.Schemas.FactoryModel;
        export type PostUserOrganisation = Components.Schemas.OrganisationModel;
        export type PostUser = Components.Schemas.UserModel;
        export type PostAuthLogin = Components.Schemas.RequestBodiesPostAuthLoginBody0;
        export type PostAuthPasswordChange = Components.Schemas.RequestBodiesPostAuthPasswordChangeBody0;
        export type PostAuthRefresh = Components.Schemas.RequestBodiesPostAuthRefreshBody0;
        export type PostAuthVerify = Components.Schemas.RequestBodiesPostAuthVerifyBody0;
        export type PostOAuth2Token = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostOrganisationData = Components.Schemas.InputData;
        export type PostPasswordChangeRequest = Components.Schemas.RequestBodiesPostPasswordChangeRequestBody0;
        export type PostUserInvitationResponse = Components.Schemas.RequestBodiesPostUserInvitationResponseBody0;
        export type PostUserOrganisationAssetSensor = Components.Schemas.SensorModel;
        export type PostUserOrganisationFactoryAsset = Components.Schemas.AssetModel;
        export type PostUserOrganisationFactoryIntervention = Components.Schemas.InterventionModel;
        export type PostUserOrganisationFactorySensor = Components.Schemas.SensorModel;
        export type PostUserOrganisationInvitation = Components.Schemas.UserOrganisationInvitation;
        export type PostUserOrganisationInvitationFollowup = Components.Schemas.RequestBodiesPostUserOrganisationInvitationFollowupBody0;
        export type PostUserOrganisationProject = Components.Schemas.ProjectModel;
        export type PutNotificationEvent = Components.Schemas.NotificationEvent;
        export type PutOrganisationFactoryEvent = Components.Schemas.EventModel;
        export type PutUserOrganisationAlertFeedback = Components.Schemas.RequestBodiesPutUserOrganisationAlertFeedbackBody0;
        export type PutUserOrganisationAssetSensor = Components.Schemas.SensorModel;
        export type PutUserOrganisationFactory = Components.Schemas.FactoryModel;
        export type PutUserOrganisationFactoryAsset = Components.Schemas.AssetModel;
        export type PutUserOrganisationFactoryIntervention = Components.Schemas.InterventionModel;
        export type PutUserOrganisationFactoryPreferences = Components.Schemas.PartialPreferencesModel;
        export type PutUserOrganisationFactorySensor = Components.Schemas.SensorModel;
    }
    export namespace Headers {
        export type PostAuthVerify200HeadersSetCookie = string[];
    }
    export namespace Schemas {
        export type RequestBodiesAvevaBody0 = {
            projectCode: Components.Schemas.ProjectCode;
        };
        export type RequestBodiesPowerTrackSyncConfigBody0 = {
            projectCode: Components.Schemas.ProjectCode;
        };
        export type RequestBodiesOpenSearchSnapshotBody0 = {
            operation: Enums.Operation;
        };
        export type BinaryModel = string;
        export type ReportModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.ReportUUID;
            attachmentId?: Components.Schemas.AttachmentUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            authorId: Components.Schemas.UserUUID;
            factoryId: Components.Schemas.FactoryUUID;
            data: Components.Schemas.ReportData;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        };
        export type AlertModel = Components.Schemas.SynchronizableItem & Components.Schemas.BaseAlertModel;
        export type ApplicationModel = {
            id?: Components.Schemas.ApplicationUUID;
            authorId?: Components.Schemas.UserUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            data: Components.Schemas.ApplicationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            secret?: string;
        };
        export type ProjectModel = {
            id?: Components.Schemas.ProjectUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            author?: Components.Schemas.UserUUID;
            data: Components.Schemas.ProjectData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type UserModel = {
            id?: Components.Schemas.UserUUID;
            roles?: Components.Schemas.Role[];
            password?: string;
            memberships?: Components.Schemas.UserMembership[];
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            emailStatus?: Components.Schemas.EmailStatus;
        };
        export type OrganisationModel = {
            id?: Components.Schemas.OrganisationUUID;
            factoriesIds?: Components.Schemas.FactoriesUUIDS;
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type FactoryModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.FactoryUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            rootAssetsIds?: Components.Schemas.AssetsUUIDS;
            linkedOrganisationsIds?: Components.Schemas.OrganisationsUUIDS;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type RequestBodiesPostAuthLoginBody0 = {
            username: string;
            password: string;
            scope?: string;
            remember?: boolean;
        };
        export type RequestBodiesPostAuthPasswordChangeBody0 = {
            token: string;
            oldPassword?: string;
            newPassword: string;
        };
        export type RequestBodiesPostAuthRefreshBody0 = {
            scope?: string;
            remember?: boolean;
        };
        export type RequestBodiesPostAuthVerifyBody0 = {
            verifyToken: string;
        };
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type InputData = Components.Schemas.GroupedInputData | Components.Schemas.DenormalizedInputData;
        export type RequestBodiesPostPasswordChangeRequestBody0 = {
            email: string;
        };
        export type RequestBodiesPostUserInvitationResponseBody0 = {
            accepted: boolean;
            organisationId: Components.Schemas.OrganisationUUID;
        };
        export type SensorModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.SensorUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            assetId?: Components.Schemas.AssetUUID;
            data: Components.Schemas.SensorData;
            stats?: Components.Schemas.SensorStats;
            inferredType?: Components.Schemas.SensorInferredType;
            firstEmission?: Components.Schemas.FirstEmission;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            queries?: {
                [pattern: string]: Components.Schemas.SensorQuery;
            };
        };
        export type AssetModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.AssetUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            childrenIds?: Components.Schemas.AssetsUUIDS;
            ancestorsIds?: Components.Schemas.AssetsUUIDS;
            metrics?: Components.Schemas.LineMetrics;
            currentConfiguration?: Components.Schemas.AssetConfiguration;
            currentPhase?: Components.Schemas.ManufacturingPhase;
            currentCycle?: Components.Schemas.ManufacturingCycle;
            powerState?: Enums.PowerState;
            operatingState?: Enums.OperatingState;
            healthState?: Enums.HealthState;
            data: Components.Schemas.AssetData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type InterventionModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.InterventionUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            authorId?: Components.Schemas.UserUUID;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            qualifiedAt?: Components.Schemas.Date;
            reportedAt?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
            taskStatus?: Components.Schemas.TaskStatus;
            data: Components.Schemas.InterventionData;
        };
        export type UserOrganisationInvitation = {
            email: string;
            givenName: string;
            familyName: string;
            membership: Components.Schemas.FactoryScopedUserOrganisationMembership | Components.Schemas.GlobalUserOrganisationMembership;
        };
        export type RequestBodiesPostUserOrganisationInvitationFollowupBody0 = {
            userId: Components.Schemas.UserUUID;
        };
        export type NotificationEvent = Components.Schemas.AlertDeletedEvent | Components.Schemas.AlertUpsertedEvent | Components.Schemas.AlgorithmModelUpdatedEvent | Components.Schemas.ApplicationDeletedEvent | Components.Schemas.ApplicationUpsertedEvent | Components.Schemas.AssetDeletedEvent | Components.Schemas.AssetUpsertedEvent | Components.Schemas.EmailStatusUpdatedEvent | Components.Schemas.FactoryDeletedEvent | Components.Schemas.FactoryUpsertedEvent | Components.Schemas.InterventionDeletedEvent | Components.Schemas.InterventionUpsertedEvent | Components.Schemas.MembershipCancelledEvent | Components.Schemas.OrganisationDeletedEvent | Components.Schemas.OrganisationPreferencesUpsertedEvent | Components.Schemas.OrganisationUpsertedEvent | Components.Schemas.OrganisationUserUpdatedEvent | Components.Schemas.PasswordChangeRequestedEvent | Components.Schemas.ProjectDeletedEvent | Components.Schemas.ProjectUpsertedEvent | Components.Schemas.ReportDeletedEvent | Components.Schemas.ReportUpsertedEvent | Components.Schemas.SensorDeletedEvent | Components.Schemas.SensorSeriesDeletedEvent | Components.Schemas.SensorUpsertedEvent | Components.Schemas.UserCreatedEvent | Components.Schemas.UserFeedbackUpdatedEvent | Components.Schemas.UserInvitedInOrganisationEvent | Components.Schemas.UserUpdatedEvent | Components.Schemas.VirtualSensorComputeRequestedEvent;
        export type EventModel = Components.Schemas.SegmentedAlertDetectionPredictEventModel | Components.Schemas.ForecastLearnEventModel | Components.Schemas.RealtimeAlertEventSchemaModel | Components.Schemas.DriftDetectionEventModel | Components.Schemas.ForecastPredictEventModel | Components.Schemas.DSPADPredictEventModel | Components.Schemas.ProcessEventSchemaModel | Components.Schemas.AnomalyEventModel | Components.Schemas.DSPADDataAnalysisEventModel | Components.Schemas.CycleEventModel | Components.Schemas.PhaseEventModel;
        export type RequestBodiesPutUserOrganisationAlertFeedbackBody0 = {
            userFeedback: Components.Schemas.UserFeedback;
        };
        export type PartialPreferencesModel = {
            displayParentName?: boolean;
            sensorDisplayExternalId?: boolean;
            sensorDisplaySerie?: Components.Schemas.SensorDisplaySerie;
            useFactoryTimeZone?: boolean;
            showGraphLabels?: boolean;
            showGraphConfigurations?: boolean;
            showGraphCycles?: boolean;
            showGraphPhases?: boolean;
        };
        export type AlertUUID = string;
        export type SortDirection = Enums.SortDirection;
        export type Date = string;
        export type AlertsUUIDS = Components.Schemas.AlertUUID[];
        export type AlertStatuses = [
            Components.Schemas.AlertStatus,
            ...Components.Schemas.AlertStatus[]
        ];
        export type AlertsSortByValue = Enums.AlertsSortByValue;
        export type ApplicationUUID = string;
        export type ApplicationsUUIDS = Components.Schemas.ApplicationUUID[];
        export type ApplicationsSortByValue = Enums.ApplicationsSortByValue;
        export type AssetUUID = string;
        export type AssetsUUIDS = Components.Schemas.AssetUUID[];
        export type AssetType = Enums.AssetType;
        export type AssetsSortByValue = Enums.AssetsSortByValue;
        export type Cursor = string;
        export type EventUUID = string;
        export type NonEmptySensorsUUIDS = [
            Components.Schemas.SensorUUID,
            ...Components.Schemas.SensorUUID[]
        ];
        export type NonEmptyValuesNames = [
            Components.Schemas.ValueName,
            ...Components.Schemas.ValueName[]
        ];
        export type EventsUUIDS = Components.Schemas.EventUUID[];
        export type EventTypes = Components.Schemas.EventType[];
        export type FactoriesUUIDS = Components.Schemas.FactoryUUID[];
        export type OrganisationsUUIDS = Components.Schemas.OrganisationUUID[];
        export type Size = number;
        export type FactoryUUID = string;
        export type FactoriesSortByValue = Enums.FactoriesSortByValue;
        export type InterventionUUID = string;
        export type InterventionsUUIDS = Components.Schemas.InterventionUUID[];
        export type InterventionsSortByValue = Enums.InterventionsSortByValue;
        export type MockName = string;
        export type OrganisationUUID = string;
        export type OrganisationsSortByValue = Enums.OrganisationsSortByValue;
        export type ProjectUUID = string;
        export type ProjectsUUIDS = Components.Schemas.ProjectUUID[];
        export type ProjectCode = string;
        export type ProjectsSortByValue = Enums.ProjectsSortByValue;
        export type ReportsUUIDS = Components.Schemas.ReportUUID[];
        export type ReportUUID = string;
        export type ReportsSortByValue = Enums.ReportsSortByValue;
        export type AlertTriggerTypes = Components.Schemas.AlertType[];
        export type SensorsUUIDS = Components.Schemas.SensorUUID[];
        export type SensorUUID = string;
        export type SensorsSortByValue = Enums.SensorsSortByValue;
        export type ValueName = string;
        export type Aggregations = Components.Schemas.Aggregation[];
        export type Granularity = Enums.Granularity;
        export type TimeZone = string;
        export type AssetConfigurations = Components.Schemas.AssetConfiguration[];
        export type Tags = Components.Schemas.LabelValue[];
        export type ManufacturingCycles = Components.Schemas.ManufacturingCycle[];
        export type ManufacturingPhases = Components.Schemas.ManufacturingPhase[];
        export type ValuedLabelName = string;
        export type LabelValue = string;
        export type EventField = Enums.EventField;
        export type EventFields = Components.Schemas.EventField[];
        export type TasksSortByValue = Enums.TasksSortByValue;
        export type Priorities = [
            Components.Schemas.Priority,
            ...Components.Schemas.Priority[]
        ];
        export type TasksStatuses = [
            Components.Schemas.TaskStatus,
            ...Components.Schemas.TaskStatus[]
        ];
        export type TasksTypes = [
            Components.Schemas.TaskType,
            ...Components.Schemas.TaskType[]
        ];
        export type SearchType = Enums.SearchType;
        export type UUID = string;
        export type SearchFilterType = Enums.SearchFilterType;
        export type NotificationTypes = Components.Schemas.NotificationType[];
        export type UserMembershipStatus = Enums.UserMembershipStatus;
        export type UsersUUIDS = Components.Schemas.UserUUID[];
        export type Limit = 10 | 50 | 100 | 500 | 1000;
        export type Start = number;
        export type UsersSortByValue = Enums.UsersSortByValue;
        export type UserUUID = string;
        export type IngestionStage = Enums.IngestionStage;
        export type NotificationUUID = string;
        export type AttachmentUUID = string;
        export type ImageUUID = string;
        export type PreferenceLevel = Enums.PreferenceLevel;
        export type AlertItem = {
            item: Components.Schemas.AlertUUID;
            alerts: Components.Schemas.AlertModelHash;
            interventions?: Components.Schemas.InterventionModelHash;
            sensors?: Components.Schemas.SensorModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            images?: Components.Schemas.ImageModelHash;
        };
        export type AlertsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.AlertsUUIDS;
            alerts: Components.Schemas.AlertModelHash;
            interventions?: Components.Schemas.InterventionModelHash;
            sensors?: Components.Schemas.SensorModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            images?: Components.Schemas.ImageModelHash;
        };
        export type SensorsEventData = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesTasksCollectionBody0 = {
            total: number;
            stats: {
                alert?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
                intervention?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
                _all?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
            };
            items: Components.Schemas.TasksModel;
        };
        export type AllPreferencesModel = {
            default: Components.Schemas.DefaultPreferencesModel;
            organisation: Components.Schemas.PartialPreferencesModel;
            factory?: Components.Schemas.PartialPreferencesModel;
            user: Components.Schemas.PartialPreferencesModel;
        };
        export type ApplicationItem = {
            item: Components.Schemas.ApplicationUUID;
            applications: Components.Schemas.ApplicationModelHash;
        };
        export type ProjectItem = {
            item: Components.Schemas.ProjectUUID;
            projects: Components.Schemas.ProjectModelHash;
        };
        export type AlertsStats = Components.Schemas.AlertsStat[];
        export type UserItem = {
            item: Components.Schemas.UserUUID;
            users: Components.Schemas.UserModelHash;
        };
        export type ResponsesgetOpenAPI200Body0 = {};
        export type FactoryItem = {
            item: Components.Schemas.FactoryUUID;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type AlertsStat = {
            organisationId: Components.Schemas.OrganisationUUID;
            stats: {
                discarded: number;
                fixed: number;
                closed: number;
                open: number;
                total: number;
            };
        };
        export type AssetItem = {
            item: Components.Schemas.AssetUUID;
            assets: Components.Schemas.AssetModelHash;
        };
        export type AssetsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.AssetsUUIDS;
            assets: Components.Schemas.AssetModelHash;
        };
        export type ResponsesgetOrganisationFactoryDataLabels200Body0 = {
            key?: string;
            doc_count?: number;
        }[];
        export type EventsItems = {
            total: number;
            cursors: {
                before?: Components.Schemas.Cursor;
                since?: Components.Schemas.Cursor;
            };
            items: Components.Schemas.EventsUUIDS;
            events: Components.Schemas.EventModelHash;
        };
        export type InterventionItem = {
            item: Components.Schemas.InterventionUUID;
            interventions: Components.Schemas.InterventionModelHash;
            alerts?: Components.Schemas.AlertModelHash;
            images?: Components.Schemas.ImageModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            users?: Components.Schemas.UserModelHash;
        };
        export type InterventionsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.InterventionsUUIDS;
            interventions: Components.Schemas.InterventionModelHash;
            alerts?: Components.Schemas.AlertModelHash;
            images?: Components.Schemas.ImageModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            users?: Components.Schemas.UserModelHash;
        };
        export type ReportsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ReportsUUIDS;
            reports: Components.Schemas.ReportModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
        };
        export type SensorItem = {
            item: Components.Schemas.SensorUUID;
            sensors: Components.Schemas.SensorModelHash;
            assets?: Components.Schemas.AssetModelHash;
        };
        export type SensorsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.SensorsUUIDS;
            sensors: Components.Schemas.SensorModelHash;
            assets?: Components.Schemas.AssetModelHash;
        };
        export type TrendItems = {
            total: number;
            items: Components.Schemas.UUIDS;
            trends: Components.Schemas.TrendModelHash;
        };
        export type ProjectsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ProjectsUUIDS;
            projects: Components.Schemas.ProjectModelHash;
        };
        export type ResponsesgetOrganisationSensorsAggregateData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsAggregateEventData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsAggregateEventRangeData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            measures: Components.Schemas.Measures;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
        };
        export type ResponsesgetOrganisationSensorsEventRangeData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.RangeMeasures;
        };
        export type ResponsesgetOrganisationUniversalSearch200Body0 = {
            results?: {
                id: Components.Schemas.UserUUID | Components.Schemas.FactoryUUID | Components.Schemas.ProjectUUID | Components.Schemas.AssetUUID | Components.Schemas.ApplicationUUID | Components.Schemas.InterventionUUID | Components.Schemas.AlertUUID | Components.Schemas.ReportUUID | Components.Schemas.SensorUUID | Components.Schemas.OrganisationUUID;
                type: Components.Schemas.SearchType;
                snippet?: string;
            }[][];
            suggestions?: {}[];
            start?: number;
            total?: number;
        };
        export type ResponsesgetUniversalSearch200Body0 = {
            results?: {
                id: Components.Schemas.UserUUID | Components.Schemas.FactoryUUID | Components.Schemas.ProjectUUID | Components.Schemas.AssetUUID | Components.Schemas.ApplicationUUID | Components.Schemas.InterventionUUID | Components.Schemas.AlertUUID | Components.Schemas.ReportUUID | Components.Schemas.SensorUUID | Components.Schemas.OrganisationUUID;
                type: Components.Schemas.SearchType;
                snippet?: string;
            }[][];
            suggestions?: {}[];
            start?: number;
            total?: number;
        };
        export type FactoriesItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.FactoriesUUIDS;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type NotificationsItems = {
            total: Components.Schemas.Total;
            items: Components.Schemas.NotificationsUUIDS;
            notifications: Components.Schemas.NotificationModelHash;
        };
        export type OrganisationItem = {
            item: Components.Schemas.OrganisationUUID;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type ApplicationsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ApplicationsUUIDS;
            applications: Components.Schemas.ApplicationModelHash;
        };
        export type UsersItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.UsersUUIDS;
            users: Components.Schemas.UserModelHash;
        };
        export type OrganisationsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.OrganisationsUUIDS;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type ResponsespostAuthLogin200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: string;
            token_type?: string;
        };
        export type ResponsespostAuthPasswordChange200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: number;
            token_type?: string;
        };
        export type ResponsespostAuthRefresh200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: string;
            token_type?: string;
        };
        export type ResponsespostAuthVerify200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: number;
            token_type?: string;
        };
        export type ResponsespostOAuth2Token200Body0 = {
            access_token: string;
            token_type: Enums.TokenType;
            expires_in?: number;
            refresh_token?: string;
        };
        export type ResponsespostOAuth2Token400Body0 = {
            error: Enums.Error;
            error_description?: string;
            error_uri?: string;
        };
        export type ResponsespostUserOrganisationInvitation201Body0 = {
            user: Components.Schemas.UserItem;
            token: string;
        };
        export type ResponsesgetPing200Body0 = {
            pong?: "pong";
        };
        export type SynchronizableItem = {
            syncMode?: Components.Schemas.NoSyncMode;
            externalId?: string;
        } | {
            syncMode: Components.Schemas.DoSyncMode;
            externalId?: string;
        };
        export type ReportData = {
            name: string;
            description: string;
        };
        export type BaseAlertModel = {
            id?: Components.Schemas.AlertUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            assetId?: Components.Schemas.AssetUUID;
            assignations?: Components.Schemas.AlertAssignations;
            interventionId?: Components.Schemas.InterventionUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            sensorsIds?: Components.Schemas.SensorsUUIDS;
            sensorsValues?: Components.Schemas.ValuesNames;
            eventsIds?: Components.Schemas.EventsUUIDS;
            recurringAlertId?: Components.Schemas.AlertUUID;
            startAt?: Components.Schemas.Date;
            endAt?: Components.Schemas.Date;
            taskStatus?: Components.Schemas.TaskStatus;
            status?: Components.Schemas.AlertStatus;
            usersFeedback?: Components.Schemas.UsersFeedback;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            data?: Components.Schemas.BaseAlertData;
        };
        export type ApplicationData = {
            name: string;
            description: string;
            allowedScopes: [
                Components.Schemas.Scope,
                ...Components.Schemas.Scope[]
            ];
            allowedGrantTypes: [
                Components.Schemas.GrantType,
                ...Components.Schemas.GrantType[]
            ];
            callbackUrl: string;
            isActive: boolean;
        };
        export type ProjectData = {
            name: string;
            description: string;
            projectCode: Components.Schemas.ProjectCode;
            algorithms: Components.Schemas.MLAlgorithms;
            bridge: {
                type: "push";
            } | {
                type: "pull";
                handler?: string;
                schedule?: string;
            };
            ingestion?: Components.Schemas.ProjectIngestion;
            indexation?: Components.Schemas.ProjectIndexation;
        };
        export type Role = Enums.Role;
        export type UserMembership = (Components.Schemas.FactoryScopedUserOrganisationMembership | Components.Schemas.GlobalUserOrganisationMembership) & {
            id: Components.Schemas.OrganisationUUID;
            status: Components.Schemas.UserMembershipStatus;
            lastInvitationDate: Components.Schemas.Date;
            canReinvite?: boolean;
        };
        export type UserData = {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type EmailStatus = Enums.EmailStatus;
        export type OrganisationData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type FactoryData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type PasswordRequestBody = {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        export type AuthorizationCodeRequestBody = {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        export type ClientCredentialsRequestBody = {
            grant_type: "client_credentials";
            scope?: string;
        };
        export type RefreshTokenRequestBody = {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        export type VerifyTokenRequestBody = {
            grant_type: "verify_token";
            verify_token: Components.Schemas.VerifyToken;
        };
        export type PasswordChangeBody = {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        export type GroupedInputData = {
            date: string;
            values: {
                sensorId: string;
                valueName?: Components.Schemas.ValueName;
                value: number;
                precision?: Components.Schemas.ValuePrecision;
                labels?: Components.Schemas.Tags;
            }[];
        };
        export type DenormalizedInputData = {
            date: string;
            sensorId: string;
            valueName?: Components.Schemas.ValueName;
            value: number;
            precision?: Components.Schemas.ValuePrecision;
            labels?: Components.Schemas.Tags;
        }[];
        export type SensorData = {
            name: string;
            variables: Components.Schemas.SensorVariables;
            overridenType?: {
                [pattern: string]: Components.Schemas.SensorDataType;
            };
            series: [
                Components.Schemas.SensorSerie,
                ...Components.Schemas.SensorSerie[]
            ];
            alertsTriggers: {
                [pattern: string]: [
                    Components.Schemas.AlertTrigger,
                    ...Components.Schemas.AlertTrigger[]
                ];
            };
        };
        export type SensorStats = {
            [pattern: string]: {
                ever: {
                    cardinality?: number;
                    min: number;
                    max: number;
                    percentiles?: {
                        "1.0"?: number;
                        "5.0"?: number;
                        "25.0"?: number;
                        "50.0"?: number;
                        "75.0"?: number;
                        "95.0"?: number;
                        "99.0"?: number;
                    };
                };
                month?: Components.Schemas.SensorTimeBucketStats;
                day?: Components.Schemas.SensorTimeBucketStats;
                hour?: Components.Schemas.SensorTimeBucketStats;
            };
        };
        export type SensorInferredType = {
            [pattern: string]: Components.Schemas.SensorDataType;
        };
        export type FirstEmission = {
            [pattern: string]: Components.Schemas.Date;
        };
        export type SensorQuery = {
            aggregationType: Enums.AggregationType;
            template: string;
            pace: number;
            timeFrame: {
                unit: Enums.Unit;
                value: number;
            };
            timeZone?: Components.Schemas.TimeZone;
        };
        export type LineMetrics = {
            cadency?: {
                value: number;
                unit: string;
                status: Components.Schemas.LineMetricsStatus;
            };
            output?: {
                value: number;
                goal?: number;
                unit: string;
                status: Components.Schemas.LineMetricsStatus;
            };
        };
        export type AssetConfiguration = string;
        export type ManufacturingPhase = string;
        export type ManufacturingCycle = string;
        export type AssetData = Components.Schemas.AssetBaseData & (Components.Schemas.AssetAreaData | Components.Schemas.AssetLineData | Components.Schemas.AssetMachineData | Components.Schemas.AssetPartData);
        export type ImagesUUIDS = Components.Schemas.ImageUUID[];
        export type AttachmentsUUIDS = Components.Schemas.AttachmentUUID[];
        export type TaskStatus = Enums.TaskStatus;
        export type InterventionData = {
            assignedUsersIds: Components.Schemas.NonEmptyUsersUUIDS;
            assetsIds: Components.Schemas.AssetsUUIDS;
            archived: boolean;
            pauseAlertsTriggers?: boolean;
            type?: Components.Schemas.InterventionType;
            priority: Components.Schemas.Priority;
            qualification?: Components.Schemas.InterventionQualification;
            report?: Components.Schemas.InterventionReport;
        };
        export type FactoryScopedUserOrganisationMembership = {
            roles: Components.Schemas.UserOrganisationRoles;
            factories: {
                id: Components.Schemas.FactoryUUID;
                roles: Components.Schemas.UserFactoryRoles;
                status?: Components.Schemas.UserMembershipStatus;
                lastInvitationDate?: Components.Schemas.Date;
            }[];
        };
        export type GlobalUserOrganisationMembership = {
            roles: Components.Schemas.UserFactoryRoles;
        };
        export type AlertDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlertDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlertEventData;
        };
        export type AlertUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlertUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlertEventData;
        };
        export type AlgorithmModelUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlgorithmModelUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlgorithmModelEventData;
        };
        export type ApplicationDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ApplicationDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ApplicationEventData;
        };
        export type ApplicationUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ApplicationUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ApplicationEventData;
        };
        export type AssetDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AssetDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AssetEventData;
        };
        export type AssetUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AssetUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AssetEventData;
        };
        export type EmailStatusUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.EmailStatusUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.EmailStatusUpdatedEventData;
        };
        export type FactoryDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.FactoryDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.FactoryEventData;
        };
        export type FactoryUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.FactoryUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.FactoryEventData;
        };
        export type InterventionDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.InterventionDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.InterventionEventData;
        };
        export type InterventionUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.InterventionUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.InterventionEventData;
        };
        export type MembershipCancelledEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.MembershipCancelledEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.MembershipCancelledEventData;
        };
        export type OrganisationDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationPreferencesUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationPreferencesUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationPreferencesUpsertedEventData;
        };
        export type OrganisationUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationUserUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationUserUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationUserUpdatedEventData;
        };
        export type PasswordChangeRequestedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.PasswordChangeRequestedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.PasswordChangeRequestedEventData;
        };
        export type ProjectDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ProjectDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ProjectEventData;
        };
        export type ProjectUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ProjectUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ProjectEventData;
        };
        export type ReportDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ReportDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ReportEventData;
        };
        export type ReportUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ReportUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ReportEventData;
        };
        export type SensorDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorEventData;
        };
        export type SensorSeriesDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorSeriesDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorSeriesDeletedEventData;
        };
        export type SensorUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorEventData;
        };
        export type UserCreatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserCreatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserCreatedEventData;
        };
        export type UserFeedbackUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserFeedbackUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserFeedbackUpdatedEventData;
        };
        export type UserInvitedInOrganisationEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserInvitedInOrganisationEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserInvitedInOrganisationEventData;
        };
        export type UserUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserUpdatedEventData;
        };
        export type VirtualSensorComputeRequestedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.VirtualSensorComputeRequestedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.VirtualSensorComputeRequestedEventData;
        };
        export type SegmentedAlertDetectionPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.SegmentedAlertDetectionPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type ForecastLearnEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ForecastLearnEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels;
        };
        export type RealtimeAlertEventSchemaModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.RealtimeAlertEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                triggeringValue: number;
                variables: Components.Schemas.SensorVariables;
                activatedAlertsTriggersIds: Components.Schemas.AlertsTriggersUUIDS;
                customI18NMessage?: Components.Schemas.I18NString;
            };
        };
        export type DriftDetectionEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DriftDetectionEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type ForecastPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ForecastPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type DSPADPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DSPADPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                runName?: string;
                [pattern: string]: unknown;
            };
        };
        export type ProcessEventSchemaModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ProcessEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                triggeringValue?: number;
                stepName: string;
                startDate?: Components.Schemas.Date;
                endDate?: Components.Schemas.Date;
            };
        };
        export type AnomalyEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.AnomalyEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                alertCode: Components.Schemas.AlertCode;
                customI18NMessage?: Components.Schemas.I18NString;
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type DSPADDataAnalysisEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DSPADDataAnalysisEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type CycleEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.CycleEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                cycleId: Components.Schemas.NanoId;
                cycleValue?: number;
                [pattern: string]: unknown;
            };
        };
        export type PhaseEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.PhaseEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                phaseName: string;
                phaseValue?: number;
                [pattern: string]: unknown;
            };
        };
        export type UserFeedback = number;
        export type SensorDisplaySerie = Enums.SensorDisplaySerie;
        export type AlertStatus = Enums.AlertStatus;
        export type EventType = Enums.EventType;
        export type AlertType = Enums.AlertType;
        export type Aggregation = Enums.Aggregation;
        export type Priority = Enums.Priority;
        export type TaskType = Enums.TaskType;
        export type NotificationType = Enums.NotificationType;
        export type AlertModelHash = {
            [pattern: string]: Components.Schemas.AlertModel;
        };
        export type InterventionModelHash = {
            [pattern: string]: Components.Schemas.InterventionModel;
        };
        export type SensorModelHash = {
            [pattern: string]: Components.Schemas.SensorModel;
        };
        export type AttachmentModelHash = {
            [pattern: string]: Components.Schemas.AttachmentModel;
        };
        export type ImageModelHash = {
            [pattern: string]: Components.Schemas.ImageModel;
        };
        export type Total = number;
        export type Measures = {
            date: Components.Schemas.Date;
            values: number[];
            qualities?: number[];
            labels?: string[][];
            labelsCount?: number[][];
        }[];
        export type TasksModel = Components.Schemas.TaskModel[];
        export type DefaultPreferencesModel = {
            displayParentName: boolean;
            sensorDisplayExternalId: boolean;
            sensorDisplaySerie: Components.Schemas.SensorDisplaySerie;
            useFactoryTimeZone: boolean;
            showGraphLabels: boolean;
            showGraphConfigurations: boolean;
            showGraphCycles: boolean;
            showGraphPhases: boolean;
        };
        export type ApplicationModelHash = {
            [pattern: string]: Components.Schemas.ApplicationModel;
        };
        export type ProjectModelHash = {
            [pattern: string]: Components.Schemas.ProjectModel;
        };
        export type UserModelHash = {
            [pattern: string]: Components.Schemas.UserModel;
        };
        export type FactoryModelHash = {
            [pattern: string]: Components.Schemas.FactoryModel;
        };
        export type AssetModelHash = {
            [pattern: string]: Components.Schemas.AssetModel;
        };
        export type EventModelHash = {
            [pattern: string]: Components.Schemas.EventModel;
        };
        export type ReportModelHash = {
            [pattern: string]: Components.Schemas.ReportModel;
        };
        export type UUIDS = Components.Schemas.UUID[];
        export type TrendModelHash = {
            [pattern: string]: Components.Schemas.TrendModel;
        };
        export type RangeMeasures = {
            startDate: Components.Schemas.Date;
            endDate: Components.Schemas.Date;
            value: number;
            quality?: number;
            labels?: string[];
        }[][];
        export type NotificationsUUIDS = Components.Schemas.NotificationUUID[];
        export type NotificationModelHash = {
            [pattern: string]: Components.Schemas.NotificationModel;
        };
        export type OrganisationModelHash = {
            [pattern: string]: Components.Schemas.OrganisationModel;
        };
        export type NoSyncMode = "none";
        export type DoSyncMode = Enums.DoSyncMode;
        export type AlertAssignations = {
            id: Components.Schemas.UserUUID;
            assignedAt: Components.Schemas.Date;
            viewedAt?: Components.Schemas.Date;
        }[];
        export type ValuesNames = Components.Schemas.ValueName[];
        export type UsersFeedback = {
            [pattern: string]: Components.Schemas.UserFeedback;
        };
        export type BaseAlertData = {
            details: Components.Schemas.NoAlertDetailsModel | Components.Schemas.RealtimeAlertDetailsModel | Components.Schemas.SilentSensorsAlertDetailsModel;
            code: Components.Schemas.AlertCode;
            i18nMessage?: Components.Schemas.I18NString;
            priority: Components.Schemas.Priority;
            severity: Enums.Severity;
            viewed: boolean;
            assignedUsersIds?: Components.Schemas.UsersUUIDS;
            comment?: string;
        };
        export type Scope = Enums.Scope;
        export type GrantType = Enums.GrantType;
        export type MLAlgorithms = ("pipelines" | "custom")[];
        export type ProjectIngestion = {
            handler: string;
            sourceTopic: Components.Schemas.DataTopic;
            batchSize: number;
            delay: number;
        };
        export type ProjectIndexation = {
            handler: string;
            sourceTopic: Components.Schemas.DataTopic;
            batchSize: number;
            delay: number;
        };
        export type Locale = string;
        export type VerifyToken = string;
        export type ValuePrecision = number;
        export type SensorVariables = {
            [pattern: string]: (number | string);
        };
        export type SensorDataType = Enums.SensorType;
        export type SensorSerie = {
            name: Components.Schemas.ValueName;
            unit: Components.Schemas.SensorSerieUnit;
            description?: string;
            displayName?: string;
        } & (Components.Schemas.QuantitativeSensorSerie | Components.Schemas.QualitativeSensorSerie) & (Components.Schemas.DataSensorSerieSource | Components.Schemas.EventSensorSerieSource);
        export type AlertTrigger = {
            id: Components.Schemas.AlertTriggerUUID;
            name: string;
            i18nMessage: Components.Schemas.I18NString;
        } & (Components.Schemas.SilenceAlertTrigger | Components.Schemas.RealtimeAlertTrigger);
        export type SensorTimeBucketStats = {
            cardinality: number;
            volumetry: number;
            maxMin: number;
            minMax: number;
        };
        export type LineMetricsStatus = Enums.LineMetricsStatus;
        export type AssetBaseData = {
            name: string;
            tags: Components.Schemas.Tags;
            parentId?: Components.Schemas.AssetUUID;
        };
        export type AssetAreaData = {
            type: "area";
        };
        export type AssetLineData = {
            type: "line";
            configurations: {
                [pattern: string]: {
                    machinesTree: Components.Schemas.LineMachineTree;
                };
            };
        };
        export type AssetMachineData = {
            type: "machine";
        };
        export type AssetPartData = {
            type: "part";
        };
        export type NonEmptyUsersUUIDS = [
            Components.Schemas.UserUUID,
            ...Components.Schemas.UserUUID[]
        ];
        export type InterventionType = Enums.InterventionType;
        export type InterventionQualification = {
            usersFeedback: Components.Schemas.UsersFeedback;
            alertsIds: Components.Schemas.NonEmptyAlertsUUIDS;
        };
        export type InterventionReport = {
            rootCauses?: string;
            fixDetails?: string;
            startDate: Components.Schemas.Date;
            endDate?: Components.Schemas.Date;
        } | {
            comment: string;
        };
        export type UserOrganisationRoles = [
            "member",
            ..."member"[]
        ];
        export type UserFactoryRoles = [
            "manager" | "technician",
            ...("manager" | "technician")[]
        ];
        export type AlertDeletedEventType = "ALERT_DELETED";
        export type Timestamp = number;
        export type AlertEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            alertId: Components.Schemas.AlertUUID;
            userId?: Components.Schemas.UserUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            eventsIds?: Components.Schemas.EventsUUIDS;
        };
        export type AlertUpsertedEventType = "ALERT_UPSERTED";
        export type AlgorithmModelUpdatedEventType = "ALGORITHM_MODEL_UPDATED";
        export type AlgorithmModelEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            projectId: Components.Schemas.ProjectUUID;
            projectCode: Components.Schemas.ProjectCode;
            factoryId?: Components.Schemas.FactoryUUID;
        };
        export type ApplicationDeletedEventType = "APPLICATION_DELETED";
        export type ApplicationEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            applicationId: Components.Schemas.ApplicationUUID;
        };
        export type ApplicationUpsertedEventType = "APPLICATION_UPSERTED";
        export type AssetDeletedEventType = "ASSET_DELETED";
        export type AssetEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
            assetId: Components.Schemas.AssetUUID;
        };
        export type AssetUpsertedEventType = "ASSET_UPSERTED";
        export type EmailStatusUpdatedEventType = "EMAIL_STATUS_UPDATED";
        export type EmailStatusUpdatedEventData = {
            userId: Components.Schemas.UserUUID;
            email: string;
            name: string;
            status: Components.Schemas.EmailStatus;
        };
        export type FactoryDeletedEventType = "FACTORY_DELETED";
        export type FactoryEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type FactoryUpsertedEventType = "FACTORY_UPSERTED";
        export type InterventionDeletedEventType = "INTERVENTION_DELETED";
        export type InterventionEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
            interventionId: Components.Schemas.InterventionUUID;
            alertsEventsIds?: Components.Schemas.EventsUUIDS;
            userFeedback?: Components.Schemas.UserFeedback;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
        };
        export type InterventionUpsertedEventType = "INTERVENTION_UPSERTED";
        export type MembershipCancelledEventType = "MEMBERSHIP_CANCELLED";
        export type MembershipCancelledEventData = {
            userId: Components.Schemas.UserUUID;
            organisationId: Components.Schemas.OrganisationUUID;
        };
        export type OrganisationDeletedEventType = "ORGANISATION_DELETED";
        export type OrganisationEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type OrganisationPreferencesUpsertedEventType = "ORGANISATION_PREFERENCES_UPSERTED";
        export type OrganisationPreferencesUpsertedEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            preferences: Components.Schemas.PartialPreferencesModel;
        };
        export type OrganisationUpsertedEventType = "ORGANISATION_UPSERTED";
        export type OrganisationUserUpdatedEventType = "ORGANISATION_USER_UPDATED";
        export type OrganisationUserUpdatedEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            userName: string;
            accepted: boolean;
        };
        export type PasswordChangeRequestedEventType = "PASSWORD_CHANGE_REQUESTED";
        export type PasswordChangeRequestedEventData = {
            token: string;
            email: string;
            userName: string;
            locale: Components.Schemas.Locale;
        };
        export type ProjectDeletedEventType = "PROJECT_DELETED";
        export type ProjectEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            projectId: Components.Schemas.ProjectUUID;
            projectCode: Components.Schemas.ProjectCode;
            topicsToAdd: Components.Schemas.DataTopic[];
            topicsToRemove: Components.Schemas.DataTopic[];
        };
        export type ProjectUpsertedEventType = "PROJECT_UPSERTED";
        export type ReportDeletedEventType = "REPORT_DELETED";
        export type ReportEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            reportId: Components.Schemas.ReportUUID;
        };
        export type ReportUpsertedEventType = "REPORT_UPSERTED";
        export type SensorDeletedEventType = "SENSOR_DELETED";
        export type SensorEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            sensorId: Components.Schemas.SensorUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type SensorSeriesDeletedEventType = "SENSOR_SERIES_DELETED";
        export type SensorSeriesDeletedEventData = {
            sensorId: Components.Schemas.SensorUUID;
            valueName: Components.Schemas.ValueName;
        };
        export type SensorUpsertedEventType = "SENSOR_UPSERTED";
        export type UserCreatedEventType = "USER_CREATED";
        export type UserCreatedEventData = {
            user: Components.Schemas.UserModel;
            verifyToken: Components.Schemas.VerifyToken;
        };
        export type UserFeedbackUpdatedEventType = "USER_FEEDBACK_UPDATED";
        export type UserFeedbackUpdatedEventData = {
            alertId?: Components.Schemas.AlertUUID;
            eventsIds: Components.Schemas.EventsUUIDS;
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            userFeedBack: Components.Schemas.UserFeedback;
            beforeDate: Components.Schemas.Date;
            afterDate: Components.Schemas.Date;
        };
        export type UserInvitedInOrganisationEventType = "USER_INVITED_IN_ORGANISATION";
        export type UserInvitedInOrganisationEventData = {
            inviterId: Components.Schemas.UserUUID;
            userId: Components.Schemas.UserUUID;
            organisationId: Components.Schemas.OrganisationUUID;
            userName: string;
            userEmail: string;
            organisationName: string;
            organisationRoles: Components.Schemas.UserFactoryRoles | Components.Schemas.UserOrganisationRoles;
            token: string;
        };
        export type UserUpdatedEventType = "USER_UPDATED";
        export type UserUpdatedEventData = {
            user: Components.Schemas.UserModel;
            verifyToken?: Components.Schemas.VerifyToken;
        };
        export type VirtualSensorComputeRequestedEventType = "VIRTUAL_SENSOR_COMPUTE_REQUESTED";
        export type VirtualSensorComputeRequestedEventData = {
            sensorId: Components.Schemas.SensorUUID;
            projectCode: Components.Schemas.ProjectCode;
            sensorValueName: Components.Schemas.ValueName;
        };
        export type SegmentedAlertDetectionPredictEventType = "segmented_anomaly_detection_predict";
        export type DataLabels = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId?: string;
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            ancestorsIds: Components.Schemas.AssetsUUIDS;
            assetsIds: Components.Schemas.AssetsUUIDS;
            sensorsIds: Components.Schemas.SensorsUUIDS;
            valuesNames?: Components.Schemas.ValuesNames;
            labels: Components.Schemas.BaseDataLabels;
            runId?: Components.Schemas.RunUUID;
            usersFeedback?: Components.Schemas.UsersFeedback;
        };
        export type ForecastLearnEventType = "univariate_forecast_learn";
        export type RealtimeAlertEventType = "realtime_alert";
        export type AlertsTriggersUUIDS = Components.Schemas.AlertTriggerUUID[];
        export type I18NString = {
            [pattern: string]: string;
        };
        export type DriftDetectionEventType = "drift_detection";
        export type ForecastPredictEventType = "univariate_forecast_predict";
        export type DSPADPredictEventType = "dspad_predict";
        export type ProcessEventType = "process";
        export type AnomalyEventType = "anomaly";
        export type AlertCode = Components.Schemas.StandardAlertCode | Components.Schemas.CustomAlertCode;
        export type DSPADDataAnalysisEventType = "dspad_data_mvt";
        export type CycleEventType = "cycle";
        export type NanoId = string;
        export type PhaseEventType = "phase";
        export type AttachmentModel = Components.Schemas.SynchronizableItem & {
            id: Components.Schemas.AttachmentUUID;
            authorId?: Components.Schemas.UserUUID;
            alert?: Components.Schemas.AlertUUID;
            intervention?: Components.Schemas.InterventionUUID;
            report?: Components.Schemas.ReportUUID;
            scope: Components.Schemas.AttachmentScope;
            url?: string;
            stats: {
                name: string;
                size: number;
                type: string;
            };
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type ImageModel = {
            id: Components.Schemas.ImageUUID;
            authorId?: Components.Schemas.UserUUID;
            scope: Components.Schemas.ImageScope;
            alert?: Components.Schemas.AlertUUID;
            intervention?: Components.Schemas.InterventionUUID;
            urls: {
                original: string;
                large?: string;
                medium?: string;
                thumb?: string;
            };
            stats: {
                name: string;
                size: number;
                type: string;
            };
            resized?: string;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        };
        export type TaskModel = {
            status: Components.Schemas.TaskStatus;
            priority?: Components.Schemas.Priority;
            assetsIds?: Components.Schemas.AssetsUUIDS;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        } & ({
            id: Components.Schemas.AlertUUID;
            type: "alert";
        } | {
            id: Components.Schemas.InterventionUUID;
            type: "intervention";
        });
        export type TrendModel = {
            id?: Components.Schemas.UUID;
            sensorId?: Components.Schemas.SensorUUID;
            intercept?: number;
            slope?: number;
            from?: Components.Schemas.Date;
            to?: Components.Schemas.Date;
        };
        export type NotificationModel = Components.Schemas.UserCreatedNotification | Components.Schemas.UserUpdatedNotification | Components.Schemas.AlertNotification | Components.Schemas.AssetNotification | Components.Schemas.ApplicationNotification | Components.Schemas.InterventionNotification | Components.Schemas.ReportNotification | Components.Schemas.SensorNotification | Components.Schemas.FactoryNotification | Components.Schemas.ProjectNotification | Components.Schemas.AlgorithmModelUpdatedNotification | Components.Schemas.OrganisationNotification | Components.Schemas.OrganisationUserUpdatedNotification | Components.Schemas.OrganisationPreferencesUpsertedNotification | Components.Schemas.SensorSeriesDeletedNotification | Components.Schemas.PasswordChangeRequestedNotification | Components.Schemas.EmailStatusUpdatedNotification | Components.Schemas.UserFeedbackUpdatedNotification | Components.Schemas.UserInvitedInOrganisationNotification | Components.Schemas.MembershipCancelledEventSchema | Components.Schemas.VirtualSensorComputeRequestedNotification;
        export type NoAlertDetailsModel = {};
        export type RealtimeAlertDetailsModel = {
            triggeringValue: number;
            variables: Components.Schemas.SensorVariables;
            activatedAlertsTriggersIds: Components.Schemas.AlertsTriggersUUIDS;
        };
        export type SilentSensorsAlertDetailsModel = {
            totalSilence: boolean;
            sensorsIds: Components.Schemas.SensorsUUIDS;
        };
        export type DataTopic = string;
        export type SensorSerieUnit = string;
        export type QuantitativeSensorSerie = {
            type: "quantitative";
        };
        export type QualitativeSensorSerie = {
            type: "qualitative";
            categories?: {
                [pattern: string]: string;
            };
        };
        export type DataSensorSerieSource = {
            sourceType: "data";
        };
        export type EventSensorSerieSource = {
            sourceType: "event";
            eventField: Components.Schemas.EventField;
            eventType: Components.Schemas.EventType;
            eventHasARange?: boolean;
        };
        export type AlertTriggerUUID = string;
        export type SilenceAlertTrigger = {
            type: "silence";
            duration: number;
        };
        export type RealtimeAlertTrigger = {
            type: "realtime";
            occurences: number;
            duration?: number;
            resetDelay: number;
            rule: Components.Schemas.RealtimeAlertTriggerRule;
        };
        export type LineMachineTree = {
            nodes?: Components.Schemas.AssetUUID[];
            edges?: {
                source?: Components.Schemas.AssetUUID;
                target?: Components.Schemas.AssetUUID;
            }[];
        };
        export type NonEmptyAlertsUUIDS = [
            Components.Schemas.AlertUUID,
            ...Components.Schemas.AlertUUID[]
        ];
        export type BaseDataLabels = {
            assets?: Components.Schemas.AssetLabels;
            ancestors?: Components.Schemas.AssetLabels;
            tags?: Components.Schemas.Tags;
        };
        export type RunUUID = string;
        export type StandardAlertCode = Enums.StandardAlertCode;
        export type CustomAlertCode = string;
        export type AttachmentScope = Enums.AttachmentScope;
        export type ImageScope = Enums.ImageScope;
        export type UserCreatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserCreatedEventType;
            eventData: Components.Schemas.UserCreatedEventData;
        };
        export type UserUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserUpdatedEventType;
            eventData: Components.Schemas.UserUpdatedEventData;
        };
        export type AlertNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AlertUpsertedEventType | Components.Schemas.AlertDeletedEventType;
            eventData: Components.Schemas.AlertEventData;
        };
        export type AssetNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AssetUpsertedEventType | Components.Schemas.AssetDeletedEventType;
            eventData: Components.Schemas.AssetEventData;
        };
        export type ApplicationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ApplicationUpsertedEventType | Components.Schemas.ApplicationDeletedEventType;
            eventData: Components.Schemas.ApplicationEventData;
        };
        export type InterventionNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.InterventionUpsertedEventType | Components.Schemas.InterventionDeletedEventType;
            eventData: Components.Schemas.InterventionEventData;
        };
        export type ReportNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ReportUpsertedEventType | Components.Schemas.ReportDeletedEventType;
            eventData: Components.Schemas.ReportEventData;
        };
        export type SensorNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.SensorUpsertedEventType | Components.Schemas.SensorDeletedEventType;
            eventData: Components.Schemas.SensorEventData;
        };
        export type FactoryNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.FactoryUpsertedEventType | Components.Schemas.FactoryDeletedEventType;
            eventData: Components.Schemas.FactoryEventData;
        };
        export type ProjectNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ProjectUpsertedEventType | Components.Schemas.ProjectDeletedEventType;
            eventData: Components.Schemas.ProjectEventData;
        };
        export type AlgorithmModelUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AlgorithmModelUpdatedEventType;
            eventData: Components.Schemas.AlgorithmModelEventData;
        };
        export type OrganisationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationUpsertedEventType | Components.Schemas.OrganisationDeletedEventType;
            eventData: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationUserUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationUserUpdatedEventType;
            eventData: Components.Schemas.OrganisationUserUpdatedEventData;
        };
        export type OrganisationPreferencesUpsertedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationPreferencesUpsertedEventType;
            eventData: Components.Schemas.OrganisationPreferencesUpsertedEventData;
        };
        export type SensorSeriesDeletedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.SensorSeriesDeletedEventType;
            eventData: Components.Schemas.SensorSeriesDeletedEventData;
        };
        export type PasswordChangeRequestedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.PasswordChangeRequestedEventType;
            eventData: Components.Schemas.PasswordChangeRequestedEventData;
        };
        export type EmailStatusUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.EmailStatusUpdatedEventType;
            eventData: Components.Schemas.EmailStatusUpdatedEventData;
        };
        export type UserFeedbackUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserFeedbackUpdatedEventType;
            eventData: Components.Schemas.UserFeedbackUpdatedEventData;
        };
        export type UserInvitedInOrganisationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserInvitedInOrganisationEventType;
            eventData: Components.Schemas.UserInvitedInOrganisationEventData;
        };
        export type MembershipCancelledEventSchema = Components.Schemas.CommonNotification & {
            type: Components.Schemas.MembershipCancelledEventType;
            eventData: Components.Schemas.MembershipCancelledEventData;
        };
        export type VirtualSensorComputeRequestedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.VirtualSensorComputeRequestedEventType;
            eventData: Components.Schemas.VirtualSensorComputeRequestedEventData;
        };
        export type RealtimeAlertTriggerRule = Components.Schemas.RealtimeAlertTriggerLabelTest | Components.Schemas.RealtimeAlertTriggerValuedLabelTest | Components.Schemas.RealtimeAlertTriggerValueTest | Components.Schemas.RealtimeAlertTriggerBranch;
        export type AssetLabels = {
            values?: Components.Schemas.ValuedLabels;
            tags?: Components.Schemas.Tags;
            configurations?: Components.Schemas.AssetConfigurations;
            cycles?: Components.Schemas.ManufacturingCycles;
            phases?: Components.Schemas.ManufacturingPhases;
        };
        export type CommonNotification = {
            id: Components.Schemas.NotificationUUID;
            date: Components.Schemas.Date;
            read: boolean;
            data: {
                organisationId?: Components.Schemas.OrganisationUUID;
                factoryId?: Components.Schemas.FactoryUUID;
                ancestorsIds?: Components.Schemas.AssetsUUIDS;
                assetsIds?: Components.Schemas.AssetsUUIDS;
                alertsIds?: Components.Schemas.AlertsUUIDS;
                sensorsIds?: Components.Schemas.SensorsUUIDS;
            };
        };
        export type RealtimeAlertTriggerLabelTest = {
            type: "label";
            operator: Components.Schemas.RealtimeAlertLabelsOperator;
            target: Components.Schemas.RealtimeAlertLabelTarget;
            name: Enums.NameOfTheLabelToTest;
            values: string[];
        };
        export type RealtimeAlertTriggerValuedLabelTest = {
            type: "valued_label";
            operator: Components.Schemas.RealtimeAlertLabelsOperator;
            target: Components.Schemas.RealtimeAlertLabelTarget;
            values: {
                [pattern: string]: string;
            };
        };
        export type RealtimeAlertTriggerValueTest = {
            type: "value";
            operator: Enums.RealtimeAlertTriggerValueTestOperator;
            value: number | Components.Schemas.SensorVariable;
        };
        export type RealtimeAlertTriggerBranch = {
            type?: "branch";
            operator: Enums.RealtimeAlertTriggerBranchOperator;
            leftNode: Components.Schemas.RealtimeAlertTriggerRule;
            rightNode: Components.Schemas.RealtimeAlertTriggerRule;
        };
        export type ValuedLabels = {
            [pattern: string]: Components.Schemas.LabelValue;
        };
        export type RealtimeAlertLabelsOperator = Enums.WetherAllLabelsShouldMatchOrAny;
        export type RealtimeAlertLabelTarget = Enums.TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors;
        export type SensorVariable = string;
    }
}
declare namespace API {
    export import DeleteAlert = Components.Operations.DeleteAlert;
    export import DeleteApplication = Components.Operations.DeleteApplication;
    export import DeleteIntervention = Components.Operations.DeleteIntervention;
    export import DeleteProject = Components.Operations.DeleteProject;
    export import DeleteUserOrganisationAlert = Components.Operations.DeleteUserOrganisationAlert;
    export import GetUserOrganisationAlert = Components.Operations.GetUserOrganisationAlert;
    export import PutUserOrganisationAlert = Components.Operations.PutUserOrganisationAlert;
    export import DeleteUserOrganisationAlertAttachment = Components.Operations.DeleteUserOrganisationAlertAttachment;
    export import PutUserOrganisationAlertAttachment = Components.Operations.PutUserOrganisationAlertAttachment;
    export import DeleteUserOrganisationAlertImage = Components.Operations.DeleteUserOrganisationAlertImage;
    export import PutUserOrganisationAlertImage = Components.Operations.PutUserOrganisationAlertImage;
    export import DeleteUserOrganisationApplication = Components.Operations.DeleteUserOrganisationApplication;
    export import PutUserOrganisationApplication = Components.Operations.PutUserOrganisationApplication;
    export import DeleteUserOrganisationIntervention = Components.Operations.DeleteUserOrganisationIntervention;
    export import DeleteUserOrganisationInterventionImage = Components.Operations.DeleteUserOrganisationInterventionImage;
    export import PutUserOrganisationInterventionImage = Components.Operations.PutUserOrganisationInterventionImage;
    export import DeleteUserOrganisationMembership = Components.Operations.DeleteUserOrganisationMembership;
    export import DeleteUserOrganisationProject = Components.Operations.DeleteUserOrganisationProject;
    export import PutUserOrganisationProject = Components.Operations.PutUserOrganisationProject;
    export import DeleteUserOrganisationSensorSeries = Components.Operations.DeleteUserOrganisationSensorSeries;
    export import GetAlertsStats = Components.Operations.GetAlertsStats;
    export import GetAuthProfile = Components.Operations.GetAuthProfile;
    export import GetMySelf = Components.Operations.GetMySelf;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetOrganisationFactory = Components.Operations.GetOrganisationFactory;
    export import GetOrganisationFactoryAlertsStats = Components.Operations.GetOrganisationFactoryAlertsStats;
    export import GetOrganisationFactoryAsset = Components.Operations.GetOrganisationFactoryAsset;
    export import GetOrganisationFactoryAssets = Components.Operations.GetOrganisationFactoryAssets;
    export import GetOrganisationFactoryDataLabels = Components.Operations.GetOrganisationFactoryDataLabels;
    export import GetOrganisationFactoryEvents = Components.Operations.GetOrganisationFactoryEvents;
    export import GetOrganisationFactoryIntervention = Components.Operations.GetOrganisationFactoryIntervention;
    export import GetOrganisationFactoryInterventions = Components.Operations.GetOrganisationFactoryInterventions;
    export import GetOrganisationFactoryReports = Components.Operations.GetOrganisationFactoryReports;
    export import GetOrganisationFactorySensor = Components.Operations.GetOrganisationFactorySensor;
    export import GetOrganisationFactorySensors = Components.Operations.GetOrganisationFactorySensors;
    export import GetOrganisationFactoryTrends = Components.Operations.GetOrganisationFactoryTrends;
    export import GetOrganisationProject = Components.Operations.GetOrganisationProject;
    export import GetOrganisationProjects = Components.Operations.GetOrganisationProjects;
    export import GetOrganisationSensorsAggregateData = Components.Operations.GetOrganisationSensorsAggregateData;
    export import GetOrganisationSensorsAggregateEventData = Components.Operations.GetOrganisationSensorsAggregateEventData;
    export import GetOrganisationSensorsAggregateEventRangeData = Components.Operations.GetOrganisationSensorsAggregateEventRangeData;
    export import GetOrganisationSensorsData = Components.Operations.GetOrganisationSensorsData;
    export import GetOrganisationSensorsEventData = Components.Operations.GetOrganisationSensorsEventData;
    export import GetOrganisationSensorsEventRangeData = Components.Operations.GetOrganisationSensorsEventRangeData;
    export import GetOrganisationUniversalSearch = Components.Operations.GetOrganisationUniversalSearch;
    export import PutReport = Components.Operations.PutReport;
    export import GetUniversalSearch = Components.Operations.GetUniversalSearch;
    export import GetUser = Components.Operations.GetUser;
    export import PutUser = Components.Operations.PutUser;
    export import GetUserFactories = Components.Operations.GetUserFactories;
    export import GetUserNotifications = Components.Operations.GetUserNotifications;
    export import GetUserOrganisation = Components.Operations.GetUserOrganisation;
    export import PutUserOrganisation = Components.Operations.PutUserOrganisation;
    export import GetUserOrganisationAlerts = Components.Operations.GetUserOrganisationAlerts;
    export import GetUserOrganisationApplications = Components.Operations.GetUserOrganisationApplications;
    export import PostUserOrganisationApplication = Components.Operations.PostUserOrganisationApplication;
    export import GetUserOrganisationFactories = Components.Operations.GetUserOrganisationFactories;
    export import PostUserOrganisationFactory = Components.Operations.PostUserOrganisationFactory;
    export import GetUserOrganisationFactoryPreferences = Components.Operations.GetUserOrganisationFactoryPreferences;
    export import GetUserOrganisationTasks = Components.Operations.GetUserOrganisationTasks;
    export import GetUserOrganisationUsers = Components.Operations.GetUserOrganisationUsers;
    export import GetUserOrganisations = Components.Operations.GetUserOrganisations;
    export import PostUserOrganisation = Components.Operations.PostUserOrganisation;
    export import PostUser = Components.Operations.PostUser;
    export import PostAuthLogin = Components.Operations.PostAuthLogin;
    export import PostAuthLogout = Components.Operations.PostAuthLogout;
    export import PostAuthPasswordChange = Components.Operations.PostAuthPasswordChange;
    export import PostAuthRefresh = Components.Operations.PostAuthRefresh;
    export import PostAuthVerify = Components.Operations.PostAuthVerify;
    export import PostOAuth2Token = Components.Operations.PostOAuth2Token;
    export import PostOrganisationData = Components.Operations.PostOrganisationData;
    export import PostPasswordChangeRequest = Components.Operations.PostPasswordChangeRequest;
    export import PostUserInvitationResponse = Components.Operations.PostUserInvitationResponse;
    export import PostUserOrganisationAssetSensor = Components.Operations.PostUserOrganisationAssetSensor;
    export import PostUserOrganisationFactoryAsset = Components.Operations.PostUserOrganisationFactoryAsset;
    export import PostUserOrganisationFactoryIntervention = Components.Operations.PostUserOrganisationFactoryIntervention;
    export import PostUserOrganisationFactorySensor = Components.Operations.PostUserOrganisationFactorySensor;
    export import PostUserOrganisationInvitation = Components.Operations.PostUserOrganisationInvitation;
    export import PostUserOrganisationInvitationFollowup = Components.Operations.PostUserOrganisationInvitationFollowup;
    export import PostUserOrganisationNotificationRead = Components.Operations.PostUserOrganisationNotificationRead;
    export import PostUserOrganisationProject = Components.Operations.PostUserOrganisationProject;
    export import PutAttachment = Components.Operations.PutAttachment;
    export import PutImage = Components.Operations.PutImage;
    export import PutNotificationEvent = Components.Operations.PutNotificationEvent;
    export import PutOrganisationFactoryEvent = Components.Operations.PutOrganisationFactoryEvent;
    export import PutUserOrganisationAlertFeedback = Components.Operations.PutUserOrganisationAlertFeedback;
    export import PutUserOrganisationAssetSensor = Components.Operations.PutUserOrganisationAssetSensor;
    export import PutUserOrganisationFactory = Components.Operations.PutUserOrganisationFactory;
    export import PutUserOrganisationFactoryAsset = Components.Operations.PutUserOrganisationFactoryAsset;
    export import PutUserOrganisationFactoryIntervention = Components.Operations.PutUserOrganisationFactoryIntervention;
    export import PutUserOrganisationFactoryPreferences = Components.Operations.PutUserOrganisationFactoryPreferences;
    export import PutUserOrganisationFactorySensor = Components.Operations.PutUserOrganisationFactorySensor;
    export import GetOAuth2Authorize = Components.Operations.GetOAuth2Authorize;
    export import GetPing = Components.Operations.GetPing;
}
declare namespace Enums {
    export enum AttachmentFileType {
        Applicationpdf = "application/pdf",
        Texthtml = "text/html"
    }
    export enum ImageFileType {
        Imagejpeg = "image/jpeg",
        Imagepng = "image/png"
    }
    export enum ResponseType {
        Code = "code",
        Token = "token"
    }
    export enum Operation {
        Restore = "restore",
        Backup = "backup"
    }
    export enum PowerState {
        Unknown = "unknown",
        On = "on",
        Off = "off"
    }
    export enum OperatingState {
        Unknown = "unknown",
        Normal = "normal",
        Stopped = "stopped",
        Idle = "idle"
    }
    export enum HealthState {
        Unknown = "unknown",
        Good = "good",
        Faulty = "faulty",
        Erroring = "erroring"
    }
    export enum SortDirection {
        Asc = "asc",
        Desc = "desc"
    }
    export enum AlertsSortByValue {
        Severity = "severity",
        Priority = "priority",
        AssignedAt = "assignedAt",
        StartAt = "startAt",
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum ApplicationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AssetType {
        Area = "area",
        Line = "line",
        Machine = "machine",
        Part = "part"
    }
    export enum AssetsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum FactoriesSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum InterventionsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Priority = "priority"
    }
    export enum OrganisationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum ProjectsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum ReportsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum SensorsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum Granularity {
        Second = "second",
        Minute = "minute",
        FifteenMinute = "fifteen_minute",
        ThirtyMinute = "thirty_minute",
        Hour = "hour",
        Day = "day",
        Week = "week",
        Month = "month",
        Quarter = "quarter",
        Year = "year"
    }
    export enum EventField {
        AggregatableValue1 = "aggregatableValue1",
        AggregatableValue2 = "aggregatableValue2",
        AggregatableValue3 = "aggregatableValue3"
    }
    export enum TasksSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum SearchType {
        User = "user",
        Factory = "factory",
        Project = "project",
        Asset = "asset",
        Application = "application",
        Intervention = "intervention",
        Alert = "alert",
        Report = "report",
        Sensor = "sensor",
        Organisation = "organisation"
    }
    export enum SearchFilterType {
        Factory = "factory",
        Asset = "asset"
    }
    export enum UserMembershipStatus {
        Member = "member",
        Pending = "pending",
        Declined = "declined",
        Cancelled = "cancelled"
    }
    export enum UsersSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum IngestionStage {
        Raw = "raw",
        Enriched = "enriched"
    }
    export enum PreferenceLevel {
        Organisation = "organisation",
        Factory = "factory",
        User = "user"
    }
    export enum TokenType {
        Bearer = "bearer",
        Mac = "mac"
    }
    export enum Error {
        InvalidRequest = "invalid_request",
        InvalidClient = "invalid_client",
        InvalidGrant = "invalid_grant",
        UnauthorizedClient = "unauthorized_client",
        UnsupportedGrantType = "unsupported_grant_type",
        InvalidScope = "invalid_scope"
    }
    export enum Role {
        Admin = "admin",
        User = "user",
        Candidate = "candidate",
        Third = "third"
    }
    export enum EmailStatus {
        Bouncing = "bouncing",
        Reachable = "reachable",
        Dropped = "dropped",
        Unknown = "unknown"
    }
    export enum AggregationType {
        Ratio = "ratio",
        Sum = "sum"
    }
    export enum Unit {
        Days = "days",
        Hours = "hours"
    }
    export enum TaskStatus {
        ToAssign = "to_assign",
        ToDo = "to_do",
        InProgress = "in_progress",
        Done = "done"
    }
    export enum SensorDisplaySerie {
        Always = "always",
        Never = "never",
        IfExists = "ifExists"
    }
    export enum AlertStatus {
        Open = "open",
        Discarded = "discarded",
        Fixed = "fixed",
        Closed = "closed"
    }
    export enum EventType {
        SegmentedAnomalyDetectionPredict = "segmented_anomaly_detection_predict",
        UnivariateForecastLearn = "univariate_forecast_learn",
        RealtimeAlert = "realtime_alert",
        DriftDetection = "drift_detection",
        UnivariateForecastPredict = "univariate_forecast_predict",
        DspadPredict = "dspad_predict",
        Process = "process",
        Anomaly = "anomaly",
        DspadDataMvt = "dspad_data_mvt",
        Cycle = "cycle",
        Phase = "phase"
    }
    export enum AlertType {
        Realtime = "realtime",
        Silence = "silence"
    }
    export enum Aggregation {
        Min = "min",
        Max = "max",
        Avg = "avg",
        Count = "count",
        Sum = "sum",
        P25 = "p25",
        Median = "median",
        P75 = "p75",
        Top1 = "top1",
        Top2 = "top2",
        Top3 = "top3",
        Others = "others"
    }
    export enum Priority {
        NotSet = "not_set",
        Urgent = "urgent",
        Important = "important",
        Secondary = "secondary"
    }
    export enum TaskType {
        Alert = "alert",
        Intervention = "intervention"
    }
    export enum NotificationType {
        USERCREATED = "USER_CREATED",
        USERUPDATED = "USER_UPDATED",
        ALERTUPSERTED = "ALERT_UPSERTED",
        ALERTDELETED = "ALERT_DELETED",
        ASSETUPSERTED = "ASSET_UPSERTED",
        ASSETDELETED = "ASSET_DELETED",
        SENSORUPSERTED = "SENSOR_UPSERTED",
        SENSORDELETED = "SENSOR_DELETED",
        REPORTUPSERTED = "REPORT_UPSERTED",
        REPORTDELETED = "REPORT_DELETED",
        INTERVENTIONUPSERTED = "INTERVENTION_UPSERTED",
        INTERVENTIONDELETED = "INTERVENTION_DELETED",
        ALGORITHMMODELUPDATED = "ALGORITHM_MODEL_UPDATED",
        PROJECTUPSERTED = "PROJECT_UPSERTED",
        PROJECTDELETED = "PROJECT_DELETED",
        FACTORYUPSERTED = "FACTORY_UPSERTED",
        FACTORYDELETED = "FACTORY_DELETED",
        ORGANISATIONUPSERTED = "ORGANISATION_UPSERTED",
        ORGANISATIONDELETED = "ORGANISATION_DELETED",
        ORGANISATIONUSERUPDATED = "ORGANISATION_USER_UPDATED",
        ORGANISATIONPREFERENCESUPSERTED = "ORGANISATION_PREFERENCES_UPSERTED",
        SENSORSERIESDELETED = "SENSOR_SERIES_DELETED",
        PASSWORDCHANGEREQUESTED = "PASSWORD_CHANGE_REQUESTED",
        EMAILSTATUSUPDATED = "EMAIL_STATUS_UPDATED",
        USERFEEDBACKUPDATED = "USER_FEEDBACK_UPDATED",
        USERINVITEDINORGANISATION = "USER_INVITED_IN_ORGANISATION",
        MEMBERSHIPCANCELLED = "MEMBERSHIP_CANCELLED",
        VIRTUALSENSORCOMPUTEREQUESTED = "VIRTUAL_SENSOR_COMPUTE_REQUESTED"
    }
    export enum DoSyncMode {
        OneWayIn = "one-way-in",
        OneWayOut = "one-way-out",
        TwoWays = "two-ways"
    }
    export enum Severity {
        NotSet = "not_set",
        Critical = "critical",
        Major = "major",
        Moderate = "moderate",
        Minor = "minor",
        Cosmetic = "cosmetic"
    }
    export enum Scope {
        User = "user",
        Admin = "admin",
        Data = "data",
        Webhook = "webhook",
        Oauth2 = "oauth2",
        Ml = "ml"
    }
    export enum GrantType {
        Code = "code",
        Token = "token",
        Password = "password",
        Refresh = "refresh",
        ClientCredentials = "client_credentials",
        Verify = "verify",
        PasswordChange = "password_change"
    }
    export enum SensorType {
        Qualitative = "qualitative",
        Quantitative = "quantitative"
    }
    export enum LineMetricsStatus {
        Good = "good",
        Faulty = "faulty",
        Error = "error"
    }
    export enum InterventionType {
        Fix = "fix",
        Prevent = "prevent",
        Control = "control"
    }
    export enum StandardAlertCode {
        MissingData = "missing_data",
        BadData = "bad_data",
        WrongDelta = "wrong_delta",
        ProductionDrop = "production_drop",
        OutOfBounds = "out_of_bounds",
        AbnormalData = "abnormal_data",
        DataDrift = "data_drift",
        SilenceAlert = "silence_alert",
        RealtimeAlert = "realtime_alert"
    }
    export enum AttachmentScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum ImageScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum NameOfTheLabelToTest {
        Phases = "phases",
        Cycles = "cycles",
        Configurations = "configurations",
        Tags = "tags"
    }
    export enum RealtimeAlertTriggerValueTestOperator {
        Eq = "eq",
        Gt = "gt",
        Gte = "gte",
        Lt = "lt",
        Lte = "lte",
        And = "and",
        Xor = "xor"
    }
    export enum RealtimeAlertTriggerBranchOperator {
        And = "and",
        Or = "or"
    }
    export enum WetherAllLabelsShouldMatchOrAny {
        All = "all",
        Any = "any"
    }
    export enum TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors {
        Ancestors = "ancestors",
        Assets = "assets",
        All = "all"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace DeleteAlert {
            export type Output = unknown;
            export namespace Parameters {
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteApplication {
            export type Output = unknown;
            export namespace Parameters {
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteIntervention {
            export type Output = unknown;
            export namespace Parameters {
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteProject {
            export type Output = unknown;
            export namespace Parameters {
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlert {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationAlert {
            export namespace Responses {
                export type $200 = Components.Responses.AlertItemResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlert {
            export type Body = Components.RequestBodies.PutUserOrganisationAlert;
            export namespace Responses {
                export type $201 = Components.Responses.AlertItemResponse<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlertAttachment {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly attachmentId: Parameters.AttachmentId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertAttachment {
            export type Body = Components.RequestBodies.Attachment;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertAttachment201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.AttachmentFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly attachmentId: Parameters.AttachmentId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlertImage {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type ImageId = Components.Parameters.ImageId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly imageId: Parameters.ImageId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationApplication {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationApplication {
            export type Body = Components.RequestBodies.PutUserOrganisationApplication;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationApplication201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationIntervention {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationInterventionImage {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationInterventionImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationInterventionImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationMembership {
            export type Output = unknown;
            export namespace Parameters {
                export type CollaboratorId = Components.Parameters.DeleteUserOrganisationMembership2;
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly collaboratorId: Parameters.CollaboratorId;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationProject {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationProject {
            export type Body = Components.RequestBodies.PutUserOrganisationProject;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationProject201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationSensorSeries {
            export type Output = unknown;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorId = Components.Parameters.SensorId;
                export type ValueName = Components.Parameters.ValueName;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorId: Parameters.SensorId;
                readonly valueName: Parameters.ValueName;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetAlertsStats {
            export namespace Responses {
                export type $200 = Components.Responses.GetAlertsStats200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetAuthProfile {
            export namespace Responses {
                export type $200 = Components.Responses.GetAuthProfile200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Cookie = Components.Parameters.Cookie;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly cookie?: Parameters.Cookie;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetMySelf {
            export type Output = unknown;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.GetOpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type MutedTags = Components.Parameters.GetOpenAPI0;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly mutedTags?: Parameters.MutedTags;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactory {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactory200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAlertsStats {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAlertsStats200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAsset {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAsset200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type AssetId = Components.Parameters.AssetId;
                export type IncludeChildrenIds = Components.Parameters.IncludeChildrenIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly assetId: Parameters.AssetId;
                readonly includeChildrenIds: Parameters.IncludeChildrenIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAssets {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAssets200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAssetsTypes = Components.Parameters.OptionalWithAssetsTypes;
                export type WithRootAssetsFirst = Components.Parameters.OptionalWithRootAssetsFirst;
                export type WithParentsAssetsIds = Components.Parameters.OptionalWithParentsAssetsIds;
                export type SortBy = Components.Parameters.AssetsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type IncludeChildrenIds = Components.Parameters.IncludeChildrenIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAssetsTypes?: Parameters.WithAssetsTypes;
                readonly withRootAssetsFirst?: Parameters.WithRootAssetsFirst;
                readonly withParentsAssetsIds?: Parameters.WithParentsAssetsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly includeChildrenIds: Parameters.IncludeChildrenIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryDataLabels {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryDataLabels200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryEvents {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryEvents200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithEventsIds = Components.Parameters.OptionalWithEventsIds;
                export type WithEventsTypes = Components.Parameters.OptionalWithEventType;
                export type SensorsIds = Components.Parameters.OptionalsensorsIds;
                export type ValuesNames = Components.Parameters.OptionalvaluesNames;
                export type WithUsersFeedback = Components.Parameters.OptionalWithUsersFeedback;
                export type Since = Components.Parameters.Since;
                export type Before = Components.Parameters.Before;
                export type Size = Components.Parameters.Size;
                export type BeforeDate = Components.Parameters.BeforeDate;
                export type AfterDate = Components.Parameters.AfterDate;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withEventsIds?: Parameters.WithEventsIds;
                readonly withEventsTypes?: Parameters.WithEventsTypes;
                readonly sensorsIds?: Parameters.SensorsIds;
                readonly valuesNames?: Parameters.ValuesNames;
                readonly withUsersFeedback?: Parameters.WithUsersFeedback;
                readonly since?: Parameters.Since;
                readonly before?: Parameters.Before;
                readonly size?: Parameters.Size;
                readonly beforeDate?: Parameters.BeforeDate;
                readonly afterDate?: Parameters.AfterDate;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryIntervention {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryIntervention200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryInterventions {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryInterventions200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithInterventionsIds = Components.Parameters.OptionalWithInterventionsIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type SortBy = Components.Parameters.InterventionsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithAttachments = Components.Parameters.WithAttachments;
                export type WithImages = Components.Parameters.WithImages;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withInterventionsIds?: Parameters.WithInterventionsIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withAttachments: Parameters.WithAttachments;
                readonly withImages: Parameters.WithImages;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryReports {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryReports200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithReportsIds = Components.Parameters.OptionalWithReportsIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.ReportsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withReportsIds?: Parameters.WithReportsIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactorySensor {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactorySensor200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactorySensors {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactorySensors200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type WithAlertTriggerTypes = Components.Parameters.WithAlertTriggerTypes;
                export type WithFactorySensorsOnly = Components.Parameters.WithFactorySensorsOnly;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithSensorsIds = Components.Parameters.OptionalWithSensorsIds;
                export type SortBy = Components.Parameters.SensorsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly withAlertTriggerTypes?: Parameters.WithAlertTriggerTypes;
                readonly withFactorySensorsOnly: Parameters.WithFactorySensorsOnly;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withSensorsIds?: Parameters.WithSensorsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryTrends {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryTrends200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationProject {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationProject200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationProjects {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationProjects200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type SortBy = Components.Parameters.ProjectsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithProjectsIds = Components.Parameters.OptionalWithProjectsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withProjectsIds?: Parameters.WithProjectsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type ValuesNames = Components.Parameters.ValuesNames;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly valuesNames: Parameters.ValuesNames;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateEventData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateEventData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateEventRangeData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateEventRangeData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type ValuesNames = Components.Parameters.ValuesNames;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly valuesNames: Parameters.ValuesNames;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsEventData {
            export namespace Responses {
                export type $200 = Components.Responses.EventDataResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventFields: Parameters.EventFields;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsEventRangeData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsEventRangeData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationUniversalSearch {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationUniversalSearch200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SearchType = Components.Parameters.SearchType;
                export type SearchSentence = Components.Parameters.SearchSentence;
                export type WithFilterTypes = Components.Parameters.WithFilterTypes;
                export type WithFilterIds = Components.Parameters.WithFilterIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly searchType?: Parameters.SearchType;
                readonly searchSentence: Parameters.SearchSentence;
                readonly withFilterTypes?: Parameters.WithFilterTypes;
                readonly withFilterIds?: Parameters.WithFilterIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutReport {
            export type Body = Components.RequestBodies.Report;
            export namespace Responses {
                export type $201 = Components.Responses.PutReport201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type ReportId = Components.Parameters.ReportId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly reportId: Parameters.ReportId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUniversalSearch {
            export namespace Responses {
                export type $200 = Components.Responses.GetUniversalSearch200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithOrganisationsIds = Components.Parameters.OptionalWithOrganisationsIds;
                export type SearchSentence = Components.Parameters.SearchSentence;
                export type SearchType = Components.Parameters.SearchType;
                export type WithFilterTypes = Components.Parameters.WithFilterTypes;
                export type WithFilterIds = Components.Parameters.WithFilterIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withOrganisationsIds?: Parameters.WithOrganisationsIds;
                readonly searchSentence: Parameters.SearchSentence;
                readonly searchType?: Parameters.SearchType;
                readonly withFilterTypes?: Parameters.WithFilterTypes;
                readonly withFilterIds?: Parameters.WithFilterIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUser {
            export namespace Responses {
                export type $200 = Components.Responses.GetUser200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type WithMembershipsStatuses = Components.Parameters.WithMembershipsStatuses;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly withMembershipsStatuses?: Parameters.WithMembershipsStatuses;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUser {
            export type Body = Components.RequestBodies.PutUser;
            export namespace Responses {
                export type $201 = Components.Responses.PutUser201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserFactories {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserFactories200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type SortBy = Components.Parameters.FactoriesSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserNotifications {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserNotifications200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithOrganisationsIds = Components.Parameters.OptionalWithOrganisationsIds;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithNotificationTypes = Components.Parameters.OptionalWithNotificationTypesQueryParameter;
                export type IncludeOrganisationLevelItems = Components.Parameters.IncludeOrganisationLevelItemsQueryParameter;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withOrganisationsIds?: Parameters.WithOrganisationsIds;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withNotificationTypes?: Parameters.WithNotificationTypes;
                readonly includeOrganisationLevelItems?: Parameters.IncludeOrganisationLevelItems;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisation {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisation200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisation {
            export type Body = Components.RequestBodies.PutUserOrganisation;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationAlerts {
            export namespace Responses {
                export type $200 = Components.Responses.AlertsCollection<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithSensorsIds = Components.Parameters.OptionalWithSensorsIds;
                export type WithAlertsIds = Components.Parameters.OptionalWithAlertsIds;
                export type WithStatuses = Components.Parameters.WithAlertsStatuses;
                export type WithOrphanAlertsOnly = Components.Parameters.WithOrphanAlertsOnly;
                export type WithAttachments = Components.Parameters.WithAttachments;
                export type WithImages = Components.Parameters.WithImages;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.AlertsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withSensorsIds?: Parameters.WithSensorsIds;
                readonly withAlertsIds?: Parameters.WithAlertsIds;
                readonly withStatuses?: Parameters.WithStatuses;
                readonly withOrphanAlertsOnly?: Parameters.WithOrphanAlertsOnly;
                readonly withAttachments: Parameters.WithAttachments;
                readonly withImages: Parameters.WithImages;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationApplications {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationApplications200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type SortBy = Components.Parameters.ApplicationsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithApplicationsIds = Components.Parameters.OptionalWithApplicationsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withApplicationsIds?: Parameters.WithApplicationsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationApplication {
            export type Body = Components.RequestBodies.PostUserOrganisationApplication;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationApplication201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationFactories {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationFactories200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type SortBy = Components.Parameters.FactoriesSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactory {
            export type Body = Components.RequestBodies.PostUserOrganisationFactory;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactory201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationFactoryPreferences {
            export namespace Responses {
                export type $200 = Components.Responses.AllPreferencesResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationTasks {
            export namespace Responses {
                export type $200 = Components.Responses.TasksCollection<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithUsersIds = Components.Parameters.OptionalWithUsersIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithTypes = Components.Parameters.WithTasksTypes;
                export type WithStatuses = Components.Parameters.WithTasksStatuses;
                export type WithPriorities = Components.Parameters.WithPriorities;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.TasksSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withUsersIds?: Parameters.WithUsersIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withTypes: Parameters.WithTypes;
                readonly withStatuses: Parameters.WithStatuses;
                readonly withPriorities: Parameters.WithPriorities;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationUsers {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationUsers200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithUsersIds = Components.Parameters.OptionalWithUsersIds;
                export type WithMembershipsStatuses = Components.Parameters.WithMembershipsStatuses;
                export type SortBy = Components.Parameters.UsersSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withUsersIds?: Parameters.WithUsersIds;
                readonly withMembershipsStatuses?: Parameters.WithMembershipsStatuses;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisations {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisations200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type SortBy = Components.Parameters.OrganisationsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisation {
            export type Body = Components.RequestBodies.PostUserOrganisation;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUser {
            export type Body = Components.RequestBodies.PostUser;
            export namespace Responses {
                export type $201 = Components.Responses.PostUser201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type InvitationToken = Components.Parameters.PostUser0;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly invitationToken?: Parameters.InvitationToken;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthLogin {
            export type Body = Components.RequestBodies.PostAuthLogin;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthLogin200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthLogout {
            export type Output = unknown;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthPasswordChange {
            export type Body = Components.RequestBodies.PostAuthPasswordChange;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthPasswordChange200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body?: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthRefresh {
            export type Body = Components.RequestBodies.PostAuthRefresh;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthRefresh200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Cookie = Components.Parameters.Cookie;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly cookie?: Parameters.Cookie;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthVerify {
            export type Body = Components.RequestBodies.PostAuthVerify;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthVerify200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body?: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostOAuth2Token {
            export type Body = Components.RequestBodies.PostOAuth2Token;
            export namespace Responses {
                export type $200 = Components.Responses.PostOAuth2Token200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostOrganisationData {
            export type Body = Components.RequestBodies.PostOrganisationData;
            export namespace Responses {
                export type $201 = Components.Responses.PostOrganisationData201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type ProjectCode = Components.Parameters.ProjectCode;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly projectCode: Parameters.ProjectCode;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostPasswordChangeRequest {
            export type Body = Components.RequestBodies.PostPasswordChangeRequest;
            export namespace Responses {
                export type $200 = Components.Responses.PostPasswordChangeRequest200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserInvitationResponse {
            export type Body = Components.RequestBodies.PostUserInvitationResponse;
            export namespace Responses {
                export type $200 = Components.Responses.PostUserInvitationResponse200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationAssetSensor {
            export type Body = Components.RequestBodies.PostUserOrganisationAssetSensor;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationAssetSensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AssetId = Components.Parameters.AssetId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly assetId: Parameters.AssetId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactoryAsset {
            export type Body = Components.RequestBodies.PostUserOrganisationFactoryAsset;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactoryAsset201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactoryIntervention {
            export type Body = Components.RequestBodies.PostUserOrganisationFactoryIntervention;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactoryIntervention201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactorySensor {
            export type Body = Components.RequestBodies.PostUserOrganisationFactorySensor;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactorySensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationInvitation {
            export type Body = Components.RequestBodies.PostUserOrganisationInvitation;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationInvitation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationInvitationFollowup {
            export type Body = Components.RequestBodies.PostUserOrganisationInvitationFollowup;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationInvitationFollowup201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationNotificationRead {
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationNotificationRead201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type NotificationId = Components.Parameters.NotificationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly notificationId: Parameters.NotificationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationProject {
            export type Body = Components.RequestBodies.PostUserOrganisationProject;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationProject201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutAttachment {
            export type Body = Components.RequestBodies.Attachment;
            export namespace Responses {
                export type $201 = Components.Responses.PutAttachment201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type WithAlertId = Components.Parameters.WithAlertId;
                export type WithReportId = Components.Parameters.WithReportId;
                export type WithInterventionId = Components.Parameters.WithInterventionId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.AttachmentFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly attachmentId: Parameters.AttachmentId;
                readonly withAlertId?: Parameters.WithAlertId;
                readonly withReportId?: Parameters.WithReportId;
                readonly withInterventionId?: Parameters.WithInterventionId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type WithAlertId = Components.Parameters.WithAlertId;
                export type WithInterventionId = Components.Parameters.WithInterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly withAlertId?: Parameters.WithAlertId;
                readonly withInterventionId?: Parameters.WithInterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutNotificationEvent {
            export type Body = Components.RequestBodies.PutNotificationEvent;
            export type Output = unknown;
            export namespace Parameters {
                export type NotificationId = Components.Parameters.NotificationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly notificationId: Parameters.NotificationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutOrganisationFactoryEvent {
            export type Body = Components.RequestBodies.PutOrganisationFactoryEvent;
            export type Output = unknown;
            export namespace Parameters {
                export type HasAttachments = Components.Parameters.PutOrganisationFactoryEvent3;
                export type HasImages = Components.Parameters.PutOrganisationFactoryEvent4;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type EventId = Components.Parameters.EventId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly hasAttachments?: Parameters.HasAttachments;
                readonly hasImages?: Parameters.HasImages;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly eventId: Parameters.EventId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertFeedback {
            export type Body = Components.RequestBodies.PutUserOrganisationAlertFeedback;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertFeedback201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAssetSensor {
            export type Body = Components.RequestBodies.PutUserOrganisationAssetSensor;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAssetSensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AssetId = Components.Parameters.AssetId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly assetId: Parameters.AssetId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactory {
            export type Body = Components.RequestBodies.PutUserOrganisationFactory;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactory201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryAsset {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryAsset;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactoryAsset201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type AssetId = Components.Parameters.AssetId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly assetId: Parameters.AssetId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryIntervention {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryIntervention;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactoryIntervention201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryPreferences {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryPreferences;
            export namespace Responses {
                export type $201 = Components.Responses.PreferencesResponse<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type Level = Components.Parameters.PreferenceLevel;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly level: Parameters.Level;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactorySensor {
            export type Body = Components.RequestBodies.PutUserOrganisationFactorySensor;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactorySensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOAuth2Authorize {
            export type Output = unknown;
            export namespace Parameters {
                export type ResponseType = Components.Parameters.ResponseType;
                export type ClientId = Components.Parameters.ClientId;
                export type RedirectUri = Components.Parameters.RedirectURI;
                export type Scope = Components.Parameters.Scope;
                export type State = Components.Parameters.State;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly responseType: Parameters.ResponseType;
                readonly clientId: Parameters.ClientId;
                readonly redirectUri?: Parameters.RedirectUri;
                readonly scope?: Parameters.Scope;
                readonly state: Parameters.State;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetPing {
            export namespace Responses {
                export type $200 = Components.Responses.GetPing200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
    }
    export namespace Parameters {
        export type AlertId = Components.Schemas.AlertUUID;
        export type Direction = [
            Components.Schemas.SortDirection,
            ...Components.Schemas.SortDirection[]
        ];
        export type FromFilter = Components.Schemas.Date;
        export type ToFilter = Components.Schemas.Date;
        export type OptionalWithAlertsIds = Components.Schemas.AlertsUUIDS;
        export type WithAlertsStatuses = Components.Schemas.AlertStatuses;
        export type AlertsSortBy = [
            Components.Schemas.AlertsSortByValue,
            ...Components.Schemas.AlertsSortByValue[]
        ];
        export type WithAlertId = Components.Schemas.AlertUUID;
        export type WithAttachments = boolean;
        export type WithImages = boolean;
        export type WithOrphanAlertsOnly = boolean;
        export type ApplicationId = Components.Schemas.ApplicationUUID;
        export type OptionalWithApplicationsIds = Components.Schemas.ApplicationsUUIDS;
        export type ApplicationsSortBy = [
            Components.Schemas.ApplicationsSortByValue,
            ...Components.Schemas.ApplicationsSortByValue[]
        ];
        export type AssetId = Components.Schemas.AssetUUID;
        export type IncludeChildrenIds = boolean;
        export type OptionalWithAssetsIds = Components.Schemas.AssetsUUIDS;
        export type OptionalWithAssetsTypes = Components.Schemas.AssetType[];
        export type OptionalWithParentsAssetsIds = Components.Schemas.AssetsUUIDS;
        export type OptionalWithRootAssetsFirst = boolean;
        export type AssetsSortBy = [
            Components.Schemas.AssetsSortByValue,
            ...Components.Schemas.AssetsSortByValue[]
        ];
        export type AfterDate = Components.Schemas.Date;
        export type BeforeDate = Components.Schemas.Date;
        export type Before = Components.Schemas.Cursor;
        export type EventId = Components.Schemas.EventUUID;
        export type OptionalsensorsIds = Components.Schemas.NonEmptySensorsUUIDS;
        export type OptionalvaluesNames = Components.Schemas.NonEmptyValuesNames;
        export type OptionalWithEventsIds = Components.Schemas.EventsUUIDS;
        export type OptionalWithEventType = Components.Schemas.EventTypes;
        export type OptionalWithFactoriesIds = Components.Schemas.FactoriesUUIDS;
        export type OptionalWithOrganisationsIds = Components.Schemas.OrganisationsUUIDS;
        export type OptionalWithUsersFeedback = boolean;
        export type Since = Components.Schemas.Cursor;
        export type Size = Components.Schemas.Size;
        export type FactoryId = Components.Schemas.FactoryUUID;
        export type FactoriesSortBy = [
            Components.Schemas.FactoriesSortByValue,
            ...Components.Schemas.FactoriesSortByValue[]
        ];
        export type InterventionId = Components.Schemas.InterventionUUID;
        export type OptionalWithInterventionsIds = Components.Schemas.InterventionsUUIDS;
        export type InterventionsSortBy = [
            Components.Schemas.InterventionsSortByValue,
            ...Components.Schemas.InterventionsSortByValue[]
        ];
        export type WithInterventionId = Components.Schemas.InterventionUUID;
        export type MockName = Components.Schemas.MockName;
        export type OrganisationId = Components.Schemas.OrganisationUUID;
        export type OrganisationsSortBy = [
            Components.Schemas.OrganisationsSortByValue,
            ...Components.Schemas.OrganisationsSortByValue[]
        ];
        export type ProjectId = Components.Schemas.ProjectUUID;
        export type OptionalWithProjectsIds = Components.Schemas.ProjectsUUIDS;
        export type ProjectCode = Components.Schemas.ProjectCode;
        export type ProjectsSortBy = [
            Components.Schemas.ProjectsSortByValue,
            ...Components.Schemas.ProjectsSortByValue[]
        ];
        export type OptionalWithReportsIds = Components.Schemas.ReportsUUIDS;
        export type ReportId = Components.Schemas.ReportUUID;
        export type ReportsSortBy = [
            Components.Schemas.ReportsSortByValue,
            ...Components.Schemas.ReportsSortByValue[]
        ];
        export type WithReportId = Components.Schemas.ReportUUID;
        export type WithAlertTriggerTypes = Components.Schemas.AlertTriggerTypes;
        export type OptionalWithSensorsIds = Components.Schemas.SensorsUUIDS;
        export type SensorId = Components.Schemas.SensorUUID;
        export type SensorsSortBy = [
            Components.Schemas.SensorsSortByValue,
            ...Components.Schemas.SensorsSortByValue[]
        ];
        export type ValueName = Components.Schemas.ValueName;
        export type WithFactorySensorsOnly = boolean;
        export type Aggregations = Components.Schemas.Aggregations;
        export type From = Components.Schemas.Date;
        export type Granularity = Components.Schemas.Granularity;
        export type WithTimeZone = Components.Schemas.TimeZone;
        export type To = Components.Schemas.Date;
        export type SensorEventTypesQueryParameter = Components.Schemas.EventTypes;
        export type IncludeLabels = boolean;
        export type OptionalWithAssetConfigurations = Components.Schemas.AssetConfigurations;
        export type OptionalWithDataLabels = Components.Schemas.Tags;
        export type OptionalWithManufacturingCycles = Components.Schemas.ManufacturingCycles;
        export type OptionalWithManufacturingPhases = Components.Schemas.ManufacturingPhases;
        export type OptionalWithValuedLabelsNames = Components.Schemas.ValuedLabelName[];
        export type OptionalWithValuedLabelsValues = Components.Schemas.LabelValue[];
        export type EventField = Components.Schemas.EventField;
        export type EventFieldsQueryParameter = Components.Schemas.EventFields;
        export type SensorsIds = Components.Schemas.NonEmptySensorsUUIDS;
        export type ValuesNames = Components.Schemas.NonEmptyValuesNames;
        export type OptionalWithAncestorsIds = Components.Schemas.AssetsUUIDS;
        export type TasksSortBy = [
            Components.Schemas.TasksSortByValue,
            ...Components.Schemas.TasksSortByValue[]
        ];
        export type WithPriorities = Components.Schemas.Priorities;
        export type WithTasksStatuses = Components.Schemas.TasksStatuses;
        export type WithTasksTypes = Components.Schemas.TasksTypes;
        export type SearchSentence = string;
        export type SearchType = Components.Schemas.SearchType;
        export type WithFilterIds = Components.Schemas.UUID[];
        export type WithFilterTypes = Components.Schemas.SearchFilterType[];
        export type IncludeOrganisationLevelItemsQueryParameter = boolean;
        export type OptionalWithNotificationTypesQueryParameter = Components.Schemas.NotificationTypes;
        export type WithMembershipsStatuses = Components.Schemas.UserMembershipStatus[];
        export type OptionalWithUsersIds = Components.Schemas.UsersUUIDS;
        export type Limit = Components.Schemas.Limit;
        export type Start = Components.Schemas.Start;
        export type UsersSortBy = [
            Components.Schemas.UsersSortByValue,
            ...Components.Schemas.UsersSortByValue[]
        ];
        export type UserId = Components.Schemas.UserUUID;
        export type Date = Components.Schemas.Date;
        export type IngestionStage = Components.Schemas.IngestionStage;
        export type Cookie = string;
        export type NotificationId = Components.Schemas.NotificationUUID;
        export type AttachmentFileType = "application/pdf" | "text/html";
        export type AttachmentId = Components.Schemas.AttachmentUUID;
        export type FileName = string;
        export type FileSize = number;
        export type ImageFileType = "image/jpeg" | "image/png";
        export type ImageId = Components.Schemas.ImageUUID;
        export type RunId = Components.Schemas.UUID;
        export type PreferenceLevel = Components.Schemas.PreferenceLevel;
        export type ClientId = string;
        export type RedirectURI = string;
        export type ResponseType = "code" | "token";
        export type Scope = string;
        export type State = string;
        export type XSdkVersion = string;
        export type XApplicationVersion = string;
        export type XApiVersion = string;
        export type DeleteUserOrganisationMembership2 = string;
        export type GetOpenAPI0 = string[];
        export type PostUser0 = string;
        export type PutOrganisationFactoryEvent3 = boolean;
        export type PutOrganisationFactoryEvent4 = boolean;
    }
    export namespace Responses {
        export type AlertItemResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertItem;
        };
        export type AlertsCollection<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsItems;
        };
        export type EventDataResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorsEventData;
        };
        export type TasksCollection<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesTasksCollectionBody0;
        };
        export type AllPreferencesResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AllPreferencesModel;
        };
        export type PreferencesResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.PartialPreferencesModel;
        };
        export type PutUserOrganisationAlertAttachment201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationApplication201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationItem;
        };
        export type PutUserOrganisationInterventionImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationProject201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type GetAlertsStats200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsStats;
        };
        export type GetAuthProfile200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type GetOpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPI200Body0;
        };
        export type GetOrganisationFactory200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type GetOrganisationFactoryAlertsStats200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsStat;
        };
        export type GetOrganisationFactoryAsset200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type GetOrganisationFactoryAssets200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetsItems;
        };
        export type GetOrganisationFactoryDataLabels200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationFactoryDataLabels200Body0;
        };
        export type GetOrganisationFactoryEvents200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.EventsItems;
        };
        export type GetOrganisationFactoryIntervention200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type GetOrganisationFactoryInterventions200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionsItems;
        };
        export type GetOrganisationFactoryReports200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ReportsItems;
        };
        export type GetOrganisationFactorySensor200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type GetOrganisationFactorySensors200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorsItems;
        };
        export type GetOrganisationFactoryTrends200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TrendItems;
        };
        export type GetOrganisationProject200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type GetOrganisationProjects200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectsItems;
        };
        export type GetOrganisationSensorsAggregateData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateData200Body0;
        };
        export type GetOrganisationSensorsAggregateEventData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateEventData200Body0;
        };
        export type GetOrganisationSensorsAggregateEventRangeData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateEventRangeData200Body0;
        };
        export type GetOrganisationSensorsData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsData200Body0;
        };
        export type GetOrganisationSensorsEventRangeData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsEventRangeData200Body0;
        };
        export type GetOrganisationUniversalSearch200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationUniversalSearch200Body0;
        };
        export type PutReport201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUniversalSearch200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetUniversalSearch200Body0;
        };
        export type GetUser200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type PutUser201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type GetUserFactories200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoriesItems;
        };
        export type GetUserNotifications200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.NotificationsItems;
        };
        export type GetUserOrganisation200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type PutUserOrganisation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type GetUserOrganisationApplications200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationsItems;
        };
        export type PostUserOrganisationApplication201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationItem;
        };
        export type GetUserOrganisationFactories200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoriesItems;
        };
        export type PostUserOrganisationFactory201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type GetUserOrganisationUsers200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UsersItems;
        };
        export type GetUserOrganisations200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationsItems;
        };
        export type PostUserOrganisation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type PostUser201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type PostAuthLogin200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthLogin200Body0;
        };
        export type PostAuthPasswordChange200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthPasswordChange200Body0;
        };
        export type PostAuthRefresh200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthRefresh200Body0;
        };
        export type PostAuthVerify200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "set-cookie"?: Components.Headers.PostAuthVerify200HeadersSetCookie;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthVerify200Body0;
        };
        export type PostOAuth2Token200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2Token200Body0;
        };
        export type PostOrganisationData201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostPasswordChangeRequest200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserInvitationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationAssetSensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PostUserOrganisationFactoryAsset201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type PostUserOrganisationFactoryIntervention201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type PostUserOrganisationFactorySensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PostUserOrganisationInvitation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostUserOrganisationInvitation201Body0;
        };
        export type PostUserOrganisationInvitationFollowup201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationNotificationRead201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationProject201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type PutAttachment201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertFeedback201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAssetSensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PutUserOrganisationFactory201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type PutUserOrganisationFactoryAsset201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type PutUserOrganisationFactoryIntervention201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type PutUserOrganisationFactorySensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type GetPing200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPing200Body0;
        };
    }
    export namespace PathItems {
        export namespace AlertsalertId {
            export import Delete = Components.Operations.DeleteAlert;
        }
        export namespace ApplicationsapplicationId {
            export import Delete = Components.Operations.DeleteApplication;
        }
        export namespace InterventionsinterventionId {
            export import Delete = Components.Operations.DeleteIntervention;
        }
        export namespace ProjectsprojectId {
            export import Delete = Components.Operations.DeleteProject;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlert;
            export import Get = Components.Operations.GetUserOrganisationAlert;
            export import Put = Components.Operations.PutUserOrganisationAlert;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdattachmentsattachmentId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlertAttachment;
            export import Put = Components.Operations.PutUserOrganisationAlertAttachment;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdimagesimageId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlertImage;
            export import Put = Components.Operations.PutUserOrganisationAlertImage;
        }
        export namespace UsersuserIdorganisationsorganisationIdapplicationsapplicationId {
            export import Delete = Components.Operations.DeleteUserOrganisationApplication;
            export import Put = Components.Operations.PutUserOrganisationApplication;
        }
        export namespace UsersuserIdorganisationsorganisationIdinterventionsinterventionId {
            export import Delete = Components.Operations.DeleteUserOrganisationIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdinterventionsinterventionIdimagesimageId {
            export import Delete = Components.Operations.DeleteUserOrganisationInterventionImage;
            export import Put = Components.Operations.PutUserOrganisationInterventionImage;
        }
        export namespace UsersuserIdorganisationsorganisationIdmembershipscollaboratorId {
            export import Delete = Components.Operations.DeleteUserOrganisationMembership;
        }
        export namespace UsersuserIdorganisationsorganisationIdprojectsprojectId {
            export import Delete = Components.Operations.DeleteUserOrganisationProject;
            export import Put = Components.Operations.PutUserOrganisationProject;
        }
        export namespace UsersuserIdorganisationsorganisationIdsensorssensorIdseriesvalueName {
            export import Delete = Components.Operations.DeleteUserOrganisationSensorSeries;
        }
        export namespace Alertsstats {
            export import Get = Components.Operations.GetAlertsStats;
        }
        export namespace Authprofile {
            export import Get = Components.Operations.GetAuthProfile;
        }
        export namespace Me {
            export import Get = Components.Operations.GetMySelf;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryId {
            export import Get = Components.Operations.GetOrganisationFactory;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdalertsstats {
            export import Get = Components.Operations.GetOrganisationFactoryAlertsStats;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdassetsassetId {
            export import Get = Components.Operations.GetOrganisationFactoryAsset;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdassets {
            export import Get = Components.Operations.GetOrganisationFactoryAssets;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdlabels {
            export import Get = Components.Operations.GetOrganisationFactoryDataLabels;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdevents {
            export import Get = Components.Operations.GetOrganisationFactoryEvents;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdinterventionsinterventionId {
            export import Get = Components.Operations.GetOrganisationFactoryIntervention;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdinterventions {
            export import Get = Components.Operations.GetOrganisationFactoryInterventions;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdreports {
            export import Get = Components.Operations.GetOrganisationFactoryReports;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdsensorssensorId {
            export import Get = Components.Operations.GetOrganisationFactorySensor;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdsensors {
            export import Get = Components.Operations.GetOrganisationFactorySensors;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdtrends {
            export import Get = Components.Operations.GetOrganisationFactoryTrends;
        }
        export namespace OrganisationsorganisationIdprojectsprojectId {
            export import Get = Components.Operations.GetOrganisationProject;
        }
        export namespace OrganisationsorganisationIdprojects {
            export import Get = Components.Operations.GetOrganisationProjects;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateData;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateEventData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateEventData;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateEventRangeData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateEventRangeData;
        }
        export namespace OrganisationsorganisationIdsensorsdata {
            export import Get = Components.Operations.GetOrganisationSensorsData;
        }
        export namespace OrganisationsorganisationIdsensorseventData {
            export import Get = Components.Operations.GetOrganisationSensorsEventData;
        }
        export namespace OrganisationsorganisationIdsensorseventRangeDataSchema {
            export import Get = Components.Operations.GetOrganisationSensorsEventRangeData;
        }
        export namespace OrganisationsorganisationIdsearch {
            export import Get = Components.Operations.GetOrganisationUniversalSearch;
        }
        export namespace ReportsreportId {
            export import Put = Components.Operations.PutReport;
        }
        export namespace Search {
            export import Get = Components.Operations.GetUniversalSearch;
        }
        export namespace UsersuserId {
            export import Get = Components.Operations.GetUser;
            export import Put = Components.Operations.PutUser;
        }
        export namespace UsersuserIdfactories {
            export import Get = Components.Operations.GetUserFactories;
        }
        export namespace UsersuserIdnotifications {
            export import Get = Components.Operations.GetUserNotifications;
        }
        export namespace UsersuserIdorganisationsorganisationId {
            export import Get = Components.Operations.GetUserOrganisation;
            export import Put = Components.Operations.PutUserOrganisation;
        }
        export namespace UsersuserIdorganisationsorganisationIdalerts {
            export import Get = Components.Operations.GetUserOrganisationAlerts;
        }
        export namespace UsersuserIdorganisationsorganisationIdapplications {
            export import Get = Components.Operations.GetUserOrganisationApplications;
            export import Post = Components.Operations.PostUserOrganisationApplication;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactories {
            export import Get = Components.Operations.GetUserOrganisationFactories;
            export import Post = Components.Operations.PostUserOrganisationFactory;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdpreferences {
            export import Get = Components.Operations.GetUserOrganisationFactoryPreferences;
        }
        export namespace UsersuserIdorganisationsorganisationIdtasks {
            export import Get = Components.Operations.GetUserOrganisationTasks;
        }
        export namespace UsersuserIdorganisationsorganisationIdusers {
            export import Get = Components.Operations.GetUserOrganisationUsers;
        }
        export namespace UsersuserIdorganisations {
            export import Get = Components.Operations.GetUserOrganisations;
            export import Post = Components.Operations.PostUserOrganisation;
        }
        export namespace Users {
            export import Post = Components.Operations.PostUser;
        }
        export namespace Authlogin {
            export import Post = Components.Operations.PostAuthLogin;
        }
        export namespace Authlogout {
            export import Post = Components.Operations.PostAuthLogout;
        }
        export namespace AuthchangePassword {
            export import Post = Components.Operations.PostAuthPasswordChange;
        }
        export namespace Authrefresh {
            export import Post = Components.Operations.PostAuthRefresh;
        }
        export namespace Authverify {
            export import Post = Components.Operations.PostAuthVerify;
        }
        export namespace Oauth2Token {
            export import Post = Components.Operations.PostOAuth2Token;
        }
        export namespace OrganisationsorganisationIddataprojectCode {
            export import Post = Components.Operations.PostOrganisationData;
        }
        export namespace Oauth2Reset {
            export import Post = Components.Operations.PostPasswordChangeRequest;
        }
        export namespace UsersuserIdinvitationsresponse {
            export import Post = Components.Operations.PostUserInvitationResponse;
        }
        export namespace UsersuserIdorganisationsorganisationIdassetsassetIdsensors {
            export import Post = Components.Operations.PostUserOrganisationAssetSensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdassets {
            export import Post = Components.Operations.PostUserOrganisationFactoryAsset;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdinterventions {
            export import Post = Components.Operations.PostUserOrganisationFactoryIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdsensors {
            export import Post = Components.Operations.PostUserOrganisationFactorySensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdinvitations {
            export import Post = Components.Operations.PostUserOrganisationInvitation;
        }
        export namespace UsersuserIdorganisationsorganisationIdinvitationfollowup {
            export import Post = Components.Operations.PostUserOrganisationInvitationFollowup;
        }
        export namespace OrganisationsorganisationIdusersuserIdnotificationsnotificationIdread {
            export import Post = Components.Operations.PostUserOrganisationNotificationRead;
        }
        export namespace UsersuserIdorganisationsorganisationIdprojects {
            export import Post = Components.Operations.PostUserOrganisationProject;
        }
        export namespace AttachmentsattachmentId {
            export import Put = Components.Operations.PutAttachment;
        }
        export namespace ImagesimageId {
            export import Put = Components.Operations.PutImage;
        }
        export namespace NotificationsnotificationId {
            export import Put = Components.Operations.PutNotificationEvent;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdeventseventId {
            export import Put = Components.Operations.PutOrganisationFactoryEvent;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdfeedback {
            export import Put = Components.Operations.PutUserOrganisationAlertFeedback;
        }
        export namespace UsersuserIdorganisationsorganisationIdassetsassetIdsensorssensorId {
            export import Put = Components.Operations.PutUserOrganisationAssetSensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryId {
            export import Put = Components.Operations.PutUserOrganisationFactory;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdassetsassetId {
            export import Put = Components.Operations.PutUserOrganisationFactoryAsset;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdinterventionsinterventionId {
            export import Put = Components.Operations.PutUserOrganisationFactoryIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdpreferenceslevel {
            export import Put = Components.Operations.PutUserOrganisationFactoryPreferences;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdsensorssensorId {
            export import Put = Components.Operations.PutUserOrganisationFactorySensor;
        }
        export namespace Oauth2Authorize {
            export import Get = Components.Operations.GetOAuth2Authorize;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type Aveva = Components.Schemas.RequestBodiesAvevaBody0;
        export type PowerTrackSyncConfig = Components.Schemas.RequestBodiesPowerTrackSyncConfigBody0;
        export type OpenSearchSnapshot = Components.Schemas.RequestBodiesOpenSearchSnapshotBody0;
        export type Attachment = Components.Schemas.BinaryModel | Components.Schemas.BinaryModel;
        export type Image = Components.Schemas.BinaryModel | Components.Schemas.BinaryModel;
        export type Report = Components.Schemas.ReportModel;
        export type PutUserOrganisationAlert = Components.Schemas.AlertModel;
        export type PutUserOrganisationApplication = Components.Schemas.ApplicationModel;
        export type PutUserOrganisationProject = Components.Schemas.ProjectModel;
        export type PutUser = Components.Schemas.UserModel;
        export type PutUserOrganisation = Components.Schemas.OrganisationModel;
        export type PostUserOrganisationApplication = Components.Schemas.ApplicationModel;
        export type PostUserOrganisationFactory = Components.Schemas.FactoryModel;
        export type PostUserOrganisation = Components.Schemas.OrganisationModel;
        export type PostUser = Components.Schemas.UserModel;
        export type PostAuthLogin = Components.Schemas.RequestBodiesPostAuthLoginBody0;
        export type PostAuthPasswordChange = Components.Schemas.RequestBodiesPostAuthPasswordChangeBody0;
        export type PostAuthRefresh = Components.Schemas.RequestBodiesPostAuthRefreshBody0;
        export type PostAuthVerify = Components.Schemas.RequestBodiesPostAuthVerifyBody0;
        export type PostOAuth2Token = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostOrganisationData = Components.Schemas.InputData;
        export type PostPasswordChangeRequest = Components.Schemas.RequestBodiesPostPasswordChangeRequestBody0;
        export type PostUserInvitationResponse = Components.Schemas.RequestBodiesPostUserInvitationResponseBody0;
        export type PostUserOrganisationAssetSensor = Components.Schemas.SensorModel;
        export type PostUserOrganisationFactoryAsset = Components.Schemas.AssetModel;
        export type PostUserOrganisationFactoryIntervention = Components.Schemas.InterventionModel;
        export type PostUserOrganisationFactorySensor = Components.Schemas.SensorModel;
        export type PostUserOrganisationInvitation = Components.Schemas.UserOrganisationInvitation;
        export type PostUserOrganisationInvitationFollowup = Components.Schemas.RequestBodiesPostUserOrganisationInvitationFollowupBody0;
        export type PostUserOrganisationProject = Components.Schemas.ProjectModel;
        export type PutNotificationEvent = Components.Schemas.NotificationEvent;
        export type PutOrganisationFactoryEvent = Components.Schemas.EventModel;
        export type PutUserOrganisationAlertFeedback = Components.Schemas.RequestBodiesPutUserOrganisationAlertFeedbackBody0;
        export type PutUserOrganisationAssetSensor = Components.Schemas.SensorModel;
        export type PutUserOrganisationFactory = Components.Schemas.FactoryModel;
        export type PutUserOrganisationFactoryAsset = Components.Schemas.AssetModel;
        export type PutUserOrganisationFactoryIntervention = Components.Schemas.InterventionModel;
        export type PutUserOrganisationFactoryPreferences = Components.Schemas.PartialPreferencesModel;
        export type PutUserOrganisationFactorySensor = Components.Schemas.SensorModel;
    }
    export namespace Headers {
        export type PostAuthVerify200HeadersSetCookie = string[];
    }
    export namespace Schemas {
        export type RequestBodiesAvevaBody0 = {
            projectCode: Components.Schemas.ProjectCode;
        };
        export type RequestBodiesPowerTrackSyncConfigBody0 = {
            projectCode: Components.Schemas.ProjectCode;
        };
        export type RequestBodiesOpenSearchSnapshotBody0 = {
            operation: "restore" | "backup";
        };
        export type BinaryModel = string & {
            _type?: "BinaryModel";
        };
        export type ReportModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.ReportUUID;
            attachmentId?: Components.Schemas.AttachmentUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            authorId: Components.Schemas.UserUUID;
            factoryId: Components.Schemas.FactoryUUID;
            data: Components.Schemas.ReportData;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        };
        export type AlertModel = Components.Schemas.SynchronizableItem & Components.Schemas.BaseAlertModel;
        export type ApplicationModel = {
            id?: Components.Schemas.ApplicationUUID;
            authorId?: Components.Schemas.UserUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            data: Components.Schemas.ApplicationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            secret?: string;
        };
        export type ProjectModel = {
            id?: Components.Schemas.ProjectUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            author?: Components.Schemas.UserUUID;
            data: Components.Schemas.ProjectData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type UserModel = {
            id?: Components.Schemas.UserUUID;
            roles?: Components.Schemas.Role[];
            password?: string;
            memberships?: Components.Schemas.UserMembership[];
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            emailStatus?: Components.Schemas.EmailStatus;
        };
        export type OrganisationModel = {
            id?: Components.Schemas.OrganisationUUID;
            factoriesIds?: Components.Schemas.FactoriesUUIDS;
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type FactoryModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.FactoryUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            rootAssetsIds?: Components.Schemas.AssetsUUIDS;
            linkedOrganisationsIds?: Components.Schemas.OrganisationsUUIDS;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type RequestBodiesPostAuthLoginBody0 = {
            username: string;
            password: string;
            scope?: string;
            remember?: boolean;
        };
        export type RequestBodiesPostAuthPasswordChangeBody0 = {
            token: string;
            oldPassword?: string;
            newPassword: string;
        };
        export type RequestBodiesPostAuthRefreshBody0 = {
            scope?: string;
            remember?: boolean;
        };
        export type RequestBodiesPostAuthVerifyBody0 = {
            verifyToken: string;
        };
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type InputData = Components.Schemas.GroupedInputData | Components.Schemas.DenormalizedInputData;
        export type RequestBodiesPostPasswordChangeRequestBody0 = {
            email: string;
        };
        export type RequestBodiesPostUserInvitationResponseBody0 = {
            accepted: boolean;
            organisationId: Components.Schemas.OrganisationUUID;
        };
        export type SensorModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.SensorUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            assetId?: Components.Schemas.AssetUUID;
            data: Components.Schemas.SensorData;
            stats?: Components.Schemas.SensorStats;
            inferredType?: Components.Schemas.SensorInferredType;
            firstEmission?: Components.Schemas.FirstEmission;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            queries?: {
                [pattern: string]: Components.Schemas.SensorQuery;
            };
        };
        export type AssetModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.AssetUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            childrenIds?: Components.Schemas.AssetsUUIDS;
            ancestorsIds?: Components.Schemas.AssetsUUIDS;
            metrics?: Components.Schemas.LineMetrics;
            currentConfiguration?: Components.Schemas.AssetConfiguration;
            currentPhase?: Components.Schemas.ManufacturingPhase;
            currentCycle?: Components.Schemas.ManufacturingCycle;
            powerState?: "unknown" | "on" | "off";
            operatingState?: "unknown" | "normal" | "stopped" | "idle";
            healthState?: "unknown" | "good" | "faulty" | "erroring";
            data: Components.Schemas.AssetData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type InterventionModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.InterventionUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            authorId?: Components.Schemas.UserUUID;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            qualifiedAt?: Components.Schemas.Date;
            reportedAt?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
            taskStatus?: Components.Schemas.TaskStatus;
            data: Components.Schemas.InterventionData;
        };
        export type UserOrganisationInvitation = {
            email: string;
            givenName: string;
            familyName: string;
            membership: Components.Schemas.FactoryScopedUserOrganisationMembership | Components.Schemas.GlobalUserOrganisationMembership;
        };
        export type RequestBodiesPostUserOrganisationInvitationFollowupBody0 = {
            userId: Components.Schemas.UserUUID;
        };
        export type NotificationEvent = Components.Schemas.AlertDeletedEvent | Components.Schemas.AlertUpsertedEvent | Components.Schemas.AlgorithmModelUpdatedEvent | Components.Schemas.ApplicationDeletedEvent | Components.Schemas.ApplicationUpsertedEvent | Components.Schemas.AssetDeletedEvent | Components.Schemas.AssetUpsertedEvent | Components.Schemas.EmailStatusUpdatedEvent | Components.Schemas.FactoryDeletedEvent | Components.Schemas.FactoryUpsertedEvent | Components.Schemas.InterventionDeletedEvent | Components.Schemas.InterventionUpsertedEvent | Components.Schemas.MembershipCancelledEvent | Components.Schemas.OrganisationDeletedEvent | Components.Schemas.OrganisationPreferencesUpsertedEvent | Components.Schemas.OrganisationUpsertedEvent | Components.Schemas.OrganisationUserUpdatedEvent | Components.Schemas.PasswordChangeRequestedEvent | Components.Schemas.ProjectDeletedEvent | Components.Schemas.ProjectUpsertedEvent | Components.Schemas.ReportDeletedEvent | Components.Schemas.ReportUpsertedEvent | Components.Schemas.SensorDeletedEvent | Components.Schemas.SensorSeriesDeletedEvent | Components.Schemas.SensorUpsertedEvent | Components.Schemas.UserCreatedEvent | Components.Schemas.UserFeedbackUpdatedEvent | Components.Schemas.UserInvitedInOrganisationEvent | Components.Schemas.UserUpdatedEvent | Components.Schemas.VirtualSensorComputeRequestedEvent;
        export type EventModel = Components.Schemas.SegmentedAlertDetectionPredictEventModel | Components.Schemas.ForecastLearnEventModel | Components.Schemas.RealtimeAlertEventSchemaModel | Components.Schemas.DriftDetectionEventModel | Components.Schemas.ForecastPredictEventModel | Components.Schemas.DSPADPredictEventModel | Components.Schemas.ProcessEventSchemaModel | Components.Schemas.AnomalyEventModel | Components.Schemas.DSPADDataAnalysisEventModel | Components.Schemas.CycleEventModel | Components.Schemas.PhaseEventModel;
        export type RequestBodiesPutUserOrganisationAlertFeedbackBody0 = {
            userFeedback: Components.Schemas.UserFeedback;
        };
        export type PartialPreferencesModel = {
            displayParentName?: boolean;
            sensorDisplayExternalId?: boolean;
            sensorDisplaySerie?: Components.Schemas.SensorDisplaySerie;
            useFactoryTimeZone?: boolean;
            showGraphLabels?: boolean;
            showGraphConfigurations?: boolean;
            showGraphCycles?: boolean;
            showGraphPhases?: boolean;
        };
        export type AlertUUID = string & {
            _type?: "AlertUUID";
        };
        export type SortDirection = ("asc" | "desc") & {
            _type?: "SortDirection";
        };
        export type Date = string & {
            _type?: "Date";
        };
        export type AlertsUUIDS = Components.Schemas.AlertUUID[];
        export type AlertStatuses = [
            Components.Schemas.AlertStatus,
            ...Components.Schemas.AlertStatus[]
        ];
        export type AlertsSortByValue = ("severity" | "priority" | "assignedAt" | "startAt" | "creation" | "lastModification") & {
            _type?: "AlertsSortByValue";
        };
        export type ApplicationUUID = string & {
            _type?: "ApplicationUUID";
        };
        export type ApplicationsUUIDS = Components.Schemas.ApplicationUUID[];
        export type ApplicationsSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "ApplicationsSortByValue";
        };
        export type AssetUUID = string & {
            _type?: "AssetUUID";
        };
        export type AssetsUUIDS = Components.Schemas.AssetUUID[];
        export type AssetType = ("area" | "line" | "machine" | "part") & {
            _type?: "AssetType";
        };
        export type AssetsSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "AssetsSortByValue";
        };
        export type Cursor = string & {
            _type?: "Cursor";
        };
        export type EventUUID = string & {
            _type?: "EventUUID";
        };
        export type NonEmptySensorsUUIDS = [
            Components.Schemas.SensorUUID,
            ...Components.Schemas.SensorUUID[]
        ];
        export type NonEmptyValuesNames = [
            Components.Schemas.ValueName,
            ...Components.Schemas.ValueName[]
        ];
        export type EventsUUIDS = Components.Schemas.EventUUID[];
        export type EventTypes = Components.Schemas.EventType[];
        export type FactoriesUUIDS = Components.Schemas.FactoryUUID[];
        export type OrganisationsUUIDS = Components.Schemas.OrganisationUUID[];
        export type Size = number & {
            _type?: "Size";
        };
        export type FactoryUUID = string & {
            _type?: "FactoryUUID";
        };
        export type FactoriesSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "FactoriesSortByValue";
        };
        export type InterventionUUID = string & {
            _type?: "InterventionUUID";
        };
        export type InterventionsUUIDS = Components.Schemas.InterventionUUID[];
        export type InterventionsSortByValue = ("creation" | "lastModification" | "priority") & {
            _type?: "InterventionsSortByValue";
        };
        export type MockName = string & {
            _type?: "MockName";
        };
        export type OrganisationUUID = string & {
            _type?: "OrganisationUUID";
        };
        export type OrganisationsSortByValue = ("creation" | "lastModification") & {
            _type?: "OrganisationsSortByValue";
        };
        export type ProjectUUID = string & {
            _type?: "ProjectUUID";
        };
        export type ProjectsUUIDS = Components.Schemas.ProjectUUID[];
        export type ProjectCode = string & {
            _type?: "ProjectCode";
        };
        export type ProjectsSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "ProjectsSortByValue";
        };
        export type ReportsUUIDS = Components.Schemas.ReportUUID[];
        export type ReportUUID = string & {
            _type?: "ReportUUID";
        };
        export type ReportsSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "ReportsSortByValue";
        };
        export type AlertTriggerTypes = Components.Schemas.AlertType[];
        export type SensorsUUIDS = Components.Schemas.SensorUUID[];
        export type SensorUUID = string & {
            _type?: "SensorUUID";
        };
        export type SensorsSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "SensorsSortByValue";
        };
        export type ValueName = string & {
            _type?: "ValueName";
        };
        export type Aggregations = Components.Schemas.Aggregation[];
        export type Granularity = ("second" | "minute" | "fifteen_minute" | "thirty_minute" | "hour" | "day" | "week" | "month" | "quarter" | "year") & {
            _type?: "Granularity";
        };
        export type TimeZone = string & {
            _type?: "TimeZone";
        };
        export type AssetConfigurations = Components.Schemas.AssetConfiguration[];
        export type Tags = Components.Schemas.LabelValue[];
        export type ManufacturingCycles = Components.Schemas.ManufacturingCycle[];
        export type ManufacturingPhases = Components.Schemas.ManufacturingPhase[];
        export type ValuedLabelName = string & {
            _type?: "ValuedLabelName";
        };
        export type LabelValue = string & {
            _type?: "LabelValue";
        };
        export type EventField = "aggregatableValue1" | "aggregatableValue2" | "aggregatableValue3";
        export type EventFields = Components.Schemas.EventField[];
        export type TasksSortByValue = ("creation" | "lastModification") & {
            _type?: "TasksSortByValue";
        };
        export type Priorities = [
            Components.Schemas.Priority,
            ...Components.Schemas.Priority[]
        ];
        export type TasksStatuses = [
            Components.Schemas.TaskStatus,
            ...Components.Schemas.TaskStatus[]
        ];
        export type TasksTypes = [
            Components.Schemas.TaskType,
            ...Components.Schemas.TaskType[]
        ];
        export type SearchType = ("user" | "factory" | "project" | "asset" | "application" | "intervention" | "alert" | "report" | "sensor" | "organisation") & {
            _type?: "SearchType";
        };
        export type UUID = string & {
            _type?: "UUID";
        };
        export type SearchFilterType = ("factory" | "asset") & {
            _type?: "SearchFilterType";
        };
        export type NotificationTypes = Components.Schemas.NotificationType[];
        export type UserMembershipStatus = ("member" | "pending" | "declined" | "cancelled") & {
            _type?: "UserMembershipStatus";
        };
        export type UsersUUIDS = Components.Schemas.UserUUID[];
        export type Limit = (10 | 50 | 100 | 500 | 1000) & {
            _type?: "Limit";
        };
        export type Start = number & {
            _type?: "Start";
        };
        export type UsersSortByValue = ("creation" | "lastModification" | "name") & {
            _type?: "UsersSortByValue";
        };
        export type UserUUID = string & {
            _type?: "UserUUID";
        };
        export type IngestionStage = ("raw" | "enriched") & {
            _type?: "IngestionStage";
        };
        export type NotificationUUID = string & {
            _type?: "NotificationUUID";
        };
        export type AttachmentUUID = string & {
            _type?: "AttachmentUUID";
        };
        export type ImageUUID = string & {
            _type?: "ImageUUID";
        };
        export type PreferenceLevel = ("organisation" | "factory" | "user") & {
            _type?: "PreferenceLevel";
        };
        export type AlertItem = {
            item: Components.Schemas.AlertUUID;
            alerts: Components.Schemas.AlertModelHash;
            interventions?: Components.Schemas.InterventionModelHash;
            sensors?: Components.Schemas.SensorModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            images?: Components.Schemas.ImageModelHash;
        };
        export type AlertsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.AlertsUUIDS;
            alerts: Components.Schemas.AlertModelHash;
            interventions?: Components.Schemas.InterventionModelHash;
            sensors?: Components.Schemas.SensorModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            images?: Components.Schemas.ImageModelHash;
        };
        export type SensorsEventData = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesTasksCollectionBody0 = {
            total: number;
            stats: {
                alert?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
                intervention?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
                _all?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
            };
            items: Components.Schemas.TasksModel;
        };
        export type AllPreferencesModel = {
            default: Components.Schemas.DefaultPreferencesModel;
            organisation: Components.Schemas.PartialPreferencesModel;
            factory?: Components.Schemas.PartialPreferencesModel;
            user: Components.Schemas.PartialPreferencesModel;
        };
        export type ApplicationItem = {
            item: Components.Schemas.ApplicationUUID;
            applications: Components.Schemas.ApplicationModelHash;
        };
        export type ProjectItem = {
            item: Components.Schemas.ProjectUUID;
            projects: Components.Schemas.ProjectModelHash;
        };
        export type AlertsStats = Components.Schemas.AlertsStat[];
        export type UserItem = {
            item: Components.Schemas.UserUUID;
            users: Components.Schemas.UserModelHash;
        };
        export type ResponsesgetOpenAPI200Body0 = {};
        export type FactoryItem = {
            item: Components.Schemas.FactoryUUID;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type AlertsStat = {
            organisationId: Components.Schemas.OrganisationUUID;
            stats: {
                discarded: number;
                fixed: number;
                closed: number;
                open: number;
                total: number;
            };
        };
        export type AssetItem = {
            item: Components.Schemas.AssetUUID;
            assets: Components.Schemas.AssetModelHash;
        };
        export type AssetsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.AssetsUUIDS;
            assets: Components.Schemas.AssetModelHash;
        };
        export type ResponsesgetOrganisationFactoryDataLabels200Body0 = {
            key?: string;
            doc_count?: number;
        }[];
        export type EventsItems = {
            total: number;
            cursors: {
                before?: Components.Schemas.Cursor;
                since?: Components.Schemas.Cursor;
            };
            items: Components.Schemas.EventsUUIDS;
            events: Components.Schemas.EventModelHash;
        };
        export type InterventionItem = {
            item: Components.Schemas.InterventionUUID;
            interventions: Components.Schemas.InterventionModelHash;
            alerts?: Components.Schemas.AlertModelHash;
            images?: Components.Schemas.ImageModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            users?: Components.Schemas.UserModelHash;
        };
        export type InterventionsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.InterventionsUUIDS;
            interventions: Components.Schemas.InterventionModelHash;
            alerts?: Components.Schemas.AlertModelHash;
            images?: Components.Schemas.ImageModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            users?: Components.Schemas.UserModelHash;
        };
        export type ReportsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ReportsUUIDS;
            reports: Components.Schemas.ReportModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
        };
        export type SensorItem = {
            item: Components.Schemas.SensorUUID;
            sensors: Components.Schemas.SensorModelHash;
            assets?: Components.Schemas.AssetModelHash;
        };
        export type SensorsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.SensorsUUIDS;
            sensors: Components.Schemas.SensorModelHash;
            assets?: Components.Schemas.AssetModelHash;
        };
        export type TrendItems = {
            total: number;
            items: Components.Schemas.UUIDS;
            trends: Components.Schemas.TrendModelHash;
        };
        export type ProjectsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ProjectsUUIDS;
            projects: Components.Schemas.ProjectModelHash;
        };
        export type ResponsesgetOrganisationSensorsAggregateData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsAggregateEventData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsAggregateEventRangeData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            measures: Components.Schemas.Measures;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
        };
        export type ResponsesgetOrganisationSensorsEventRangeData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.RangeMeasures;
        };
        export type ResponsesgetOrganisationUniversalSearch200Body0 = {
            results?: {
                id: Components.Schemas.UserUUID | Components.Schemas.FactoryUUID | Components.Schemas.ProjectUUID | Components.Schemas.AssetUUID | Components.Schemas.ApplicationUUID | Components.Schemas.InterventionUUID | Components.Schemas.AlertUUID | Components.Schemas.ReportUUID | Components.Schemas.SensorUUID | Components.Schemas.OrganisationUUID;
                type: Components.Schemas.SearchType;
                snippet?: string;
            }[][];
            suggestions?: {}[];
            start?: number;
            total?: number;
        };
        export type ResponsesgetUniversalSearch200Body0 = {
            results?: {
                id: Components.Schemas.UserUUID | Components.Schemas.FactoryUUID | Components.Schemas.ProjectUUID | Components.Schemas.AssetUUID | Components.Schemas.ApplicationUUID | Components.Schemas.InterventionUUID | Components.Schemas.AlertUUID | Components.Schemas.ReportUUID | Components.Schemas.SensorUUID | Components.Schemas.OrganisationUUID;
                type: Components.Schemas.SearchType;
                snippet?: string;
            }[][];
            suggestions?: {}[];
            start?: number;
            total?: number;
        };
        export type FactoriesItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.FactoriesUUIDS;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type NotificationsItems = {
            total: Components.Schemas.Total;
            items: Components.Schemas.NotificationsUUIDS;
            notifications: Components.Schemas.NotificationModelHash;
        };
        export type OrganisationItem = {
            item: Components.Schemas.OrganisationUUID;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type ApplicationsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ApplicationsUUIDS;
            applications: Components.Schemas.ApplicationModelHash;
        };
        export type UsersItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.UsersUUIDS;
            users: Components.Schemas.UserModelHash;
        };
        export type OrganisationsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.OrganisationsUUIDS;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type ResponsespostAuthLogin200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: string;
            token_type?: string;
        };
        export type ResponsespostAuthPasswordChange200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: number;
            token_type?: string;
        };
        export type ResponsespostAuthRefresh200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: string;
            token_type?: string;
        };
        export type ResponsespostAuthVerify200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: number;
            token_type?: string;
        };
        export type ResponsespostOAuth2Token200Body0 = {
            access_token: string;
            token_type: "bearer" | "mac";
            expires_in?: number;
            refresh_token?: string;
        };
        export type ResponsespostUserOrganisationInvitation201Body0 = {
            user: Components.Schemas.UserItem;
            token: string;
        };
        export type ResponsesgetPing200Body0 = {
            pong?: "pong";
        };
        export type SynchronizableItem = {
            syncMode?: Components.Schemas.NoSyncMode;
            externalId?: string;
        } | {
            syncMode: Components.Schemas.DoSyncMode;
            externalId?: string;
        };
        export type ReportData = {
            name: string;
            description: string;
        };
        export type BaseAlertModel = {
            id?: Components.Schemas.AlertUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            assetId?: Components.Schemas.AssetUUID;
            assignations?: Components.Schemas.AlertAssignations;
            interventionId?: Components.Schemas.InterventionUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            sensorsIds?: Components.Schemas.SensorsUUIDS;
            sensorsValues?: Components.Schemas.ValuesNames;
            eventsIds?: Components.Schemas.EventsUUIDS;
            recurringAlertId?: Components.Schemas.AlertUUID;
            startAt?: Components.Schemas.Date;
            endAt?: Components.Schemas.Date;
            taskStatus?: Components.Schemas.TaskStatus;
            status?: Components.Schemas.AlertStatus;
            usersFeedback?: Components.Schemas.UsersFeedback;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            data?: Components.Schemas.BaseAlertData;
        };
        export type ApplicationData = {
            name: string;
            description: string;
            allowedScopes: [
                Components.Schemas.Scope,
                ...Components.Schemas.Scope[]
            ];
            allowedGrantTypes: [
                Components.Schemas.GrantType,
                ...Components.Schemas.GrantType[]
            ];
            callbackUrl: string;
            isActive: boolean;
        };
        export type ProjectData = {
            name: string;
            description: string;
            projectCode: Components.Schemas.ProjectCode;
            algorithms: Components.Schemas.MLAlgorithms;
            bridge: {
                type: "push";
            } | {
                type: "pull";
                handler?: string;
                schedule?: string;
            };
            ingestion?: Components.Schemas.ProjectIngestion;
            indexation?: Components.Schemas.ProjectIndexation;
        };
        export type Role = ("admin" | "user" | "candidate" | "third") & {
            _type?: "Role";
        };
        export type UserMembership = (Components.Schemas.FactoryScopedUserOrganisationMembership | Components.Schemas.GlobalUserOrganisationMembership) & {
            id: Components.Schemas.OrganisationUUID;
            status: Components.Schemas.UserMembershipStatus;
            lastInvitationDate: Components.Schemas.Date;
            canReinvite?: boolean;
        };
        export type UserData = {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type EmailStatus = ("bouncing" | "reachable" | "dropped" | "unknown") & {
            _type?: "EmailStatus";
        };
        export type OrganisationData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type FactoryData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type PasswordRequestBody = {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        export type AuthorizationCodeRequestBody = {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        export type ClientCredentialsRequestBody = {
            grant_type: "client_credentials";
            scope?: string;
        };
        export type RefreshTokenRequestBody = {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        export type VerifyTokenRequestBody = {
            grant_type: "verify_token";
            verify_token: Components.Schemas.VerifyToken;
        };
        export type PasswordChangeBody = {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        export type GroupedInputData = {
            date: string;
            values: {
                sensorId: string;
                valueName?: Components.Schemas.ValueName;
                value: number;
                precision?: Components.Schemas.ValuePrecision;
                labels?: Components.Schemas.Tags;
            }[];
        };
        export type DenormalizedInputData = {
            date: string;
            sensorId: string;
            valueName?: Components.Schemas.ValueName;
            value: number;
            precision?: Components.Schemas.ValuePrecision;
            labels?: Components.Schemas.Tags;
        }[];
        export type SensorData = {
            name: string;
            variables: Components.Schemas.SensorVariables;
            overridenType?: {
                [pattern: string]: Components.Schemas.SensorDataType;
            };
            series: [
                Components.Schemas.SensorSerie,
                ...Components.Schemas.SensorSerie[]
            ];
            alertsTriggers: {
                [pattern: string]: [
                    Components.Schemas.AlertTrigger,
                    ...Components.Schemas.AlertTrigger[]
                ];
            };
        };
        export type SensorStats = {
            [pattern: string]: {
                ever: {
                    cardinality?: number;
                    min: number;
                    max: number;
                    percentiles?: {
                        "1.0"?: number;
                        "5.0"?: number;
                        "25.0"?: number;
                        "50.0"?: number;
                        "75.0"?: number;
                        "95.0"?: number;
                        "99.0"?: number;
                    };
                };
                month?: Components.Schemas.SensorTimeBucketStats;
                day?: Components.Schemas.SensorTimeBucketStats;
                hour?: Components.Schemas.SensorTimeBucketStats;
            };
        };
        export type SensorInferredType = {
            [pattern: string]: Components.Schemas.SensorDataType;
        };
        export type FirstEmission = {
            [pattern: string]: Components.Schemas.Date;
        };
        export type SensorQuery = {
            aggregationType: "ratio" | "sum";
            template: string;
            pace: number;
            timeFrame: {
                unit: "days" | "hours";
                value: number;
            };
            timeZone?: Components.Schemas.TimeZone;
        };
        export type LineMetrics = {
            cadency?: {
                value: number;
                unit: string;
                status: Components.Schemas.LineMetricsStatus;
            };
            output?: {
                value: number;
                goal?: number;
                unit: string;
                status: Components.Schemas.LineMetricsStatus;
            };
        };
        export type AssetConfiguration = string & {
            _type?: "AssetConfiguration";
        };
        export type ManufacturingPhase = string & {
            _type?: "ManufacturingPhase";
        };
        export type ManufacturingCycle = string & {
            _type?: "ManufacturingCycle";
        };
        export type AssetData = Components.Schemas.AssetBaseData & (Components.Schemas.AssetAreaData | Components.Schemas.AssetLineData | Components.Schemas.AssetMachineData | Components.Schemas.AssetPartData);
        export type ImagesUUIDS = Components.Schemas.ImageUUID[];
        export type AttachmentsUUIDS = Components.Schemas.AttachmentUUID[];
        export type TaskStatus = ("to_assign" | "to_do" | "in_progress" | "done") & {
            _type?: "TaskStatus";
        };
        export type InterventionData = {
            assignedUsersIds: Components.Schemas.NonEmptyUsersUUIDS;
            assetsIds: Components.Schemas.AssetsUUIDS;
            archived: boolean;
            pauseAlertsTriggers?: boolean;
            type?: Components.Schemas.InterventionType;
            priority: Components.Schemas.Priority;
            qualification?: Components.Schemas.InterventionQualification;
            report?: Components.Schemas.InterventionReport;
        };
        export type FactoryScopedUserOrganisationMembership = {
            roles: Components.Schemas.UserOrganisationRoles;
            factories: {
                id: Components.Schemas.FactoryUUID;
                roles: Components.Schemas.UserFactoryRoles;
                status?: Components.Schemas.UserMembershipStatus;
                lastInvitationDate?: Components.Schemas.Date;
            }[];
        };
        export type GlobalUserOrganisationMembership = {
            roles: Components.Schemas.UserFactoryRoles;
        };
        export type AlertDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlertDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlertEventData;
        };
        export type AlertUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlertUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlertEventData;
        };
        export type AlgorithmModelUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlgorithmModelUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlgorithmModelEventData;
        };
        export type ApplicationDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ApplicationDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ApplicationEventData;
        };
        export type ApplicationUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ApplicationUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ApplicationEventData;
        };
        export type AssetDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AssetDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AssetEventData;
        };
        export type AssetUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AssetUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AssetEventData;
        };
        export type EmailStatusUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.EmailStatusUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.EmailStatusUpdatedEventData;
        };
        export type FactoryDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.FactoryDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.FactoryEventData;
        };
        export type FactoryUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.FactoryUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.FactoryEventData;
        };
        export type InterventionDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.InterventionDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.InterventionEventData;
        };
        export type InterventionUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.InterventionUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.InterventionEventData;
        };
        export type MembershipCancelledEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.MembershipCancelledEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.MembershipCancelledEventData;
        };
        export type OrganisationDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationPreferencesUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationPreferencesUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationPreferencesUpsertedEventData;
        };
        export type OrganisationUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationUserUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationUserUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationUserUpdatedEventData;
        };
        export type PasswordChangeRequestedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.PasswordChangeRequestedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.PasswordChangeRequestedEventData;
        };
        export type ProjectDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ProjectDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ProjectEventData;
        };
        export type ProjectUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ProjectUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ProjectEventData;
        };
        export type ReportDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ReportDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ReportEventData;
        };
        export type ReportUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ReportUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ReportEventData;
        };
        export type SensorDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorEventData;
        };
        export type SensorSeriesDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorSeriesDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorSeriesDeletedEventData;
        };
        export type SensorUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorEventData;
        };
        export type UserCreatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserCreatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserCreatedEventData;
        };
        export type UserFeedbackUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserFeedbackUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserFeedbackUpdatedEventData;
        };
        export type UserInvitedInOrganisationEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserInvitedInOrganisationEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserInvitedInOrganisationEventData;
        };
        export type UserUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserUpdatedEventData;
        };
        export type VirtualSensorComputeRequestedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.VirtualSensorComputeRequestedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.VirtualSensorComputeRequestedEventData;
        };
        export type SegmentedAlertDetectionPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.SegmentedAlertDetectionPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type ForecastLearnEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ForecastLearnEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels;
        };
        export type RealtimeAlertEventSchemaModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.RealtimeAlertEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                triggeringValue: number;
                variables: Components.Schemas.SensorVariables;
                activatedAlertsTriggersIds: Components.Schemas.AlertsTriggersUUIDS;
                customI18NMessage?: Components.Schemas.I18NString;
            };
        };
        export type DriftDetectionEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DriftDetectionEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type ForecastPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ForecastPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type DSPADPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DSPADPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                runName?: string;
                [pattern: string]: unknown;
            };
        };
        export type ProcessEventSchemaModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ProcessEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                triggeringValue?: number;
                stepName: string;
                startDate?: Components.Schemas.Date;
                endDate?: Components.Schemas.Date;
            };
        };
        export type AnomalyEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.AnomalyEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                alertCode: Components.Schemas.AlertCode;
                customI18NMessage?: Components.Schemas.I18NString;
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type DSPADDataAnalysisEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DSPADDataAnalysisEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type CycleEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.CycleEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                cycleId: Components.Schemas.NanoId;
                cycleValue?: number;
                [pattern: string]: unknown;
            };
        };
        export type PhaseEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.PhaseEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                phaseName: string;
                phaseValue?: number;
                [pattern: string]: unknown;
            };
        };
        export type UserFeedback = number & {
            _type?: "UserFeedback";
        };
        export type SensorDisplaySerie = ("always" | "never" | "ifExists") & {
            _type?: "SensorDisplaySerie";
        };
        export type AlertStatus = ("open" | "discarded" | "fixed" | "closed") & {
            _type?: "AlertStatus";
        };
        export type EventType = ("segmented_anomaly_detection_predict" | "univariate_forecast_learn" | "realtime_alert" | "drift_detection" | "univariate_forecast_predict" | "dspad_predict" | "process" | "anomaly" | "dspad_data_mvt" | "cycle" | "phase") & {
            _type?: "EventType";
        };
        export type AlertType = ("realtime" | "silence") & {
            _type?: "AlertType";
        };
        export type Aggregation = ("min" | "max" | "avg" | "count" | "sum" | "p25" | "median" | "p75" | "top1" | "top2" | "top3" | "others") & {
            _type?: "Aggregation";
        };
        export type Priority = ("not_set" | "urgent" | "important" | "secondary") & {
            _type?: "Priority";
        };
        export type TaskType = ("alert" | "intervention") & {
            _type?: "TaskType";
        };
        export type NotificationType = ("USER_CREATED" | "USER_UPDATED" | "ALERT_UPSERTED" | "ALERT_DELETED" | "ASSET_UPSERTED" | "ASSET_DELETED" | "SENSOR_UPSERTED" | "SENSOR_DELETED" | "REPORT_UPSERTED" | "REPORT_DELETED" | "INTERVENTION_UPSERTED" | "INTERVENTION_DELETED" | "ALGORITHM_MODEL_UPDATED" | "PROJECT_UPSERTED" | "PROJECT_DELETED" | "FACTORY_UPSERTED" | "FACTORY_DELETED" | "ORGANISATION_UPSERTED" | "ORGANISATION_DELETED" | "ORGANISATION_USER_UPDATED" | "ORGANISATION_PREFERENCES_UPSERTED" | "SENSOR_SERIES_DELETED" | "PASSWORD_CHANGE_REQUESTED" | "EMAIL_STATUS_UPDATED" | "USER_FEEDBACK_UPDATED" | "USER_INVITED_IN_ORGANISATION" | "MEMBERSHIP_CANCELLED" | "VIRTUAL_SENSOR_COMPUTE_REQUESTED") & {
            _type?: "NotificationType";
        };
        export type AlertModelHash = {
            [pattern: string]: Components.Schemas.AlertModel;
        };
        export type InterventionModelHash = {
            [pattern: string]: Components.Schemas.InterventionModel;
        };
        export type SensorModelHash = {
            [pattern: string]: Components.Schemas.SensorModel;
        };
        export type AttachmentModelHash = {
            [pattern: string]: Components.Schemas.AttachmentModel;
        };
        export type ImageModelHash = {
            [pattern: string]: Components.Schemas.ImageModel;
        };
        export type Total = number & {
            _type?: "Total";
        };
        export type Measures = {
            date: Components.Schemas.Date;
            values: number[];
            qualities?: number[];
            labels?: string[][];
            labelsCount?: number[][];
        }[];
        export type TasksModel = Components.Schemas.TaskModel[];
        export type DefaultPreferencesModel = {
            displayParentName: boolean;
            sensorDisplayExternalId: boolean;
            sensorDisplaySerie: Components.Schemas.SensorDisplaySerie;
            useFactoryTimeZone: boolean;
            showGraphLabels: boolean;
            showGraphConfigurations: boolean;
            showGraphCycles: boolean;
            showGraphPhases: boolean;
        };
        export type ApplicationModelHash = {
            [pattern: string]: Components.Schemas.ApplicationModel;
        };
        export type ProjectModelHash = {
            [pattern: string]: Components.Schemas.ProjectModel;
        };
        export type UserModelHash = {
            [pattern: string]: Components.Schemas.UserModel;
        };
        export type FactoryModelHash = {
            [pattern: string]: Components.Schemas.FactoryModel;
        };
        export type AssetModelHash = {
            [pattern: string]: Components.Schemas.AssetModel;
        };
        export type EventModelHash = {
            [pattern: string]: Components.Schemas.EventModel;
        };
        export type ReportModelHash = {
            [pattern: string]: Components.Schemas.ReportModel;
        };
        export type UUIDS = Components.Schemas.UUID[];
        export type TrendModelHash = {
            [pattern: string]: Components.Schemas.TrendModel;
        };
        export type RangeMeasures = {
            startDate: Components.Schemas.Date;
            endDate: Components.Schemas.Date;
            value: number;
            quality?: number;
            labels?: string[];
        }[][];
        export type NotificationsUUIDS = Components.Schemas.NotificationUUID[];
        export type NotificationModelHash = {
            [pattern: string]: Components.Schemas.NotificationModel;
        };
        export type OrganisationModelHash = {
            [pattern: string]: Components.Schemas.OrganisationModel;
        };
        export type NoSyncMode = "none" & {
            _type?: "NoSyncMode";
        };
        export type DoSyncMode = ("one-way-in" | "one-way-out" | "two-ways") & {
            _type?: "DoSyncMode";
        };
        export type AlertAssignations = {
            id: Components.Schemas.UserUUID;
            assignedAt: Components.Schemas.Date;
            viewedAt?: Components.Schemas.Date;
        }[];
        export type ValuesNames = Components.Schemas.ValueName[];
        export type UsersFeedback = {
            [pattern: string]: Components.Schemas.UserFeedback;
        };
        export type BaseAlertData = {
            details: Components.Schemas.NoAlertDetailsModel | Components.Schemas.RealtimeAlertDetailsModel | Components.Schemas.SilentSensorsAlertDetailsModel;
            code: Components.Schemas.AlertCode;
            i18nMessage?: Components.Schemas.I18NString;
            priority: Components.Schemas.Priority;
            severity: "not_set" | "critical" | "major" | "moderate" | "minor" | "cosmetic";
            viewed: boolean;
            assignedUsersIds?: Components.Schemas.UsersUUIDS;
            comment?: string;
        };
        export type Scope = ("user" | "admin" | "data" | "webhook" | "oauth2" | "ml") & {
            _type?: "Scope";
        };
        export type GrantType = ("code" | "token" | "password" | "refresh" | "client_credentials" | "verify" | "password_change") & {
            _type?: "GrantType";
        };
        export type MLAlgorithms = ("pipelines" | "custom")[];
        export type ProjectIngestion = {
            handler: string;
            sourceTopic: Components.Schemas.DataTopic;
            batchSize: number;
            delay: number;
        };
        export type ProjectIndexation = {
            handler: string;
            sourceTopic: Components.Schemas.DataTopic;
            batchSize: number;
            delay: number;
        };
        export type Locale = string & {
            _type?: "Locale";
        };
        export type VerifyToken = string & {
            _type?: "VerifyToken";
        };
        export type ValuePrecision = number & {
            _type?: "ValuePrecision";
        };
        export type SensorVariables = {
            [pattern: string]: (number | string);
        };
        export type SensorDataType = "qualitative" | "quantitative";
        export type SensorSerie = {
            name: Components.Schemas.ValueName;
            unit: Components.Schemas.SensorSerieUnit;
            description?: string;
            displayName?: string;
        } & (Components.Schemas.QuantitativeSensorSerie | Components.Schemas.QualitativeSensorSerie) & (Components.Schemas.DataSensorSerieSource | Components.Schemas.EventSensorSerieSource);
        export type AlertTrigger = {
            id: Components.Schemas.AlertTriggerUUID;
            name: string;
            i18nMessage: Components.Schemas.I18NString;
        } & (Components.Schemas.SilenceAlertTrigger | Components.Schemas.RealtimeAlertTrigger);
        export type SensorTimeBucketStats = {
            cardinality: number;
            volumetry: number;
            maxMin: number;
            minMax: number;
        };
        export type LineMetricsStatus = ("good" | "faulty" | "error") & {
            _type?: "LineMetricsStatus";
        };
        export type AssetBaseData = {
            name: string;
            tags: Components.Schemas.Tags;
            parentId?: Components.Schemas.AssetUUID;
        };
        export type AssetAreaData = {
            type: "area";
        };
        export type AssetLineData = {
            type: "line";
            configurations: {
                [pattern: string]: {
                    machinesTree: Components.Schemas.LineMachineTree;
                };
            };
        };
        export type AssetMachineData = {
            type: "machine";
        };
        export type AssetPartData = {
            type: "part";
        };
        export type NonEmptyUsersUUIDS = [
            Components.Schemas.UserUUID,
            ...Components.Schemas.UserUUID[]
        ];
        export type InterventionType = ("fix" | "prevent" | "control") & {
            _type?: "InterventionType";
        };
        export type InterventionQualification = {
            usersFeedback: Components.Schemas.UsersFeedback;
            alertsIds: Components.Schemas.NonEmptyAlertsUUIDS;
        };
        export type InterventionReport = {
            rootCauses?: string;
            fixDetails?: string;
            startDate: Components.Schemas.Date;
            endDate?: Components.Schemas.Date;
        } | {
            comment: string;
        };
        export type UserOrganisationRoles = [
            "member",
            ..."member"[]
        ];
        export type UserFactoryRoles = [
            "manager" | "technician",
            ...("manager" | "technician")[]
        ];
        export type AlertDeletedEventType = "ALERT_DELETED" & {
            _type?: "AlertDeletedEventType";
        };
        export type Timestamp = number & {
            _type?: "Timestamp";
        };
        export type AlertEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            alertId: Components.Schemas.AlertUUID;
            userId?: Components.Schemas.UserUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            eventsIds?: Components.Schemas.EventsUUIDS;
        };
        export type AlertUpsertedEventType = "ALERT_UPSERTED" & {
            _type?: "AlertUpsertedEventType";
        };
        export type AlgorithmModelUpdatedEventType = "ALGORITHM_MODEL_UPDATED" & {
            _type?: "AlgorithmModelUpdatedEventType";
        };
        export type AlgorithmModelEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            projectId: Components.Schemas.ProjectUUID;
            projectCode: Components.Schemas.ProjectCode;
            factoryId?: Components.Schemas.FactoryUUID;
        };
        export type ApplicationDeletedEventType = "APPLICATION_DELETED" & {
            _type?: "ApplicationDeletedEventType";
        };
        export type ApplicationEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            applicationId: Components.Schemas.ApplicationUUID;
        };
        export type ApplicationUpsertedEventType = "APPLICATION_UPSERTED" & {
            _type?: "ApplicationUpsertedEventType";
        };
        export type AssetDeletedEventType = "ASSET_DELETED" & {
            _type?: "AssetDeletedEventType";
        };
        export type AssetEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
            assetId: Components.Schemas.AssetUUID;
        };
        export type AssetUpsertedEventType = "ASSET_UPSERTED" & {
            _type?: "AssetUpsertedEventType";
        };
        export type EmailStatusUpdatedEventType = "EMAIL_STATUS_UPDATED" & {
            _type?: "EmailStatusUpdatedEventType";
        };
        export type EmailStatusUpdatedEventData = {
            userId: Components.Schemas.UserUUID;
            email: string;
            name: string;
            status: Components.Schemas.EmailStatus;
        };
        export type FactoryDeletedEventType = "FACTORY_DELETED" & {
            _type?: "FactoryDeletedEventType";
        };
        export type FactoryEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type FactoryUpsertedEventType = "FACTORY_UPSERTED" & {
            _type?: "FactoryUpsertedEventType";
        };
        export type InterventionDeletedEventType = "INTERVENTION_DELETED" & {
            _type?: "InterventionDeletedEventType";
        };
        export type InterventionEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
            interventionId: Components.Schemas.InterventionUUID;
            alertsEventsIds?: Components.Schemas.EventsUUIDS;
            userFeedback?: Components.Schemas.UserFeedback;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
        };
        export type InterventionUpsertedEventType = "INTERVENTION_UPSERTED" & {
            _type?: "InterventionUpsertedEventType";
        };
        export type MembershipCancelledEventType = "MEMBERSHIP_CANCELLED" & {
            _type?: "MembershipCancelledEventType";
        };
        export type MembershipCancelledEventData = {
            userId: Components.Schemas.UserUUID;
            organisationId: Components.Schemas.OrganisationUUID;
        };
        export type OrganisationDeletedEventType = "ORGANISATION_DELETED" & {
            _type?: "OrganisationDeletedEventType";
        };
        export type OrganisationEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type OrganisationPreferencesUpsertedEventType = "ORGANISATION_PREFERENCES_UPSERTED" & {
            _type?: "OrganisationPreferencesUpsertedEventType";
        };
        export type OrganisationPreferencesUpsertedEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            preferences: Components.Schemas.PartialPreferencesModel;
        };
        export type OrganisationUpsertedEventType = "ORGANISATION_UPSERTED" & {
            _type?: "OrganisationUpsertedEventType";
        };
        export type OrganisationUserUpdatedEventType = "ORGANISATION_USER_UPDATED" & {
            _type?: "OrganisationUserUpdatedEventType";
        };
        export type OrganisationUserUpdatedEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            userName: string;
            accepted: boolean;
        };
        export type PasswordChangeRequestedEventType = "PASSWORD_CHANGE_REQUESTED" & {
            _type?: "PasswordChangeRequestedEventType";
        };
        export type PasswordChangeRequestedEventData = {
            token: string;
            email: string;
            userName: string;
            locale: Components.Schemas.Locale;
        };
        export type ProjectDeletedEventType = "PROJECT_DELETED" & {
            _type?: "ProjectDeletedEventType";
        };
        export type ProjectEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            projectId: Components.Schemas.ProjectUUID;
            projectCode: Components.Schemas.ProjectCode;
            topicsToAdd: Components.Schemas.DataTopic[];
            topicsToRemove: Components.Schemas.DataTopic[];
        };
        export type ProjectUpsertedEventType = "PROJECT_UPSERTED" & {
            _type?: "ProjectUpsertedEventType";
        };
        export type ReportDeletedEventType = "REPORT_DELETED" & {
            _type?: "ReportDeletedEventType";
        };
        export type ReportEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            reportId: Components.Schemas.ReportUUID;
        };
        export type ReportUpsertedEventType = "REPORT_UPSERTED" & {
            _type?: "ReportUpsertedEventType";
        };
        export type SensorDeletedEventType = "SENSOR_DELETED" & {
            _type?: "SensorDeletedEventType";
        };
        export type SensorEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            sensorId: Components.Schemas.SensorUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type SensorSeriesDeletedEventType = "SENSOR_SERIES_DELETED" & {
            _type?: "SensorSeriesDeletedEventType";
        };
        export type SensorSeriesDeletedEventData = {
            sensorId: Components.Schemas.SensorUUID;
            valueName: Components.Schemas.ValueName;
        };
        export type SensorUpsertedEventType = "SENSOR_UPSERTED" & {
            _type?: "SensorUpsertedEventType";
        };
        export type UserCreatedEventType = "USER_CREATED" & {
            _type?: "UserCreatedEventType";
        };
        export type UserCreatedEventData = {
            user: Components.Schemas.UserModel;
            verifyToken: Components.Schemas.VerifyToken;
        };
        export type UserFeedbackUpdatedEventType = "USER_FEEDBACK_UPDATED" & {
            _type?: "UserFeedbackUpdatedEventType";
        };
        export type UserFeedbackUpdatedEventData = {
            alertId?: Components.Schemas.AlertUUID;
            eventsIds: Components.Schemas.EventsUUIDS;
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            userFeedBack: Components.Schemas.UserFeedback;
            beforeDate: Components.Schemas.Date;
            afterDate: Components.Schemas.Date;
        };
        export type UserInvitedInOrganisationEventType = "USER_INVITED_IN_ORGANISATION" & {
            _type?: "UserInvitedInOrganisationEventType";
        };
        export type UserInvitedInOrganisationEventData = {
            inviterId: Components.Schemas.UserUUID;
            userId: Components.Schemas.UserUUID;
            organisationId: Components.Schemas.OrganisationUUID;
            userName: string;
            userEmail: string;
            organisationName: string;
            organisationRoles: Components.Schemas.UserFactoryRoles | Components.Schemas.UserOrganisationRoles;
            token: string;
        };
        export type UserUpdatedEventType = "USER_UPDATED" & {
            _type?: "UserUpdatedEventType";
        };
        export type UserUpdatedEventData = {
            user: Components.Schemas.UserModel;
            verifyToken?: Components.Schemas.VerifyToken;
        };
        export type VirtualSensorComputeRequestedEventType = "VIRTUAL_SENSOR_COMPUTE_REQUESTED" & {
            _type?: "VirtualSensorComputeRequestedEventType";
        };
        export type VirtualSensorComputeRequestedEventData = {
            sensorId: Components.Schemas.SensorUUID;
            projectCode: Components.Schemas.ProjectCode;
            sensorValueName: Components.Schemas.ValueName;
        };
        export type SegmentedAlertDetectionPredictEventType = "segmented_anomaly_detection_predict" & {
            _type?: "SegmentedAlertDetectionPredictEventType";
        };
        export type DataLabels = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId?: string;
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            ancestorsIds: Components.Schemas.AssetsUUIDS;
            assetsIds: Components.Schemas.AssetsUUIDS;
            sensorsIds: Components.Schemas.SensorsUUIDS;
            valuesNames?: Components.Schemas.ValuesNames;
            labels: Components.Schemas.BaseDataLabels;
            runId?: Components.Schemas.RunUUID;
            usersFeedback?: Components.Schemas.UsersFeedback;
        };
        export type ForecastLearnEventType = "univariate_forecast_learn" & {
            _type?: "ForecastLearnEventType";
        };
        export type RealtimeAlertEventType = "realtime_alert" & {
            _type?: "RealtimeAlertEventType";
        };
        export type AlertsTriggersUUIDS = Components.Schemas.AlertTriggerUUID[];
        export type I18NString = {
            [pattern: string]: string;
        };
        export type DriftDetectionEventType = "drift_detection" & {
            _type?: "DriftDetectionEventType";
        };
        export type ForecastPredictEventType = "univariate_forecast_predict" & {
            _type?: "ForecastPredictEventType";
        };
        export type DSPADPredictEventType = "dspad_predict" & {
            _type?: "DSPADPredictEventType";
        };
        export type ProcessEventType = "process" & {
            _type?: "ProcessEventType";
        };
        export type AnomalyEventType = "anomaly" & {
            _type?: "AnomalyEventType";
        };
        export type AlertCode = Components.Schemas.StandardAlertCode | Components.Schemas.CustomAlertCode;
        export type DSPADDataAnalysisEventType = "dspad_data_mvt" & {
            _type?: "DSPADDataAnalysisEventType";
        };
        export type CycleEventType = "cycle" & {
            _type?: "CycleEventType";
        };
        export type NanoId = string & {
            _type?: "NanoId";
        };
        export type PhaseEventType = "phase" & {
            _type?: "PhaseEventType";
        };
        export type AttachmentModel = Components.Schemas.SynchronizableItem & {
            id: Components.Schemas.AttachmentUUID;
            authorId?: Components.Schemas.UserUUID;
            alert?: Components.Schemas.AlertUUID;
            intervention?: Components.Schemas.InterventionUUID;
            report?: Components.Schemas.ReportUUID;
            scope: Components.Schemas.AttachmentScope;
            url?: string;
            stats: {
                name: string;
                size: number;
                type: string;
            };
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type ImageModel = {
            id: Components.Schemas.ImageUUID;
            authorId?: Components.Schemas.UserUUID;
            scope: Components.Schemas.ImageScope;
            alert?: Components.Schemas.AlertUUID;
            intervention?: Components.Schemas.InterventionUUID;
            urls: {
                original: string;
                large?: string;
                medium?: string;
                thumb?: string;
            };
            stats: {
                name: string;
                size: number;
                type: string;
            };
            resized?: string;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        };
        export type TaskModel = {
            status: Components.Schemas.TaskStatus;
            priority?: Components.Schemas.Priority;
            assetsIds?: Components.Schemas.AssetsUUIDS;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        } & ({
            id: Components.Schemas.AlertUUID;
            type: "alert";
        } | {
            id: Components.Schemas.InterventionUUID;
            type: "intervention";
        });
        export type TrendModel = {
            id?: Components.Schemas.UUID;
            sensorId?: Components.Schemas.SensorUUID;
            intercept?: number;
            slope?: number;
            from?: Components.Schemas.Date;
            to?: Components.Schemas.Date;
        };
        export type NotificationModel = Components.Schemas.UserCreatedNotification | Components.Schemas.UserUpdatedNotification | Components.Schemas.AlertNotification | Components.Schemas.AssetNotification | Components.Schemas.ApplicationNotification | Components.Schemas.InterventionNotification | Components.Schemas.ReportNotification | Components.Schemas.SensorNotification | Components.Schemas.FactoryNotification | Components.Schemas.ProjectNotification | Components.Schemas.AlgorithmModelUpdatedNotification | Components.Schemas.OrganisationNotification | Components.Schemas.OrganisationUserUpdatedNotification | Components.Schemas.OrganisationPreferencesUpsertedNotification | Components.Schemas.SensorSeriesDeletedNotification | Components.Schemas.PasswordChangeRequestedNotification | Components.Schemas.EmailStatusUpdatedNotification | Components.Schemas.UserFeedbackUpdatedNotification | Components.Schemas.UserInvitedInOrganisationNotification | Components.Schemas.MembershipCancelledEventSchema | Components.Schemas.VirtualSensorComputeRequestedNotification;
        export type NoAlertDetailsModel = {};
        export type RealtimeAlertDetailsModel = {
            triggeringValue: number;
            variables: Components.Schemas.SensorVariables;
            activatedAlertsTriggersIds: Components.Schemas.AlertsTriggersUUIDS;
        };
        export type SilentSensorsAlertDetailsModel = {
            totalSilence: boolean;
            sensorsIds: Components.Schemas.SensorsUUIDS;
        };
        export type DataTopic = string & {
            _type?: "DataTopic";
        };
        export type SensorSerieUnit = string & {
            _type?: "SensorSerieUnit";
        };
        export type QuantitativeSensorSerie = {
            type: "quantitative";
        };
        export type QualitativeSensorSerie = {
            type: "qualitative";
            categories?: {
                [pattern: string]: string;
            };
        };
        export type DataSensorSerieSource = {
            sourceType: "data";
        };
        export type EventSensorSerieSource = {
            sourceType: "event";
            eventField: Components.Schemas.EventField;
            eventType: Components.Schemas.EventType;
            eventHasARange?: boolean;
        };
        export type AlertTriggerUUID = string & {
            _type?: "AlertTriggerUUID";
        };
        export type SilenceAlertTrigger = {
            type: "silence";
            duration: number;
        };
        export type RealtimeAlertTrigger = {
            type: "realtime";
            occurences: number;
            duration?: number;
            resetDelay: number;
            rule: Components.Schemas.RealtimeAlertTriggerRule;
        };
        export type LineMachineTree = {
            nodes?: Components.Schemas.AssetUUID[];
            edges?: {
                source?: Components.Schemas.AssetUUID;
                target?: Components.Schemas.AssetUUID;
            }[];
        };
        export type NonEmptyAlertsUUIDS = [
            Components.Schemas.AlertUUID,
            ...Components.Schemas.AlertUUID[]
        ];
        export type BaseDataLabels = {
            assets?: Components.Schemas.AssetLabels;
            ancestors?: Components.Schemas.AssetLabels;
            tags?: Components.Schemas.Tags;
        };
        export type RunUUID = string & {
            _type?: "RunUUID";
        };
        export type StandardAlertCode = ("missing_data" | "bad_data" | "wrong_delta" | "production_drop" | "out_of_bounds" | "abnormal_data" | "data_drift" | "silence_alert" | "realtime_alert") & {
            _type?: "StandardAlertCode";
        };
        export type CustomAlertCode = string & {
            _type?: "CustomAlertCode";
        };
        export type AttachmentScope = ("data-science" | "customer") & {
            _type?: "AttachmentScope";
        };
        export type ImageScope = ("data-science" | "customer") & {
            _type?: "ImageScope";
        };
        export type UserCreatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserCreatedEventType;
            eventData: Components.Schemas.UserCreatedEventData;
        };
        export type UserUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserUpdatedEventType;
            eventData: Components.Schemas.UserUpdatedEventData;
        };
        export type AlertNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AlertUpsertedEventType | Components.Schemas.AlertDeletedEventType;
            eventData: Components.Schemas.AlertEventData;
        };
        export type AssetNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AssetUpsertedEventType | Components.Schemas.AssetDeletedEventType;
            eventData: Components.Schemas.AssetEventData;
        };
        export type ApplicationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ApplicationUpsertedEventType | Components.Schemas.ApplicationDeletedEventType;
            eventData: Components.Schemas.ApplicationEventData;
        };
        export type InterventionNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.InterventionUpsertedEventType | Components.Schemas.InterventionDeletedEventType;
            eventData: Components.Schemas.InterventionEventData;
        };
        export type ReportNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ReportUpsertedEventType | Components.Schemas.ReportDeletedEventType;
            eventData: Components.Schemas.ReportEventData;
        };
        export type SensorNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.SensorUpsertedEventType | Components.Schemas.SensorDeletedEventType;
            eventData: Components.Schemas.SensorEventData;
        };
        export type FactoryNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.FactoryUpsertedEventType | Components.Schemas.FactoryDeletedEventType;
            eventData: Components.Schemas.FactoryEventData;
        };
        export type ProjectNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ProjectUpsertedEventType | Components.Schemas.ProjectDeletedEventType;
            eventData: Components.Schemas.ProjectEventData;
        };
        export type AlgorithmModelUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AlgorithmModelUpdatedEventType;
            eventData: Components.Schemas.AlgorithmModelEventData;
        };
        export type OrganisationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationUpsertedEventType | Components.Schemas.OrganisationDeletedEventType;
            eventData: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationUserUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationUserUpdatedEventType;
            eventData: Components.Schemas.OrganisationUserUpdatedEventData;
        };
        export type OrganisationPreferencesUpsertedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationPreferencesUpsertedEventType;
            eventData: Components.Schemas.OrganisationPreferencesUpsertedEventData;
        };
        export type SensorSeriesDeletedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.SensorSeriesDeletedEventType;
            eventData: Components.Schemas.SensorSeriesDeletedEventData;
        };
        export type PasswordChangeRequestedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.PasswordChangeRequestedEventType;
            eventData: Components.Schemas.PasswordChangeRequestedEventData;
        };
        export type EmailStatusUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.EmailStatusUpdatedEventType;
            eventData: Components.Schemas.EmailStatusUpdatedEventData;
        };
        export type UserFeedbackUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserFeedbackUpdatedEventType;
            eventData: Components.Schemas.UserFeedbackUpdatedEventData;
        };
        export type UserInvitedInOrganisationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserInvitedInOrganisationEventType;
            eventData: Components.Schemas.UserInvitedInOrganisationEventData;
        };
        export type MembershipCancelledEventSchema = Components.Schemas.CommonNotification & {
            type: Components.Schemas.MembershipCancelledEventType;
            eventData: Components.Schemas.MembershipCancelledEventData;
        };
        export type VirtualSensorComputeRequestedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.VirtualSensorComputeRequestedEventType;
            eventData: Components.Schemas.VirtualSensorComputeRequestedEventData;
        };
        export type RealtimeAlertTriggerRule = Components.Schemas.RealtimeAlertTriggerLabelTest | Components.Schemas.RealtimeAlertTriggerValuedLabelTest | Components.Schemas.RealtimeAlertTriggerValueTest | Components.Schemas.RealtimeAlertTriggerBranch;
        export type AssetLabels = {
            values?: Components.Schemas.ValuedLabels;
            tags?: Components.Schemas.Tags;
            configurations?: Components.Schemas.AssetConfigurations;
            cycles?: Components.Schemas.ManufacturingCycles;
            phases?: Components.Schemas.ManufacturingPhases;
        };
        export type CommonNotification = {
            id: Components.Schemas.NotificationUUID;
            date: Components.Schemas.Date;
            read: boolean;
            data: {
                organisationId?: Components.Schemas.OrganisationUUID;
                factoryId?: Components.Schemas.FactoryUUID;
                ancestorsIds?: Components.Schemas.AssetsUUIDS;
                assetsIds?: Components.Schemas.AssetsUUIDS;
                alertsIds?: Components.Schemas.AlertsUUIDS;
                sensorsIds?: Components.Schemas.SensorsUUIDS;
            };
        };
        export type RealtimeAlertTriggerLabelTest = {
            type: "label";
            operator: Components.Schemas.RealtimeAlertLabelsOperator;
            target: Components.Schemas.RealtimeAlertLabelTarget;
            name: "phases" | "cycles" | "configurations" | "tags";
            values: string[];
        };
        export type RealtimeAlertTriggerValuedLabelTest = {
            type: "valued_label";
            operator: Components.Schemas.RealtimeAlertLabelsOperator;
            target: Components.Schemas.RealtimeAlertLabelTarget;
            values: {
                [pattern: string]: string;
            };
        };
        export type RealtimeAlertTriggerValueTest = {
            type: "value";
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "and" | "xor";
            value: number | Components.Schemas.SensorVariable;
        };
        export type RealtimeAlertTriggerBranch = {
            type?: "branch";
            operator: "and" | "or";
            leftNode: Components.Schemas.RealtimeAlertTriggerRule;
            rightNode: Components.Schemas.RealtimeAlertTriggerRule;
        };
        export type ValuedLabels = {
            [pattern: string]: Components.Schemas.LabelValue;
        };
        export type RealtimeAlertLabelsOperator = "all" | "any";
        export type RealtimeAlertLabelTarget = "ancestors" | "assets" | "all";
        export type SensorVariable = string & {
            _type?: "SensorVariable";
        };
    }
}
declare namespace API {
    export import DeleteAlert = Components.Operations.DeleteAlert;
    export import DeleteApplication = Components.Operations.DeleteApplication;
    export import DeleteIntervention = Components.Operations.DeleteIntervention;
    export import DeleteProject = Components.Operations.DeleteProject;
    export import DeleteUserOrganisationAlert = Components.Operations.DeleteUserOrganisationAlert;
    export import GetUserOrganisationAlert = Components.Operations.GetUserOrganisationAlert;
    export import PutUserOrganisationAlert = Components.Operations.PutUserOrganisationAlert;
    export import DeleteUserOrganisationAlertAttachment = Components.Operations.DeleteUserOrganisationAlertAttachment;
    export import PutUserOrganisationAlertAttachment = Components.Operations.PutUserOrganisationAlertAttachment;
    export import DeleteUserOrganisationAlertImage = Components.Operations.DeleteUserOrganisationAlertImage;
    export import PutUserOrganisationAlertImage = Components.Operations.PutUserOrganisationAlertImage;
    export import DeleteUserOrganisationApplication = Components.Operations.DeleteUserOrganisationApplication;
    export import PutUserOrganisationApplication = Components.Operations.PutUserOrganisationApplication;
    export import DeleteUserOrganisationIntervention = Components.Operations.DeleteUserOrganisationIntervention;
    export import DeleteUserOrganisationInterventionImage = Components.Operations.DeleteUserOrganisationInterventionImage;
    export import PutUserOrganisationInterventionImage = Components.Operations.PutUserOrganisationInterventionImage;
    export import DeleteUserOrganisationMembership = Components.Operations.DeleteUserOrganisationMembership;
    export import DeleteUserOrganisationProject = Components.Operations.DeleteUserOrganisationProject;
    export import PutUserOrganisationProject = Components.Operations.PutUserOrganisationProject;
    export import DeleteUserOrganisationSensorSeries = Components.Operations.DeleteUserOrganisationSensorSeries;
    export import GetAlertsStats = Components.Operations.GetAlertsStats;
    export import GetAuthProfile = Components.Operations.GetAuthProfile;
    export import GetMySelf = Components.Operations.GetMySelf;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetOrganisationFactory = Components.Operations.GetOrganisationFactory;
    export import GetOrganisationFactoryAlertsStats = Components.Operations.GetOrganisationFactoryAlertsStats;
    export import GetOrganisationFactoryAsset = Components.Operations.GetOrganisationFactoryAsset;
    export import GetOrganisationFactoryAssets = Components.Operations.GetOrganisationFactoryAssets;
    export import GetOrganisationFactoryDataLabels = Components.Operations.GetOrganisationFactoryDataLabels;
    export import GetOrganisationFactoryEvents = Components.Operations.GetOrganisationFactoryEvents;
    export import GetOrganisationFactoryIntervention = Components.Operations.GetOrganisationFactoryIntervention;
    export import GetOrganisationFactoryInterventions = Components.Operations.GetOrganisationFactoryInterventions;
    export import GetOrganisationFactoryReports = Components.Operations.GetOrganisationFactoryReports;
    export import GetOrganisationFactorySensor = Components.Operations.GetOrganisationFactorySensor;
    export import GetOrganisationFactorySensors = Components.Operations.GetOrganisationFactorySensors;
    export import GetOrganisationFactoryTrends = Components.Operations.GetOrganisationFactoryTrends;
    export import GetOrganisationProject = Components.Operations.GetOrganisationProject;
    export import GetOrganisationProjects = Components.Operations.GetOrganisationProjects;
    export import GetOrganisationSensorsAggregateData = Components.Operations.GetOrganisationSensorsAggregateData;
    export import GetOrganisationSensorsAggregateEventData = Components.Operations.GetOrganisationSensorsAggregateEventData;
    export import GetOrganisationSensorsAggregateEventRangeData = Components.Operations.GetOrganisationSensorsAggregateEventRangeData;
    export import GetOrganisationSensorsData = Components.Operations.GetOrganisationSensorsData;
    export import GetOrganisationSensorsEventData = Components.Operations.GetOrganisationSensorsEventData;
    export import GetOrganisationSensorsEventRangeData = Components.Operations.GetOrganisationSensorsEventRangeData;
    export import GetOrganisationUniversalSearch = Components.Operations.GetOrganisationUniversalSearch;
    export import PutReport = Components.Operations.PutReport;
    export import GetUniversalSearch = Components.Operations.GetUniversalSearch;
    export import GetUser = Components.Operations.GetUser;
    export import PutUser = Components.Operations.PutUser;
    export import GetUserFactories = Components.Operations.GetUserFactories;
    export import GetUserNotifications = Components.Operations.GetUserNotifications;
    export import GetUserOrganisation = Components.Operations.GetUserOrganisation;
    export import PutUserOrganisation = Components.Operations.PutUserOrganisation;
    export import GetUserOrganisationAlerts = Components.Operations.GetUserOrganisationAlerts;
    export import GetUserOrganisationApplications = Components.Operations.GetUserOrganisationApplications;
    export import PostUserOrganisationApplication = Components.Operations.PostUserOrganisationApplication;
    export import GetUserOrganisationFactories = Components.Operations.GetUserOrganisationFactories;
    export import PostUserOrganisationFactory = Components.Operations.PostUserOrganisationFactory;
    export import GetUserOrganisationFactoryPreferences = Components.Operations.GetUserOrganisationFactoryPreferences;
    export import GetUserOrganisationTasks = Components.Operations.GetUserOrganisationTasks;
    export import GetUserOrganisationUsers = Components.Operations.GetUserOrganisationUsers;
    export import GetUserOrganisations = Components.Operations.GetUserOrganisations;
    export import PostUserOrganisation = Components.Operations.PostUserOrganisation;
    export import PostUser = Components.Operations.PostUser;
    export import PostAuthLogin = Components.Operations.PostAuthLogin;
    export import PostAuthLogout = Components.Operations.PostAuthLogout;
    export import PostAuthPasswordChange = Components.Operations.PostAuthPasswordChange;
    export import PostAuthRefresh = Components.Operations.PostAuthRefresh;
    export import PostAuthVerify = Components.Operations.PostAuthVerify;
    export import PostOAuth2Token = Components.Operations.PostOAuth2Token;
    export import PostOrganisationData = Components.Operations.PostOrganisationData;
    export import PostPasswordChangeRequest = Components.Operations.PostPasswordChangeRequest;
    export import PostUserInvitationResponse = Components.Operations.PostUserInvitationResponse;
    export import PostUserOrganisationAssetSensor = Components.Operations.PostUserOrganisationAssetSensor;
    export import PostUserOrganisationFactoryAsset = Components.Operations.PostUserOrganisationFactoryAsset;
    export import PostUserOrganisationFactoryIntervention = Components.Operations.PostUserOrganisationFactoryIntervention;
    export import PostUserOrganisationFactorySensor = Components.Operations.PostUserOrganisationFactorySensor;
    export import PostUserOrganisationInvitation = Components.Operations.PostUserOrganisationInvitation;
    export import PostUserOrganisationInvitationFollowup = Components.Operations.PostUserOrganisationInvitationFollowup;
    export import PostUserOrganisationNotificationRead = Components.Operations.PostUserOrganisationNotificationRead;
    export import PostUserOrganisationProject = Components.Operations.PostUserOrganisationProject;
    export import PutAttachment = Components.Operations.PutAttachment;
    export import PutImage = Components.Operations.PutImage;
    export import PutNotificationEvent = Components.Operations.PutNotificationEvent;
    export import PutOrganisationFactoryEvent = Components.Operations.PutOrganisationFactoryEvent;
    export import PutUserOrganisationAlertFeedback = Components.Operations.PutUserOrganisationAlertFeedback;
    export import PutUserOrganisationAssetSensor = Components.Operations.PutUserOrganisationAssetSensor;
    export import PutUserOrganisationFactory = Components.Operations.PutUserOrganisationFactory;
    export import PutUserOrganisationFactoryAsset = Components.Operations.PutUserOrganisationFactoryAsset;
    export import PutUserOrganisationFactoryIntervention = Components.Operations.PutUserOrganisationFactoryIntervention;
    export import PutUserOrganisationFactoryPreferences = Components.Operations.PutUserOrganisationFactoryPreferences;
    export import PutUserOrganisationFactorySensor = Components.Operations.PutUserOrganisationFactorySensor;
    export import GetOAuth2Authorize = Components.Operations.GetOAuth2Authorize;
    export import GetPing = Components.Operations.GetPing;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace DeleteAlert {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteAlert204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteApplication {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteApplication204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteIntervention {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteIntervention204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteProject {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteProject204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlert {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationAlert204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationAlert {
            export namespace Responses {
                export type $200 = Components.Responses.AlertItemResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlert {
            export type Body = Components.RequestBodies.PutUserOrganisationAlert;
            export namespace Responses {
                export type $201 = Components.Responses.AlertItemResponse<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlertAttachment {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationAlertAttachment204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly attachmentId: Parameters.AttachmentId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertAttachment {
            export type Body = Components.RequestBodies.Attachment;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertAttachment201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.AttachmentFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly attachmentId: Parameters.AttachmentId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationAlertImage {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationAlertImage204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type ImageId = Components.Parameters.ImageId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly imageId: Parameters.ImageId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AlertId = Components.Parameters.AlertId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly alertId: Parameters.AlertId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationApplication {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationApplication204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationApplication {
            export type Body = Components.RequestBodies.PutUserOrganisationApplication;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationApplication201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type ApplicationId = Components.Parameters.ApplicationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly applicationId: Parameters.ApplicationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationIntervention {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationIntervention204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationInterventionImage {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationInterventionImage204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationInterventionImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationInterventionImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly interventionId: Parameters.InterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationMembership {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationMembership204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type CollaboratorId = Components.Parameters.DeleteUserOrganisationMembership2;
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly collaboratorId: Parameters.CollaboratorId;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationProject {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationProject204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationProject {
            export type Body = Components.RequestBodies.PutUserOrganisationProject;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationProject201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace DeleteUserOrganisationSensorSeries {
            export namespace Responses {
                export type $204 = Components.Responses.DeleteUserOrganisationSensorSeries204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorId = Components.Parameters.SensorId;
                export type ValueName = Components.Parameters.ValueName;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorId: Parameters.SensorId;
                readonly valueName: Parameters.ValueName;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetAlertsStats {
            export namespace Responses {
                export type $200 = Components.Responses.GetAlertsStats200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetAuthProfile {
            export namespace Responses {
                export type $200 = Components.Responses.GetAuthProfile200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Cookie = Components.Parameters.Cookie;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly cookie?: Parameters.Cookie;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetMySelf {
            export namespace Responses {
                export type $302 = Components.Responses.GetMySelf302<302>;
            }
            export type Output = Responses.$302;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.GetOpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type MutedTags = Components.Parameters.GetOpenAPI0;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly mutedTags?: Parameters.MutedTags;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactory {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactory200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAlertsStats {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAlertsStats200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAsset {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAsset200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type AssetId = Components.Parameters.AssetId;
                export type IncludeChildrenIds = Components.Parameters.IncludeChildrenIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly assetId: Parameters.AssetId;
                readonly includeChildrenIds: Parameters.IncludeChildrenIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryAssets {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryAssets200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAssetsTypes = Components.Parameters.OptionalWithAssetsTypes;
                export type WithRootAssetsFirst = Components.Parameters.OptionalWithRootAssetsFirst;
                export type WithParentsAssetsIds = Components.Parameters.OptionalWithParentsAssetsIds;
                export type SortBy = Components.Parameters.AssetsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type IncludeChildrenIds = Components.Parameters.IncludeChildrenIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAssetsTypes?: Parameters.WithAssetsTypes;
                readonly withRootAssetsFirst?: Parameters.WithRootAssetsFirst;
                readonly withParentsAssetsIds?: Parameters.WithParentsAssetsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly includeChildrenIds: Parameters.IncludeChildrenIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryDataLabels {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryDataLabels200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryEvents {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryEvents200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithEventsIds = Components.Parameters.OptionalWithEventsIds;
                export type WithEventsTypes = Components.Parameters.OptionalWithEventType;
                export type SensorsIds = Components.Parameters.OptionalsensorsIds;
                export type ValuesNames = Components.Parameters.OptionalvaluesNames;
                export type WithUsersFeedback = Components.Parameters.OptionalWithUsersFeedback;
                export type Since = Components.Parameters.Since;
                export type Before = Components.Parameters.Before;
                export type Size = Components.Parameters.Size;
                export type BeforeDate = Components.Parameters.BeforeDate;
                export type AfterDate = Components.Parameters.AfterDate;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withEventsIds?: Parameters.WithEventsIds;
                readonly withEventsTypes?: Parameters.WithEventsTypes;
                readonly sensorsIds?: Parameters.SensorsIds;
                readonly valuesNames?: Parameters.ValuesNames;
                readonly withUsersFeedback?: Parameters.WithUsersFeedback;
                readonly since?: Parameters.Since;
                readonly before?: Parameters.Before;
                readonly size?: Parameters.Size;
                readonly beforeDate?: Parameters.BeforeDate;
                readonly afterDate?: Parameters.AfterDate;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryIntervention {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryIntervention200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryInterventions {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryInterventions200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithInterventionsIds = Components.Parameters.OptionalWithInterventionsIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type SortBy = Components.Parameters.InterventionsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithAttachments = Components.Parameters.WithAttachments;
                export type WithImages = Components.Parameters.WithImages;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withInterventionsIds?: Parameters.WithInterventionsIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withAttachments: Parameters.WithAttachments;
                readonly withImages: Parameters.WithImages;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryReports {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryReports200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type WithReportsIds = Components.Parameters.OptionalWithReportsIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.ReportsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly withReportsIds?: Parameters.WithReportsIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactorySensor {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactorySensor200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactorySensors {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactorySensors200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type WithAlertTriggerTypes = Components.Parameters.WithAlertTriggerTypes;
                export type WithFactorySensorsOnly = Components.Parameters.WithFactorySensorsOnly;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithSensorsIds = Components.Parameters.OptionalWithSensorsIds;
                export type SortBy = Components.Parameters.SensorsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly withAlertTriggerTypes?: Parameters.WithAlertTriggerTypes;
                readonly withFactorySensorsOnly: Parameters.WithFactorySensorsOnly;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withSensorsIds?: Parameters.WithSensorsIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationFactoryTrends {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationFactoryTrends200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationProject {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationProject200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type ProjectId = Components.Parameters.ProjectId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly projectId: Parameters.ProjectId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationProjects {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationProjects200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type SortBy = Components.Parameters.ProjectsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithProjectsIds = Components.Parameters.OptionalWithProjectsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withProjectsIds?: Parameters.WithProjectsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type ValuesNames = Components.Parameters.ValuesNames;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly valuesNames: Parameters.ValuesNames;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateEventData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateEventData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsAggregateEventRangeData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsAggregateEventRangeData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type Aggregations = Components.Parameters.Aggregations;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type WithTimeZone = Components.Parameters.WithTimeZone;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly aggregations: Parameters.Aggregations;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly withTimeZone?: Parameters.WithTimeZone;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type ValuesNames = Components.Parameters.ValuesNames;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly valuesNames: Parameters.ValuesNames;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsEventData {
            export namespace Responses {
                export type $200 = Components.Responses.EventDataResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type IncludeLabels = Components.Parameters.IncludeLabels;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventFields: Parameters.EventFields;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly includeLabels?: Parameters.IncludeLabels;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationSensorsEventRangeData {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationSensorsEventRangeData200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SensorsIds = Components.Parameters.SensorsIds;
                export type EventTypes = Components.Parameters.SensorEventTypesQueryParameter;
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type EventFields = Components.Parameters.EventFieldsQueryParameter;
                export type WithDataLabels = Components.Parameters.OptionalWithDataLabels;
                export type WithValuedLabelsNames = Components.Parameters.OptionalWithValuedLabelsNames;
                export type WithValuedLabelsValues = Components.Parameters.OptionalWithValuedLabelsValues;
                export type WithAssetConfigurations = Components.Parameters.OptionalWithAssetConfigurations;
                export type WithManufacturingPhases = Components.Parameters.OptionalWithManufacturingPhases;
                export type WithManufacturingCycles = Components.Parameters.OptionalWithManufacturingCycles;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly sensorsIds: Parameters.SensorsIds;
                readonly eventTypes: Parameters.EventTypes;
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly eventFields: Parameters.EventFields;
                readonly withDataLabels?: Parameters.WithDataLabels;
                readonly withValuedLabelsNames?: Parameters.WithValuedLabelsNames;
                readonly withValuedLabelsValues?: Parameters.WithValuedLabelsValues;
                readonly withAssetConfigurations?: Parameters.WithAssetConfigurations;
                readonly withManufacturingPhases?: Parameters.WithManufacturingPhases;
                readonly withManufacturingCycles?: Parameters.WithManufacturingCycles;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOrganisationUniversalSearch {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrganisationUniversalSearch200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type SearchType = Components.Parameters.SearchType;
                export type SearchSentence = Components.Parameters.SearchSentence;
                export type WithFilterTypes = Components.Parameters.WithFilterTypes;
                export type WithFilterIds = Components.Parameters.WithFilterIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly organisationId: Parameters.OrganisationId;
                readonly searchType?: Parameters.SearchType;
                readonly searchSentence: Parameters.SearchSentence;
                readonly withFilterTypes?: Parameters.WithFilterTypes;
                readonly withFilterIds?: Parameters.WithFilterIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutReport {
            export type Body = Components.RequestBodies.Report;
            export namespace Responses {
                export type $201 = Components.Responses.PutReport201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type ReportId = Components.Parameters.ReportId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly reportId: Parameters.ReportId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUniversalSearch {
            export namespace Responses {
                export type $200 = Components.Responses.GetUniversalSearch200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithOrganisationsIds = Components.Parameters.OptionalWithOrganisationsIds;
                export type SearchSentence = Components.Parameters.SearchSentence;
                export type SearchType = Components.Parameters.SearchType;
                export type WithFilterTypes = Components.Parameters.WithFilterTypes;
                export type WithFilterIds = Components.Parameters.WithFilterIds;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withOrganisationsIds?: Parameters.WithOrganisationsIds;
                readonly searchSentence: Parameters.SearchSentence;
                readonly searchType?: Parameters.SearchType;
                readonly withFilterTypes?: Parameters.WithFilterTypes;
                readonly withFilterIds?: Parameters.WithFilterIds;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUser {
            export namespace Responses {
                export type $200 = Components.Responses.GetUser200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type WithMembershipsStatuses = Components.Parameters.WithMembershipsStatuses;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly withMembershipsStatuses?: Parameters.WithMembershipsStatuses;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUser {
            export type Body = Components.RequestBodies.PutUser;
            export namespace Responses {
                export type $201 = Components.Responses.PutUser201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserFactories {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserFactories200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type SortBy = Components.Parameters.FactoriesSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserNotifications {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserNotifications200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type WithOrganisationsIds = Components.Parameters.OptionalWithOrganisationsIds;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithNotificationTypes = Components.Parameters.OptionalWithNotificationTypesQueryParameter;
                export type IncludeOrganisationLevelItems = Components.Parameters.IncludeOrganisationLevelItemsQueryParameter;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly withOrganisationsIds?: Parameters.WithOrganisationsIds;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withNotificationTypes?: Parameters.WithNotificationTypes;
                readonly includeOrganisationLevelItems?: Parameters.IncludeOrganisationLevelItems;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisation {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisation200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisation {
            export type Body = Components.RequestBodies.PutUserOrganisation;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationAlerts {
            export namespace Responses {
                export type $200 = Components.Responses.AlertsCollection<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithSensorsIds = Components.Parameters.OptionalWithSensorsIds;
                export type WithAlertsIds = Components.Parameters.OptionalWithAlertsIds;
                export type WithStatuses = Components.Parameters.WithAlertsStatuses;
                export type WithOrphanAlertsOnly = Components.Parameters.WithOrphanAlertsOnly;
                export type WithAttachments = Components.Parameters.WithAttachments;
                export type WithImages = Components.Parameters.WithImages;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.AlertsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withSensorsIds?: Parameters.WithSensorsIds;
                readonly withAlertsIds?: Parameters.WithAlertsIds;
                readonly withStatuses?: Parameters.WithStatuses;
                readonly withOrphanAlertsOnly?: Parameters.WithOrphanAlertsOnly;
                readonly withAttachments: Parameters.WithAttachments;
                readonly withImages: Parameters.WithImages;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationApplications {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationApplications200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type SortBy = Components.Parameters.ApplicationsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type WithApplicationsIds = Components.Parameters.OptionalWithApplicationsIds;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly withApplicationsIds?: Parameters.WithApplicationsIds;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationApplication {
            export type Body = Components.RequestBodies.PostUserOrganisationApplication;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationApplication201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationFactories {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationFactories200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type SortBy = Components.Parameters.FactoriesSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactory {
            export type Body = Components.RequestBodies.PostUserOrganisationFactory;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactory201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationFactoryPreferences {
            export namespace Responses {
                export type $200 = Components.Responses.AllPreferencesResponse<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationTasks {
            export namespace Responses {
                export type $200 = Components.Responses.TasksCollection<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithFactoriesIds = Components.Parameters.OptionalWithFactoriesIds;
                export type WithUsersIds = Components.Parameters.OptionalWithUsersIds;
                export type WithAssetsIds = Components.Parameters.OptionalWithAssetsIds;
                export type WithAncestorsIds = Components.Parameters.OptionalWithAncestorsIds;
                export type WithTypes = Components.Parameters.WithTasksTypes;
                export type WithStatuses = Components.Parameters.WithTasksStatuses;
                export type WithPriorities = Components.Parameters.WithPriorities;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type From = Components.Parameters.FromFilter;
                export type To = Components.Parameters.ToFilter;
                export type SortBy = Components.Parameters.TasksSortBy;
                export type Direction = Components.Parameters.Direction;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withFactoriesIds?: Parameters.WithFactoriesIds;
                readonly withUsersIds?: Parameters.WithUsersIds;
                readonly withAssetsIds?: Parameters.WithAssetsIds;
                readonly withAncestorsIds?: Parameters.WithAncestorsIds;
                readonly withTypes: Parameters.WithTypes;
                readonly withStatuses: Parameters.WithStatuses;
                readonly withPriorities: Parameters.WithPriorities;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly from?: Parameters.From;
                readonly to?: Parameters.To;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisationUsers {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisationUsers200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type WithUsersIds = Components.Parameters.OptionalWithUsersIds;
                export type WithMembershipsStatuses = Components.Parameters.WithMembershipsStatuses;
                export type SortBy = Components.Parameters.UsersSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly withUsersIds?: Parameters.WithUsersIds;
                readonly withMembershipsStatuses?: Parameters.WithMembershipsStatuses;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetUserOrganisations {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserOrganisations200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type SortBy = Components.Parameters.OrganisationsSortBy;
                export type Direction = Components.Parameters.Direction;
                export type Limit = Components.Parameters.Limit;
                export type Start = Components.Parameters.Start;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly userId: Parameters.UserId;
                readonly sortBy: Parameters.SortBy;
                readonly direction: Parameters.Direction;
                readonly limit: Parameters.Limit;
                readonly start: Parameters.Start;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisation {
            export type Body = Components.RequestBodies.PostUserOrganisation;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUser {
            export type Body = Components.RequestBodies.PostUser;
            export namespace Responses {
                export type $201 = Components.Responses.PostUser201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type InvitationToken = Components.Parameters.PostUser0;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly invitationToken?: Parameters.InvitationToken;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthLogin {
            export type Body = Components.RequestBodies.PostAuthLogin;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthLogin200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthLogout {
            export namespace Responses {
                export type $204 = Components.Responses.PostAuthLogout204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthPasswordChange {
            export type Body = Components.RequestBodies.PostAuthPasswordChange;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthPasswordChange200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body?: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthRefresh {
            export type Body = Components.RequestBodies.PostAuthRefresh;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthRefresh200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Cookie = Components.Parameters.Cookie;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly cookie?: Parameters.Cookie;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostAuthVerify {
            export type Body = Components.RequestBodies.PostAuthVerify;
            export namespace Responses {
                export type $200 = Components.Responses.PostAuthVerify200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body?: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostOAuth2Token {
            export type Body = Components.RequestBodies.PostOAuth2Token;
            export namespace Responses {
                export type $200 = Components.Responses.PostOAuth2Token200<200>;
                export type $400 = Components.Responses.PostOAuth2Token400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostOrganisationData {
            export type Body = Components.RequestBodies.PostOrganisationData;
            export namespace Responses {
                export type $201 = Components.Responses.PostOrganisationData201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type ProjectCode = Components.Parameters.ProjectCode;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly projectCode: Parameters.ProjectCode;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostPasswordChangeRequest {
            export type Body = Components.RequestBodies.PostPasswordChangeRequest;
            export namespace Responses {
                export type $200 = Components.Responses.PostPasswordChangeRequest200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserInvitationResponse {
            export type Body = Components.RequestBodies.PostUserInvitationResponse;
            export namespace Responses {
                export type $200 = Components.Responses.PostUserInvitationResponse200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationAssetSensor {
            export type Body = Components.RequestBodies.PostUserOrganisationAssetSensor;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationAssetSensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AssetId = Components.Parameters.AssetId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly assetId: Parameters.AssetId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactoryAsset {
            export type Body = Components.RequestBodies.PostUserOrganisationFactoryAsset;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactoryAsset201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactoryIntervention {
            export type Body = Components.RequestBodies.PostUserOrganisationFactoryIntervention;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactoryIntervention201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationFactorySensor {
            export type Body = Components.RequestBodies.PostUserOrganisationFactorySensor;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationFactorySensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationInvitation {
            export type Body = Components.RequestBodies.PostUserOrganisationInvitation;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationInvitation201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationInvitationFollowup {
            export type Body = Components.RequestBodies.PostUserOrganisationInvitationFollowup;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationInvitationFollowup201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationNotificationRead {
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationNotificationRead201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type From = Components.Parameters.From;
                export type To = Components.Parameters.To;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type NotificationId = Components.Parameters.NotificationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly from: Parameters.From;
                readonly to: Parameters.To;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly notificationId: Parameters.NotificationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PostUserOrganisationProject {
            export type Body = Components.RequestBodies.PostUserOrganisationProject;
            export namespace Responses {
                export type $201 = Components.Responses.PostUserOrganisationProject201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutAttachment {
            export type Body = Components.RequestBodies.Attachment;
            export namespace Responses {
                export type $201 = Components.Responses.PutAttachment201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type AttachmentId = Components.Parameters.AttachmentId;
                export type WithAlertId = Components.Parameters.WithAlertId;
                export type WithReportId = Components.Parameters.WithReportId;
                export type WithInterventionId = Components.Parameters.WithInterventionId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.AttachmentFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly attachmentId: Parameters.AttachmentId;
                readonly withAlertId?: Parameters.WithAlertId;
                readonly withReportId?: Parameters.WithReportId;
                readonly withInterventionId?: Parameters.WithInterventionId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutImage {
            export type Body = Components.RequestBodies.Image;
            export namespace Responses {
                export type $201 = Components.Responses.PutImage201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type WithAlertId = Components.Parameters.WithAlertId;
                export type WithInterventionId = Components.Parameters.WithInterventionId;
                export type ImageId = Components.Parameters.ImageId;
                export type XFileName = Components.Parameters.FileName;
                export type XFileSize = Components.Parameters.FileSize;
                export type XFileType = Components.Parameters.ImageFileType;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly withAlertId?: Parameters.WithAlertId;
                readonly withInterventionId?: Parameters.WithInterventionId;
                readonly imageId: Parameters.ImageId;
                readonly xFileName: Parameters.XFileName;
                readonly xFileSize: Parameters.XFileSize;
                readonly xFileType: Parameters.XFileType;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutNotificationEvent {
            export type Body = Components.RequestBodies.PutNotificationEvent;
            export namespace Responses {
                export type $204 = Components.Responses.PutNotificationEvent204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type NotificationId = Components.Parameters.NotificationId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly notificationId: Parameters.NotificationId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutOrganisationFactoryEvent {
            export type Body = Components.RequestBodies.PutOrganisationFactoryEvent;
            export namespace Responses {
                export type $204 = Components.Responses.PutOrganisationFactoryEvent204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type HasAttachments = Components.Parameters.PutOrganisationFactoryEvent3;
                export type HasImages = Components.Parameters.PutOrganisationFactoryEvent4;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type EventId = Components.Parameters.EventId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly hasAttachments?: Parameters.HasAttachments;
                readonly hasImages?: Parameters.HasImages;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly eventId: Parameters.EventId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAlertFeedback {
            export type Body = Components.RequestBodies.PutUserOrganisationAlertFeedback;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAlertFeedback201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type AlertId = Components.Parameters.AlertId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly alertId: Parameters.AlertId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationAssetSensor {
            export type Body = Components.RequestBodies.PutUserOrganisationAssetSensor;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationAssetSensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type AssetId = Components.Parameters.AssetId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly assetId: Parameters.AssetId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactory {
            export type Body = Components.RequestBodies.PutUserOrganisationFactory;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactory201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryAsset {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryAsset;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactoryAsset201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type AssetId = Components.Parameters.AssetId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly assetId: Parameters.AssetId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryIntervention {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryIntervention;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactoryIntervention201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type UserId = Components.Parameters.UserId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type InterventionId = Components.Parameters.InterventionId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly organisationId: Parameters.OrganisationId;
                readonly userId: Parameters.UserId;
                readonly factoryId: Parameters.FactoryId;
                readonly interventionId: Parameters.InterventionId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactoryPreferences {
            export type Body = Components.RequestBodies.PutUserOrganisationFactoryPreferences;
            export namespace Responses {
                export type $201 = Components.Responses.PreferencesResponse<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type Level = Components.Parameters.PreferenceLevel;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly level: Parameters.Level;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace PutUserOrganisationFactorySensor {
            export type Body = Components.RequestBodies.PutUserOrganisationFactorySensor;
            export namespace Responses {
                export type $201 = Components.Responses.PutUserOrganisationFactorySensor201<201>;
            }
            export type Output = Responses.$201;
            export namespace Parameters {
                export type UserId = Components.Parameters.UserId;
                export type OrganisationId = Components.Parameters.OrganisationId;
                export type FactoryId = Components.Parameters.FactoryId;
                export type SensorId = Components.Parameters.SensorId;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly body: Body;
                readonly userId: Parameters.UserId;
                readonly organisationId: Parameters.OrganisationId;
                readonly factoryId: Parameters.FactoryId;
                readonly sensorId: Parameters.SensorId;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetOAuth2Authorize {
            export namespace Responses {
                export type $302 = Components.Responses.GetOAuth2Authorize302<302>;
            }
            export type Output = Responses.$302;
            export namespace Parameters {
                export type ResponseType = Components.Parameters.ResponseType;
                export type ClientId = Components.Parameters.ClientId;
                export type RedirectUri = Components.Parameters.RedirectURI;
                export type Scope = Components.Parameters.Scope;
                export type State = Components.Parameters.State;
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly responseType: Parameters.ResponseType;
                readonly clientId: Parameters.ClientId;
                readonly redirectUri?: Parameters.RedirectUri;
                readonly scope?: Parameters.Scope;
                readonly state: Parameters.State;
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
        export namespace GetPing {
            export namespace Responses {
                export type $200 = Components.Responses.GetPing200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type XSDKVersion = Components.Parameters.XSdkVersion;
                export type XApplicationVersion = Components.Parameters.XApplicationVersion;
                export type XAPIVersion = Components.Parameters.XApiVersion;
            }
            export type Input = {
                readonly xSdkVersion?: Parameters.XSDKVersion;
                readonly xApplicationVersion?: Parameters.XApplicationVersion;
                readonly xApiVersion?: Parameters.XAPIVersion;
            };
        }
    }
    export namespace Responses {
        export type AlertItemResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertItem;
        };
        export type AlertsCollection<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsItems;
        };
        export type EventDataResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorsEventData;
        };
        export type TasksCollection<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesTasksCollectionBody0;
        };
        export type AllPreferencesResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AllPreferencesModel;
        };
        export type PreferencesResponse<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.PartialPreferencesModel;
        };
        export type DeleteAlert204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteApplication204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteIntervention204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteProject204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationAlert204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationAlertAttachment204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertAttachment201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationAlertImage204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationApplication204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationApplication201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationItem;
        };
        export type DeleteUserOrganisationIntervention204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationInterventionImage204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationInterventionImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationMembership204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUserOrganisationProject204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationProject201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type DeleteUserOrganisationSensorSeries204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetAlertsStats200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsStats;
        };
        export type GetAuthProfile200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type GetMySelf302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPI200Body0;
        };
        export type GetOrganisationFactory200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type GetOrganisationFactoryAlertsStats200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AlertsStat;
        };
        export type GetOrganisationFactoryAsset200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type GetOrganisationFactoryAssets200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetsItems;
        };
        export type GetOrganisationFactoryDataLabels200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationFactoryDataLabels200Body0;
        };
        export type GetOrganisationFactoryEvents200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.EventsItems;
        };
        export type GetOrganisationFactoryIntervention200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type GetOrganisationFactoryInterventions200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionsItems;
        };
        export type GetOrganisationFactoryReports200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ReportsItems;
        };
        export type GetOrganisationFactorySensor200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type GetOrganisationFactorySensors200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorsItems;
        };
        export type GetOrganisationFactoryTrends200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TrendItems;
        };
        export type GetOrganisationProject200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type GetOrganisationProjects200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectsItems;
        };
        export type GetOrganisationSensorsAggregateData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateData200Body0;
        };
        export type GetOrganisationSensorsAggregateEventData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateEventData200Body0;
        };
        export type GetOrganisationSensorsAggregateEventRangeData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsAggregateEventRangeData200Body0;
        };
        export type GetOrganisationSensorsData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsData200Body0;
        };
        export type GetOrganisationSensorsEventRangeData200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationSensorsEventRangeData200Body0;
        };
        export type GetOrganisationUniversalSearch200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOrganisationUniversalSearch200Body0;
        };
        export type PutReport201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUniversalSearch200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetUniversalSearch200Body0;
        };
        export type GetUser200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type PutUser201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type GetUserFactories200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoriesItems;
        };
        export type GetUserNotifications200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.NotificationsItems;
        };
        export type GetUserOrganisation200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type PutUserOrganisation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type GetUserOrganisationApplications200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationsItems;
        };
        export type PostUserOrganisationApplication201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApplicationItem;
        };
        export type GetUserOrganisationFactories200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoriesItems;
        };
        export type PostUserOrganisationFactory201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type GetUserOrganisationUsers200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UsersItems;
        };
        export type GetUserOrganisations200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationsItems;
        };
        export type PostUserOrganisation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type PostUser201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type PostAuthLogin200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthLogin200Body0;
        };
        export type PostAuthLogout204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostAuthPasswordChange200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthPasswordChange200Body0;
        };
        export type PostAuthRefresh200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthRefresh200Body0;
        };
        export type PostAuthVerify200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "set-cookie"?: Components.Headers.PostAuthVerify200HeadersSetCookie;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostAuthVerify200Body0;
        };
        export type PostOAuth2Token200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2Token200Body0;
        };
        export type PostOAuth2Token400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2Token400Body0;
        };
        export type PostOrganisationData201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostPasswordChangeRequest200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserInvitationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationAssetSensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PostUserOrganisationFactoryAsset201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type PostUserOrganisationFactoryIntervention201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type PostUserOrganisationFactorySensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PostUserOrganisationInvitation201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostUserOrganisationInvitation201Body0;
        };
        export type PostUserOrganisationInvitationFollowup201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationNotificationRead201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PostUserOrganisationProject201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ProjectItem;
        };
        export type PutAttachment201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutImage201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutNotificationEvent204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutOrganisationFactoryEvent204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAlertFeedback201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type PutUserOrganisationAssetSensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type PutUserOrganisationFactory201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type PutUserOrganisationFactoryAsset201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AssetItem;
        };
        export type PutUserOrganisationFactoryIntervention201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.InterventionItem;
        };
        export type PutUserOrganisationFactorySensor201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type GetOAuth2Authorize302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetPing200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPing200Body0;
        };
    }
    export namespace Parameters {
        export type AlertId = Components.Schemas.AlertUUID;
        export type Direction = [
            Components.Schemas.SortDirection,
            ...Components.Schemas.SortDirection[]
        ];
        export type FromFilter = Components.Schemas.Date;
        export type ToFilter = Components.Schemas.Date;
        export type OptionalWithAlertsIds = Components.Schemas.AlertsUUIDS;
        export type WithAlertsStatuses = Components.Schemas.AlertStatuses;
        export type AlertsSortBy = [
            Components.Schemas.AlertsSortByValue,
            ...Components.Schemas.AlertsSortByValue[]
        ];
        export type WithAlertId = Components.Schemas.AlertUUID;
        export type WithAttachments = boolean;
        export type WithImages = boolean;
        export type WithOrphanAlertsOnly = boolean;
        export type ApplicationId = Components.Schemas.ApplicationUUID;
        export type OptionalWithApplicationsIds = Components.Schemas.ApplicationsUUIDS;
        export type ApplicationsSortBy = [
            Components.Schemas.ApplicationsSortByValue,
            ...Components.Schemas.ApplicationsSortByValue[]
        ];
        export type AssetId = Components.Schemas.AssetUUID;
        export type IncludeChildrenIds = boolean;
        export type OptionalWithAssetsIds = Components.Schemas.AssetsUUIDS;
        export type OptionalWithAssetsTypes = Components.Schemas.AssetType[];
        export type OptionalWithParentsAssetsIds = Components.Schemas.AssetsUUIDS;
        export type OptionalWithRootAssetsFirst = boolean;
        export type AssetsSortBy = [
            Components.Schemas.AssetsSortByValue,
            ...Components.Schemas.AssetsSortByValue[]
        ];
        export type AfterDate = Components.Schemas.Date;
        export type BeforeDate = Components.Schemas.Date;
        export type Before = Components.Schemas.Cursor;
        export type EventId = Components.Schemas.EventUUID;
        export type OptionalsensorsIds = Components.Schemas.NonEmptySensorsUUIDS;
        export type OptionalvaluesNames = Components.Schemas.NonEmptyValuesNames;
        export type OptionalWithEventsIds = Components.Schemas.EventsUUIDS;
        export type OptionalWithEventType = Components.Schemas.EventTypes;
        export type OptionalWithFactoriesIds = Components.Schemas.FactoriesUUIDS;
        export type OptionalWithOrganisationsIds = Components.Schemas.OrganisationsUUIDS;
        export type OptionalWithUsersFeedback = boolean;
        export type Since = Components.Schemas.Cursor;
        export type Size = Components.Schemas.Size;
        export type FactoryId = Components.Schemas.FactoryUUID;
        export type FactoriesSortBy = [
            Components.Schemas.FactoriesSortByValue,
            ...Components.Schemas.FactoriesSortByValue[]
        ];
        export type InterventionId = Components.Schemas.InterventionUUID;
        export type OptionalWithInterventionsIds = Components.Schemas.InterventionsUUIDS;
        export type InterventionsSortBy = [
            Components.Schemas.InterventionsSortByValue,
            ...Components.Schemas.InterventionsSortByValue[]
        ];
        export type WithInterventionId = Components.Schemas.InterventionUUID;
        export type MockName = Components.Schemas.MockName;
        export type OrganisationId = Components.Schemas.OrganisationUUID;
        export type OrganisationsSortBy = [
            Components.Schemas.OrganisationsSortByValue,
            ...Components.Schemas.OrganisationsSortByValue[]
        ];
        export type ProjectId = Components.Schemas.ProjectUUID;
        export type OptionalWithProjectsIds = Components.Schemas.ProjectsUUIDS;
        export type ProjectCode = Components.Schemas.ProjectCode;
        export type ProjectsSortBy = [
            Components.Schemas.ProjectsSortByValue,
            ...Components.Schemas.ProjectsSortByValue[]
        ];
        export type OptionalWithReportsIds = Components.Schemas.ReportsUUIDS;
        export type ReportId = Components.Schemas.ReportUUID;
        export type ReportsSortBy = [
            Components.Schemas.ReportsSortByValue,
            ...Components.Schemas.ReportsSortByValue[]
        ];
        export type WithReportId = Components.Schemas.ReportUUID;
        export type WithAlertTriggerTypes = Components.Schemas.AlertTriggerTypes;
        export type OptionalWithSensorsIds = Components.Schemas.SensorsUUIDS;
        export type SensorId = Components.Schemas.SensorUUID;
        export type SensorsSortBy = [
            Components.Schemas.SensorsSortByValue,
            ...Components.Schemas.SensorsSortByValue[]
        ];
        export type ValueName = Components.Schemas.ValueName;
        export type WithFactorySensorsOnly = boolean;
        export type Aggregations = Components.Schemas.Aggregations;
        export type From = Components.Schemas.Date;
        export type Granularity = Components.Schemas.Granularity;
        export type WithTimeZone = Components.Schemas.TimeZone;
        export type To = Components.Schemas.Date;
        export type SensorEventTypesQueryParameter = Components.Schemas.EventTypes;
        export type IncludeLabels = boolean;
        export type OptionalWithAssetConfigurations = Components.Schemas.AssetConfigurations;
        export type OptionalWithDataLabels = Components.Schemas.Tags;
        export type OptionalWithManufacturingCycles = Components.Schemas.ManufacturingCycles;
        export type OptionalWithManufacturingPhases = Components.Schemas.ManufacturingPhases;
        export type OptionalWithValuedLabelsNames = Components.Schemas.ValuedLabelName[];
        export type OptionalWithValuedLabelsValues = Components.Schemas.LabelValue[];
        export type EventField = Components.Schemas.EventField;
        export type EventFieldsQueryParameter = Components.Schemas.EventFields;
        export type SensorsIds = Components.Schemas.NonEmptySensorsUUIDS;
        export type ValuesNames = Components.Schemas.NonEmptyValuesNames;
        export type OptionalWithAncestorsIds = Components.Schemas.AssetsUUIDS;
        export type TasksSortBy = [
            Components.Schemas.TasksSortByValue,
            ...Components.Schemas.TasksSortByValue[]
        ];
        export type WithPriorities = Components.Schemas.Priorities;
        export type WithTasksStatuses = Components.Schemas.TasksStatuses;
        export type WithTasksTypes = Components.Schemas.TasksTypes;
        export type SearchSentence = string;
        export type SearchType = Components.Schemas.SearchType;
        export type WithFilterIds = Components.Schemas.UUID[];
        export type WithFilterTypes = Components.Schemas.SearchFilterType[];
        export type IncludeOrganisationLevelItemsQueryParameter = boolean;
        export type OptionalWithNotificationTypesQueryParameter = Components.Schemas.NotificationTypes;
        export type WithMembershipsStatuses = Components.Schemas.UserMembershipStatus[];
        export type OptionalWithUsersIds = Components.Schemas.UsersUUIDS;
        export type Limit = Components.Schemas.Limit;
        export type Start = Components.Schemas.Start;
        export type UsersSortBy = [
            Components.Schemas.UsersSortByValue,
            ...Components.Schemas.UsersSortByValue[]
        ];
        export type UserId = Components.Schemas.UserUUID;
        export type Date = Components.Schemas.Date;
        export type IngestionStage = Components.Schemas.IngestionStage;
        export type Cookie = string;
        export type NotificationId = Components.Schemas.NotificationUUID;
        export type AttachmentFileType = Enums.AttachmentFileType;
        export type AttachmentId = Components.Schemas.AttachmentUUID;
        export type FileName = string;
        export type FileSize = number;
        export type ImageFileType = Enums.ImageFileType;
        export type ImageId = Components.Schemas.ImageUUID;
        export type RunId = Components.Schemas.UUID;
        export type PreferenceLevel = Components.Schemas.PreferenceLevel;
        export type ClientId = string;
        export type RedirectURI = string;
        export type ResponseType = Enums.ResponseType;
        export type Scope = string;
        export type State = string;
        export type XSdkVersion = string;
        export type XApplicationVersion = string;
        export type XApiVersion = string;
        export type DeleteUserOrganisationMembership2 = string;
        export type GetOpenAPI0 = string[];
        export type PostUser0 = string;
        export type PutOrganisationFactoryEvent3 = boolean;
        export type PutOrganisationFactoryEvent4 = boolean;
    }
    export namespace PathItems {
        export namespace AlertsalertId {
            export import Delete = Components.Operations.DeleteAlert;
        }
        export namespace ApplicationsapplicationId {
            export import Delete = Components.Operations.DeleteApplication;
        }
        export namespace InterventionsinterventionId {
            export import Delete = Components.Operations.DeleteIntervention;
        }
        export namespace ProjectsprojectId {
            export import Delete = Components.Operations.DeleteProject;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlert;
            export import Get = Components.Operations.GetUserOrganisationAlert;
            export import Put = Components.Operations.PutUserOrganisationAlert;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdattachmentsattachmentId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlertAttachment;
            export import Put = Components.Operations.PutUserOrganisationAlertAttachment;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdimagesimageId {
            export import Delete = Components.Operations.DeleteUserOrganisationAlertImage;
            export import Put = Components.Operations.PutUserOrganisationAlertImage;
        }
        export namespace UsersuserIdorganisationsorganisationIdapplicationsapplicationId {
            export import Delete = Components.Operations.DeleteUserOrganisationApplication;
            export import Put = Components.Operations.PutUserOrganisationApplication;
        }
        export namespace UsersuserIdorganisationsorganisationIdinterventionsinterventionId {
            export import Delete = Components.Operations.DeleteUserOrganisationIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdinterventionsinterventionIdimagesimageId {
            export import Delete = Components.Operations.DeleteUserOrganisationInterventionImage;
            export import Put = Components.Operations.PutUserOrganisationInterventionImage;
        }
        export namespace UsersuserIdorganisationsorganisationIdmembershipscollaboratorId {
            export import Delete = Components.Operations.DeleteUserOrganisationMembership;
        }
        export namespace UsersuserIdorganisationsorganisationIdprojectsprojectId {
            export import Delete = Components.Operations.DeleteUserOrganisationProject;
            export import Put = Components.Operations.PutUserOrganisationProject;
        }
        export namespace UsersuserIdorganisationsorganisationIdsensorssensorIdseriesvalueName {
            export import Delete = Components.Operations.DeleteUserOrganisationSensorSeries;
        }
        export namespace Alertsstats {
            export import Get = Components.Operations.GetAlertsStats;
        }
        export namespace Authprofile {
            export import Get = Components.Operations.GetAuthProfile;
        }
        export namespace Me {
            export import Get = Components.Operations.GetMySelf;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryId {
            export import Get = Components.Operations.GetOrganisationFactory;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdalertsstats {
            export import Get = Components.Operations.GetOrganisationFactoryAlertsStats;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdassetsassetId {
            export import Get = Components.Operations.GetOrganisationFactoryAsset;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdassets {
            export import Get = Components.Operations.GetOrganisationFactoryAssets;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdlabels {
            export import Get = Components.Operations.GetOrganisationFactoryDataLabels;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdevents {
            export import Get = Components.Operations.GetOrganisationFactoryEvents;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdinterventionsinterventionId {
            export import Get = Components.Operations.GetOrganisationFactoryIntervention;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdinterventions {
            export import Get = Components.Operations.GetOrganisationFactoryInterventions;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdreports {
            export import Get = Components.Operations.GetOrganisationFactoryReports;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdsensorssensorId {
            export import Get = Components.Operations.GetOrganisationFactorySensor;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdsensors {
            export import Get = Components.Operations.GetOrganisationFactorySensors;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdtrends {
            export import Get = Components.Operations.GetOrganisationFactoryTrends;
        }
        export namespace OrganisationsorganisationIdprojectsprojectId {
            export import Get = Components.Operations.GetOrganisationProject;
        }
        export namespace OrganisationsorganisationIdprojects {
            export import Get = Components.Operations.GetOrganisationProjects;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateData;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateEventData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateEventData;
        }
        export namespace OrganisationsorganisationIdsensorsaggregateEventRangeData {
            export import Get = Components.Operations.GetOrganisationSensorsAggregateEventRangeData;
        }
        export namespace OrganisationsorganisationIdsensorsdata {
            export import Get = Components.Operations.GetOrganisationSensorsData;
        }
        export namespace OrganisationsorganisationIdsensorseventData {
            export import Get = Components.Operations.GetOrganisationSensorsEventData;
        }
        export namespace OrganisationsorganisationIdsensorseventRangeDataSchema {
            export import Get = Components.Operations.GetOrganisationSensorsEventRangeData;
        }
        export namespace OrganisationsorganisationIdsearch {
            export import Get = Components.Operations.GetOrganisationUniversalSearch;
        }
        export namespace ReportsreportId {
            export import Put = Components.Operations.PutReport;
        }
        export namespace Search {
            export import Get = Components.Operations.GetUniversalSearch;
        }
        export namespace UsersuserId {
            export import Get = Components.Operations.GetUser;
            export import Put = Components.Operations.PutUser;
        }
        export namespace UsersuserIdfactories {
            export import Get = Components.Operations.GetUserFactories;
        }
        export namespace UsersuserIdnotifications {
            export import Get = Components.Operations.GetUserNotifications;
        }
        export namespace UsersuserIdorganisationsorganisationId {
            export import Get = Components.Operations.GetUserOrganisation;
            export import Put = Components.Operations.PutUserOrganisation;
        }
        export namespace UsersuserIdorganisationsorganisationIdalerts {
            export import Get = Components.Operations.GetUserOrganisationAlerts;
        }
        export namespace UsersuserIdorganisationsorganisationIdapplications {
            export import Get = Components.Operations.GetUserOrganisationApplications;
            export import Post = Components.Operations.PostUserOrganisationApplication;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactories {
            export import Get = Components.Operations.GetUserOrganisationFactories;
            export import Post = Components.Operations.PostUserOrganisationFactory;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdpreferences {
            export import Get = Components.Operations.GetUserOrganisationFactoryPreferences;
        }
        export namespace UsersuserIdorganisationsorganisationIdtasks {
            export import Get = Components.Operations.GetUserOrganisationTasks;
        }
        export namespace UsersuserIdorganisationsorganisationIdusers {
            export import Get = Components.Operations.GetUserOrganisationUsers;
        }
        export namespace UsersuserIdorganisations {
            export import Get = Components.Operations.GetUserOrganisations;
            export import Post = Components.Operations.PostUserOrganisation;
        }
        export namespace Users {
            export import Post = Components.Operations.PostUser;
        }
        export namespace Authlogin {
            export import Post = Components.Operations.PostAuthLogin;
        }
        export namespace Authlogout {
            export import Post = Components.Operations.PostAuthLogout;
        }
        export namespace AuthchangePassword {
            export import Post = Components.Operations.PostAuthPasswordChange;
        }
        export namespace Authrefresh {
            export import Post = Components.Operations.PostAuthRefresh;
        }
        export namespace Authverify {
            export import Post = Components.Operations.PostAuthVerify;
        }
        export namespace Oauth2Token {
            export import Post = Components.Operations.PostOAuth2Token;
        }
        export namespace OrganisationsorganisationIddataprojectCode {
            export import Post = Components.Operations.PostOrganisationData;
        }
        export namespace Oauth2Reset {
            export import Post = Components.Operations.PostPasswordChangeRequest;
        }
        export namespace UsersuserIdinvitationsresponse {
            export import Post = Components.Operations.PostUserInvitationResponse;
        }
        export namespace UsersuserIdorganisationsorganisationIdassetsassetIdsensors {
            export import Post = Components.Operations.PostUserOrganisationAssetSensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdassets {
            export import Post = Components.Operations.PostUserOrganisationFactoryAsset;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdinterventions {
            export import Post = Components.Operations.PostUserOrganisationFactoryIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdsensors {
            export import Post = Components.Operations.PostUserOrganisationFactorySensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdinvitations {
            export import Post = Components.Operations.PostUserOrganisationInvitation;
        }
        export namespace UsersuserIdorganisationsorganisationIdinvitationfollowup {
            export import Post = Components.Operations.PostUserOrganisationInvitationFollowup;
        }
        export namespace OrganisationsorganisationIdusersuserIdnotificationsnotificationIdread {
            export import Post = Components.Operations.PostUserOrganisationNotificationRead;
        }
        export namespace UsersuserIdorganisationsorganisationIdprojects {
            export import Post = Components.Operations.PostUserOrganisationProject;
        }
        export namespace AttachmentsattachmentId {
            export import Put = Components.Operations.PutAttachment;
        }
        export namespace ImagesimageId {
            export import Put = Components.Operations.PutImage;
        }
        export namespace NotificationsnotificationId {
            export import Put = Components.Operations.PutNotificationEvent;
        }
        export namespace OrganisationsorganisationIdfactoriesfactoryIdeventseventId {
            export import Put = Components.Operations.PutOrganisationFactoryEvent;
        }
        export namespace UsersuserIdorganisationsorganisationIdalertsalertIdfeedback {
            export import Put = Components.Operations.PutUserOrganisationAlertFeedback;
        }
        export namespace UsersuserIdorganisationsorganisationIdassetsassetIdsensorssensorId {
            export import Put = Components.Operations.PutUserOrganisationAssetSensor;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryId {
            export import Put = Components.Operations.PutUserOrganisationFactory;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdassetsassetId {
            export import Put = Components.Operations.PutUserOrganisationFactoryAsset;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdinterventionsinterventionId {
            export import Put = Components.Operations.PutUserOrganisationFactoryIntervention;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdpreferenceslevel {
            export import Put = Components.Operations.PutUserOrganisationFactoryPreferences;
        }
        export namespace UsersuserIdorganisationsorganisationIdfactoriesfactoryIdsensorssensorId {
            export import Put = Components.Operations.PutUserOrganisationFactorySensor;
        }
        export namespace Oauth2Authorize {
            export import Get = Components.Operations.GetOAuth2Authorize;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type Aveva = Components.Schemas.RequestBodiesAvevaBody0;
        export type PowerTrackSyncConfig = Components.Schemas.RequestBodiesPowerTrackSyncConfigBody0;
        export type OpenSearchSnapshot = Components.Schemas.RequestBodiesOpenSearchSnapshotBody0;
        export type Attachment = Components.Schemas.BinaryModel | Components.Schemas.BinaryModel;
        export type Image = Components.Schemas.BinaryModel | Components.Schemas.BinaryModel;
        export type Report = Components.Schemas.ReportModel;
        export type PutUserOrganisationAlert = Components.Schemas.AlertModel;
        export type PutUserOrganisationApplication = Components.Schemas.ApplicationModel;
        export type PutUserOrganisationProject = Components.Schemas.ProjectModel;
        export type PutUser = Components.Schemas.UserModel;
        export type PutUserOrganisation = Components.Schemas.OrganisationModel;
        export type PostUserOrganisationApplication = Components.Schemas.ApplicationModel;
        export type PostUserOrganisationFactory = Components.Schemas.FactoryModel;
        export type PostUserOrganisation = Components.Schemas.OrganisationModel;
        export type PostUser = Components.Schemas.UserModel;
        export type PostAuthLogin = Components.Schemas.RequestBodiesPostAuthLoginBody0;
        export type PostAuthPasswordChange = Components.Schemas.RequestBodiesPostAuthPasswordChangeBody0;
        export type PostAuthRefresh = Components.Schemas.RequestBodiesPostAuthRefreshBody0;
        export type PostAuthVerify = Components.Schemas.RequestBodiesPostAuthVerifyBody0;
        export type PostOAuth2Token = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostOrganisationData = Components.Schemas.InputData;
        export type PostPasswordChangeRequest = Components.Schemas.RequestBodiesPostPasswordChangeRequestBody0;
        export type PostUserInvitationResponse = Components.Schemas.RequestBodiesPostUserInvitationResponseBody0;
        export type PostUserOrganisationAssetSensor = Components.Schemas.SensorModel;
        export type PostUserOrganisationFactoryAsset = Components.Schemas.AssetModel;
        export type PostUserOrganisationFactoryIntervention = Components.Schemas.InterventionModel;
        export type PostUserOrganisationFactorySensor = Components.Schemas.SensorModel;
        export type PostUserOrganisationInvitation = Components.Schemas.UserOrganisationInvitation;
        export type PostUserOrganisationInvitationFollowup = Components.Schemas.RequestBodiesPostUserOrganisationInvitationFollowupBody0;
        export type PostUserOrganisationProject = Components.Schemas.ProjectModel;
        export type PutNotificationEvent = Components.Schemas.NotificationEvent;
        export type PutOrganisationFactoryEvent = Components.Schemas.EventModel;
        export type PutUserOrganisationAlertFeedback = Components.Schemas.RequestBodiesPutUserOrganisationAlertFeedbackBody0;
        export type PutUserOrganisationAssetSensor = Components.Schemas.SensorModel;
        export type PutUserOrganisationFactory = Components.Schemas.FactoryModel;
        export type PutUserOrganisationFactoryAsset = Components.Schemas.AssetModel;
        export type PutUserOrganisationFactoryIntervention = Components.Schemas.InterventionModel;
        export type PutUserOrganisationFactoryPreferences = Components.Schemas.PartialPreferencesModel;
        export type PutUserOrganisationFactorySensor = Components.Schemas.SensorModel;
    }
    export namespace Headers {
        export type PostAuthVerify200HeadersSetCookie = string[];
    }
    export namespace Schemas {
        export type AlertStatuses = [
            Components.Schemas.AlertStatus,
            ...Components.Schemas.AlertStatus[]
        ];
        export type AlertUUID = string;
        export type AlertsUUIDS = Components.Schemas.AlertUUID[];
        export type SortDirection = Enums.SortDirection;
        export type ImageUUID = string;
        export type ImagesUUIDS = Components.Schemas.ImageUUID[];
        export type AlertsSortByValue = Enums.AlertsSortByValue;
        export type AlertsStat = {
            organisationId: Components.Schemas.OrganisationUUID;
            stats: {
                discarded: number;
                fixed: number;
                closed: number;
                open: number;
                total: number;
            };
        };
        export type AlertsStats = Components.Schemas.AlertsStat[];
        export type ApplicationData = {
            name: string;
            description: string;
            allowedScopes: [
                Components.Schemas.Scope,
                ...Components.Schemas.Scope[]
            ];
            allowedGrantTypes: [
                Components.Schemas.GrantType,
                ...Components.Schemas.GrantType[]
            ];
            callbackUrl: string;
            isActive: boolean;
        };
        export type ApplicationItem = {
            item: Components.Schemas.ApplicationUUID;
            applications: Components.Schemas.ApplicationModelHash;
        };
        export type ApplicationModel = {
            id?: Components.Schemas.ApplicationUUID;
            authorId?: Components.Schemas.UserUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            data: Components.Schemas.ApplicationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            secret?: string;
        };
        export type ApplicationUUID = string;
        export type ApplicationModelHash = {
            [pattern: string]: Components.Schemas.ApplicationModel;
        };
        export type ApplicationsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ApplicationsUUIDS;
            applications: Components.Schemas.ApplicationModelHash;
        };
        export type ApplicationsUUIDS = Components.Schemas.ApplicationUUID[];
        export type GrantType = Enums.GrantType;
        export type Scope = Enums.Scope;
        export type ApplicationsSortByValue = Enums.ApplicationsSortByValue;
        export type AssetAreaData = {
            type: "area";
        };
        export type AssetBaseData = {
            name: string;
            tags: Components.Schemas.Tags;
            parentId?: Components.Schemas.AssetUUID;
        };
        export type AssetConfiguration = string;
        export type AssetData = Components.Schemas.AssetBaseData & (Components.Schemas.AssetAreaData | Components.Schemas.AssetLineData | Components.Schemas.AssetMachineData | Components.Schemas.AssetPartData);
        export type AssetItem = {
            item: Components.Schemas.AssetUUID;
            assets: Components.Schemas.AssetModelHash;
        };
        export type AssetLineData = {
            type: "line";
            configurations: {
                [pattern: string]: {
                    machinesTree: Components.Schemas.LineMachineTree;
                };
            };
        };
        export type AssetMachineData = {
            type: "machine";
        };
        export type AssetPartData = {
            type: "part";
        };
        export type AssetModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.AssetUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            childrenIds?: Components.Schemas.AssetsUUIDS;
            ancestorsIds?: Components.Schemas.AssetsUUIDS;
            metrics?: Components.Schemas.LineMetrics;
            currentConfiguration?: Components.Schemas.AssetConfiguration;
            currentPhase?: Components.Schemas.ManufacturingPhase;
            currentCycle?: Components.Schemas.ManufacturingCycle;
            powerState?: Enums.PowerState;
            operatingState?: Enums.OperatingState;
            healthState?: Enums.HealthState;
            data: Components.Schemas.AssetData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type AssetType = Enums.AssetType;
        export type AssetUUID = string;
        export type AssetModelHash = {
            [pattern: string]: Components.Schemas.AssetModel;
        };
        export type AssetsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.AssetsUUIDS;
            assets: Components.Schemas.AssetModelHash;
        };
        export type AssetsUUIDS = Components.Schemas.AssetUUID[];
        export type LineMachineTree = {
            nodes?: Components.Schemas.AssetUUID[];
            edges?: {
                source?: Components.Schemas.AssetUUID;
                target?: Components.Schemas.AssetUUID;
            }[];
        };
        export type LineMetrics = {
            cadency?: {
                value: number;
                unit: string;
                status: Components.Schemas.LineMetricsStatus;
            };
            output?: {
                value: number;
                goal?: number;
                unit: string;
                status: Components.Schemas.LineMetricsStatus;
            };
        };
        export type LineMetricsStatus = Enums.LineMetricsStatus;
        export type ManufacturingCycle = string;
        export type ManufacturingPhase = string;
        export type ManufacturingPhases = Components.Schemas.ManufacturingPhase[];
        export type AssetsSortByValue = Enums.AssetsSortByValue;
        export type UniqueNonEmptyAssetsUUIDS = Components.Schemas.AssetUUID[];
        export type AnomalyEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.AnomalyEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                alertCode: Components.Schemas.AlertCode;
                customI18NMessage?: Components.Schemas.I18NString;
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type AnomalyEventType = "anomaly";
        export type AssetConfigurations = Components.Schemas.AssetConfiguration[];
        export type AssetLabels = {
            values?: Components.Schemas.ValuedLabels;
            tags?: Components.Schemas.Tags;
            configurations?: Components.Schemas.AssetConfigurations;
            cycles?: Components.Schemas.ManufacturingCycles;
            phases?: Components.Schemas.ManufacturingPhases;
        };
        export type BaseDataLabels = {
            assets?: Components.Schemas.AssetLabels;
            ancestors?: Components.Schemas.AssetLabels;
            tags?: Components.Schemas.Tags;
        };
        export type Cursor = string;
        export type CycleEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.CycleEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                cycleId: Components.Schemas.NanoId;
                cycleValue?: number;
                [pattern: string]: unknown;
            };
        };
        export type CycleEventType = "cycle";
        export type DataLabels = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId?: string;
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            ancestorsIds: Components.Schemas.AssetsUUIDS;
            assetsIds: Components.Schemas.AssetsUUIDS;
            sensorsIds: Components.Schemas.SensorsUUIDS;
            valuesNames?: Components.Schemas.ValuesNames;
            labels: Components.Schemas.BaseDataLabels;
            runId?: Components.Schemas.RunUUID;
            usersFeedback?: Components.Schemas.UsersFeedback;
        };
        export type DriftDetectionEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DriftDetectionEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type DriftDetectionEventType = "drift_detection";
        export type DSPADDataAnalysisEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DSPADDataAnalysisEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type DSPADDataAnalysisEventType = "dspad_data_mvt";
        export type DSPADPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.DSPADPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                runName?: string;
                [pattern: string]: unknown;
            };
        };
        export type DSPADPredictEventType = "dspad_predict";
        export type EventModel = Components.Schemas.SegmentedAlertDetectionPredictEventModel | Components.Schemas.ForecastLearnEventModel | Components.Schemas.RealtimeAlertEventSchemaModel | Components.Schemas.DriftDetectionEventModel | Components.Schemas.ForecastPredictEventModel | Components.Schemas.DSPADPredictEventModel | Components.Schemas.ProcessEventSchemaModel | Components.Schemas.AnomalyEventModel | Components.Schemas.DSPADDataAnalysisEventModel | Components.Schemas.CycleEventModel | Components.Schemas.PhaseEventModel;
        export type EventType = Enums.EventType;
        export type EventTypes = Components.Schemas.EventType[];
        export type EventUUID = string;
        export type EventModelHash = {
            [pattern: string]: Components.Schemas.EventModel;
        };
        export type EventsItems = {
            total: number;
            cursors: {
                before?: Components.Schemas.Cursor;
                since?: Components.Schemas.Cursor;
            };
            items: Components.Schemas.EventsUUIDS;
            events: Components.Schemas.EventModelHash;
        };
        export type EventsUUIDS = Components.Schemas.EventUUID[];
        export type ForecastLearnEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ForecastLearnEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels;
        };
        export type ForecastLearnEventType = "univariate_forecast_learn";
        export type ForecastPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ForecastPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type ForecastPredictEventType = "univariate_forecast_predict";
        export type ManufacturingCycles = Components.Schemas.ManufacturingCycle[];
        export type NanoId = string;
        export type PhaseEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.PhaseEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                phaseName: string;
                phaseValue?: number;
                [pattern: string]: unknown;
            };
        };
        export type PhaseEventType = "phase";
        export type ProcessEventSchemaModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.ProcessEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                triggeringValue?: number;
                stepName: string;
                startDate?: Components.Schemas.Date;
                endDate?: Components.Schemas.Date;
            };
        };
        export type ProcessEventType = "process";
        export type RealtimeAlertEventSchemaModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.RealtimeAlertEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                triggeringValue: number;
                variables: Components.Schemas.SensorVariables;
                activatedAlertsTriggersIds: Components.Schemas.AlertsTriggersUUIDS;
                customI18NMessage?: Components.Schemas.I18NString;
            };
        };
        export type RealtimeAlertEventType = "realtime_alert";
        export type RunUUID = string;
        export type SegmentedAlertDetectionPredictEventModel = {
            id: Components.Schemas.EventUUID;
            type: Components.Schemas.SegmentedAlertDetectionPredictEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.DataLabels & {
                startDate: Components.Schemas.Date;
                endDate: Components.Schemas.Date;
                [pattern: string]: unknown;
            };
        };
        export type SegmentedAlertDetectionPredictEventType = "segmented_anomaly_detection_predict";
        export type Size = number;
        export type UserFeedback = number;
        export type UsersFeedback = {
            [pattern: string]: Components.Schemas.UserFeedback;
        };
        export type ValuedLabelName = string;
        export type ValuedLabels = {
            [pattern: string]: Components.Schemas.LabelValue;
        };
        export type DoSyncMode = Enums.DoSyncMode;
        export type FactoryModelHash = {
            [pattern: string]: Components.Schemas.FactoryModel;
        };
        export type FactoriesItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.FactoriesUUIDS;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type FactoriesUUIDS = Components.Schemas.FactoryUUID[];
        export type FactoryData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type FactoryItem = {
            item: Components.Schemas.FactoryUUID;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type FactoryModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.FactoryUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            rootAssetsIds?: Components.Schemas.AssetsUUIDS;
            linkedOrganisationsIds?: Components.Schemas.OrganisationsUUIDS;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type FactoryUUID = string;
        export type NoSyncMode = "none";
        export type FactoriesSortByValue = Enums.FactoriesSortByValue;
        export type SyncMode = Components.Schemas.NoSyncMode | Components.Schemas.DoSyncMode;
        export type SynchronizableItem = {
            syncMode?: Components.Schemas.NoSyncMode;
            externalId?: string;
        } | {
            syncMode: Components.Schemas.DoSyncMode;
            externalId?: string;
        };
        export type AlertAssignations = {
            id: Components.Schemas.UserUUID;
            assignedAt: Components.Schemas.Date;
            viewedAt?: Components.Schemas.Date;
        }[];
        export type AlertCode = Components.Schemas.StandardAlertCode | Components.Schemas.CustomAlertCode;
        export type AlertItem = {
            item: Components.Schemas.AlertUUID;
            alerts: Components.Schemas.AlertModelHash;
            interventions?: Components.Schemas.InterventionModelHash;
            sensors?: Components.Schemas.SensorModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            images?: Components.Schemas.ImageModelHash;
        };
        export type AlertModel = Components.Schemas.SynchronizableItem & Components.Schemas.BaseAlertModel;
        export type AlertStatus = Enums.AlertStatus;
        export type AlertModelHash = {
            [pattern: string]: Components.Schemas.AlertModel;
        };
        export type AlertsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.AlertsUUIDS;
            alerts: Components.Schemas.AlertModelHash;
            interventions?: Components.Schemas.InterventionModelHash;
            sensors?: Components.Schemas.SensorModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            images?: Components.Schemas.ImageModelHash;
        };
        export type BaseAlertData = {
            details: Components.Schemas.NoAlertDetailsModel | Components.Schemas.RealtimeAlertDetailsModel | Components.Schemas.SilentSensorsAlertDetailsModel;
            code: Components.Schemas.AlertCode;
            i18nMessage?: Components.Schemas.I18NString;
            priority: Components.Schemas.Priority;
            severity: Enums.Severity;
            viewed: boolean;
            assignedUsersIds?: Components.Schemas.UsersUUIDS;
            comment?: string;
        };
        export type BaseAlertModel = {
            id?: Components.Schemas.AlertUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            assetId?: Components.Schemas.AssetUUID;
            assignations?: Components.Schemas.AlertAssignations;
            interventionId?: Components.Schemas.InterventionUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            sensorsIds?: Components.Schemas.SensorsUUIDS;
            sensorsValues?: Components.Schemas.ValuesNames;
            eventsIds?: Components.Schemas.EventsUUIDS;
            recurringAlertId?: Components.Schemas.AlertUUID;
            startAt?: Components.Schemas.Date;
            endAt?: Components.Schemas.Date;
            taskStatus?: Components.Schemas.TaskStatus;
            status?: Components.Schemas.AlertStatus;
            usersFeedback?: Components.Schemas.UsersFeedback;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            data?: Components.Schemas.BaseAlertData;
        };
        export type CustomAlertCode = string;
        export type I18NString = {
            [pattern: string]: string;
        };
        export type ImageModel = {
            id: Components.Schemas.ImageUUID;
            authorId?: Components.Schemas.UserUUID;
            scope: Components.Schemas.ImageScope;
            alert?: Components.Schemas.AlertUUID;
            intervention?: Components.Schemas.InterventionUUID;
            urls: {
                original: string;
                large?: string;
                medium?: string;
                thumb?: string;
            };
            stats: {
                name: string;
                size: number;
                type: string;
            };
            resized?: string;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        };
        export type ImageScope = Enums.ImageScope;
        export type ImageModelHash = {
            [pattern: string]: Components.Schemas.ImageModel;
        };
        export type InterventionData = {
            assignedUsersIds: Components.Schemas.NonEmptyUsersUUIDS;
            assetsIds: Components.Schemas.AssetsUUIDS;
            archived: boolean;
            pauseAlertsTriggers?: boolean;
            type?: Components.Schemas.InterventionType;
            priority: Components.Schemas.Priority;
            qualification?: Components.Schemas.InterventionQualification;
            report?: Components.Schemas.InterventionReport;
        };
        export type InterventionItem = {
            item: Components.Schemas.InterventionUUID;
            interventions: Components.Schemas.InterventionModelHash;
            alerts?: Components.Schemas.AlertModelHash;
            images?: Components.Schemas.ImageModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            users?: Components.Schemas.UserModelHash;
        };
        export type InterventionQualification = {
            usersFeedback: Components.Schemas.UsersFeedback;
            alertsIds: Components.Schemas.NonEmptyAlertsUUIDS;
        };
        export type InterventionReport = {
            rootCauses?: string;
            fixDetails?: string;
            startDate: Components.Schemas.Date;
            endDate?: Components.Schemas.Date;
        } | {
            comment: string;
        };
        export type InterventionModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.InterventionUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            authorId?: Components.Schemas.UserUUID;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            qualifiedAt?: Components.Schemas.Date;
            reportedAt?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
            taskStatus?: Components.Schemas.TaskStatus;
            data: Components.Schemas.InterventionData;
        };
        export type InterventionType = Enums.InterventionType;
        export type InterventionUUID = string;
        export type InterventionModelHash = {
            [pattern: string]: Components.Schemas.InterventionModel;
        };
        export type InterventionsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.InterventionsUUIDS;
            interventions: Components.Schemas.InterventionModelHash;
            alerts?: Components.Schemas.AlertModelHash;
            images?: Components.Schemas.ImageModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
            users?: Components.Schemas.UserModelHash;
        };
        export type InterventionsUUIDS = Components.Schemas.InterventionUUID[];
        export type NoAlertDetailsModel = {};
        export type NonEmptyAlertsUUIDS = [
            Components.Schemas.AlertUUID,
            ...Components.Schemas.AlertUUID[]
        ];
        export type NonEmptyUsersUUIDS = [
            Components.Schemas.UserUUID,
            ...Components.Schemas.UserUUID[]
        ];
        export type Priority = Enums.Priority;
        export type RealtimeAlertDetailsModel = {
            triggeringValue: number;
            variables: Components.Schemas.SensorVariables;
            activatedAlertsTriggersIds: Components.Schemas.AlertsTriggersUUIDS;
        };
        export type SilentSensorsAlertDetailsModel = {
            totalSilence: boolean;
            sensorsIds: Components.Schemas.SensorsUUIDS;
        };
        export type InterventionsSortByValue = Enums.InterventionsSortByValue;
        export type StandardAlertCode = Enums.StandardAlertCode;
        export type MockName = string;
        export type TrendModelHash = {
            [pattern: string]: Components.Schemas.TrendModel;
        };
        export type TrendItems = {
            total: number;
            items: Components.Schemas.UUIDS;
            trends: Components.Schemas.TrendModelHash;
        };
        export type TrendModel = {
            id?: Components.Schemas.UUID;
            sensorId?: Components.Schemas.SensorUUID;
            intercept?: number;
            slope?: number;
            from?: Components.Schemas.Date;
            to?: Components.Schemas.Date;
        };
        export type NonEmptyValuesNames = [
            Components.Schemas.ValueName,
            ...Components.Schemas.ValueName[]
        ];
        export type OrganisationData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type OrganisationItem = {
            item: Components.Schemas.OrganisationUUID;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type OrganisationModel = {
            id?: Components.Schemas.OrganisationUUID;
            factoriesIds?: Components.Schemas.FactoriesUUIDS;
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type OrganisationUUID = string;
        export type OrganisationModelHash = {
            [pattern: string]: Components.Schemas.OrganisationModel;
        };
        export type OrganisationsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.OrganisationsUUIDS;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type OrganisationsUUIDS = Components.Schemas.OrganisationUUID[];
        export type OrganisationsSortByValue = Enums.OrganisationsSortByValue;
        export type DataTopic = string;
        export type MLAlgorithms = ("pipelines" | "custom")[];
        export type ProjectCode = string;
        export type ProjectData = {
            name: string;
            description: string;
            projectCode: Components.Schemas.ProjectCode;
            algorithms: Components.Schemas.MLAlgorithms;
            bridge: {
                type: "push";
            } | {
                type: "pull";
                handler?: string;
                schedule?: string;
            };
            ingestion?: Components.Schemas.ProjectIngestion;
            indexation?: Components.Schemas.ProjectIndexation;
        };
        export type ProjectIndexation = {
            handler: string;
            sourceTopic: Components.Schemas.DataTopic;
            batchSize: number;
            delay: number;
        };
        export type ProjectIngestion = {
            handler: string;
            sourceTopic: Components.Schemas.DataTopic;
            batchSize: number;
            delay: number;
        };
        export type ProjectItem = {
            item: Components.Schemas.ProjectUUID;
            projects: Components.Schemas.ProjectModelHash;
        };
        export type ProjectModel = {
            id?: Components.Schemas.ProjectUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            author?: Components.Schemas.UserUUID;
            data: Components.Schemas.ProjectData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type ProjectUUID = string;
        export type ProjectModelHash = {
            [pattern: string]: Components.Schemas.ProjectModel;
        };
        export type ProjectsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ProjectsUUIDS;
            projects: Components.Schemas.ProjectModelHash;
        };
        export type ProjectsUUIDS = Components.Schemas.ProjectUUID[];
        export type ProjectsSortByValue = Enums.ProjectsSortByValue;
        export type AttachmentModel = Components.Schemas.SynchronizableItem & {
            id: Components.Schemas.AttachmentUUID;
            authorId?: Components.Schemas.UserUUID;
            alert?: Components.Schemas.AlertUUID;
            intervention?: Components.Schemas.InterventionUUID;
            report?: Components.Schemas.ReportUUID;
            scope: Components.Schemas.AttachmentScope;
            url?: string;
            stats: {
                name: string;
                size: number;
                type: string;
            };
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type AttachmentScope = Enums.AttachmentScope;
        export type AttachmentUUID = string;
        export type AttachmentModelHash = {
            [pattern: string]: Components.Schemas.AttachmentModel;
        };
        export type AttachmentsUUIDS = Components.Schemas.AttachmentUUID[];
        export type ReportData = {
            name: string;
            description: string;
        };
        export type ReportItem = {
            item: Components.Schemas.ReportUUID;
            reports: Components.Schemas.ReportModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
        };
        export type ReportModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.ReportUUID;
            attachmentId?: Components.Schemas.AttachmentUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            authorId: Components.Schemas.UserUUID;
            factoryId: Components.Schemas.FactoryUUID;
            data: Components.Schemas.ReportData;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        };
        export type ReportUUID = string;
        export type ReportModelHash = {
            [pattern: string]: Components.Schemas.ReportModel;
        };
        export type ReportsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.ReportsUUIDS;
            reports: Components.Schemas.ReportModelHash;
            attachments?: Components.Schemas.AttachmentModelHash;
        };
        export type ReportsUUIDS = Components.Schemas.ReportUUID[];
        export type ReportsSortByValue = Enums.ReportsSortByValue;
        export type AlertTrigger = {
            id: Components.Schemas.AlertTriggerUUID;
            name: string;
            i18nMessage: Components.Schemas.I18NString;
        } & (Components.Schemas.SilenceAlertTrigger | Components.Schemas.RealtimeAlertTrigger);
        export type AlertTriggerUUID = string;
        export type AlertType = Enums.AlertType;
        export type AlertTriggerTypes = Components.Schemas.AlertType[];
        export type AlertsTriggersUUIDS = Components.Schemas.AlertTriggerUUID[];
        export type DataSensorSerieSource = {
            sourceType: "data";
        };
        export type EventSensorSerieSource = {
            sourceType: "event";
            eventField: Components.Schemas.EventField;
            eventType: Components.Schemas.EventType;
            eventHasARange?: boolean;
        };
        export type FirstEmission = {
            [pattern: string]: Components.Schemas.Date;
        };
        export type SensorInferredType = {
            [pattern: string]: Components.Schemas.SensorDataType;
        };
        export type QualitativeSensorSerie = {
            type: "qualitative";
            categories?: {
                [pattern: string]: string;
            };
        };
        export type QuantitativeSensorSerie = {
            type: "quantitative";
        };
        export type RealtimeAlertLabelTarget = Enums.TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors;
        export type RealtimeAlertLabelsOperator = Enums.WetherAllLabelsShouldMatchOrAny;
        export type RealtimeAlertTriggerBranch = {
            type?: "branch";
            operator: Enums.RealtimeAlertTriggerBranchOperator;
            leftNode: Components.Schemas.RealtimeAlertTriggerRule;
            rightNode: Components.Schemas.RealtimeAlertTriggerRule;
        };
        export type RealtimeAlertTriggerLabelTest = {
            type: "label";
            operator: Components.Schemas.RealtimeAlertLabelsOperator;
            target: Components.Schemas.RealtimeAlertLabelTarget;
            name: Enums.NameOfTheLabelToTest;
            values: string[];
        };
        export type RealtimeAlertTriggerRule = Components.Schemas.RealtimeAlertTriggerLabelTest | Components.Schemas.RealtimeAlertTriggerValuedLabelTest | Components.Schemas.RealtimeAlertTriggerValueTest | Components.Schemas.RealtimeAlertTriggerBranch;
        export type RealtimeAlertTrigger = {
            type: "realtime";
            occurences: number;
            duration?: number;
            resetDelay: number;
            rule: Components.Schemas.RealtimeAlertTriggerRule;
        };
        export type RealtimeAlertTriggerValueTest = {
            type: "value";
            operator: Enums.RealtimeAlertTriggerValueTestOperator;
            value: number | Components.Schemas.SensorVariable;
        };
        export type RealtimeAlertTriggerValuedLabelTest = {
            type: "valued_label";
            operator: Components.Schemas.RealtimeAlertLabelsOperator;
            target: Components.Schemas.RealtimeAlertLabelTarget;
            values: {
                [pattern: string]: string;
            };
        };
        export type SensorData = {
            name: string;
            variables: Components.Schemas.SensorVariables;
            overridenType?: {
                [pattern: string]: Components.Schemas.SensorDataType;
            };
            series: [
                Components.Schemas.SensorSerie,
                ...Components.Schemas.SensorSerie[]
            ];
            alertsTriggers: {
                [pattern: string]: [
                    Components.Schemas.AlertTrigger,
                    ...Components.Schemas.AlertTrigger[]
                ];
            };
        };
        export type SensorDataType = Enums.SensorType;
        export type SensorItem = {
            item: Components.Schemas.SensorUUID;
            sensors: Components.Schemas.SensorModelHash;
            assets?: Components.Schemas.AssetModelHash;
        };
        export type SensorQuery = {
            aggregationType: Enums.AggregationType;
            template: string;
            pace: number;
            timeFrame: {
                unit: Enums.Unit;
                value: number;
            };
            timeZone?: Components.Schemas.TimeZone;
        };
        export type SensorModel = Components.Schemas.SynchronizableItem & {
            id?: Components.Schemas.SensorUUID;
            factoryId?: Components.Schemas.FactoryUUID;
            organisationId?: Components.Schemas.OrganisationUUID;
            assetId?: Components.Schemas.AssetUUID;
            data: Components.Schemas.SensorData;
            stats?: Components.Schemas.SensorStats;
            inferredType?: Components.Schemas.SensorInferredType;
            firstEmission?: Components.Schemas.FirstEmission;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            queries?: {
                [pattern: string]: Components.Schemas.SensorQuery;
            };
        };
        export type SensorSerie = {
            name: Components.Schemas.ValueName;
            unit: Components.Schemas.SensorSerieUnit;
            description?: string;
            displayName?: string;
        } & (Components.Schemas.QuantitativeSensorSerie | Components.Schemas.QualitativeSensorSerie) & (Components.Schemas.DataSensorSerieSource | Components.Schemas.EventSensorSerieSource);
        export type SensorSerieUnit = string;
        export type SensorStats = {
            [pattern: string]: {
                ever: {
                    cardinality?: number;
                    min: number;
                    max: number;
                    percentiles?: {
                        "1.0"?: number;
                        "5.0"?: number;
                        "25.0"?: number;
                        "50.0"?: number;
                        "75.0"?: number;
                        "95.0"?: number;
                        "99.0"?: number;
                    };
                };
                month?: Components.Schemas.SensorTimeBucketStats;
                day?: Components.Schemas.SensorTimeBucketStats;
                hour?: Components.Schemas.SensorTimeBucketStats;
            };
        };
        export type SensorTimeBucketStats = {
            cardinality: number;
            volumetry: number;
            maxMin: number;
            minMax: number;
        };
        export type SensorUUID = string;
        export type SensorVariable = string;
        export type SensorVariables = {
            [pattern: string]: (number | string);
        };
        export type SensorModelHash = {
            [pattern: string]: Components.Schemas.SensorModel;
        };
        export type SensorsItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.SensorsUUIDS;
            sensors: Components.Schemas.SensorModelHash;
            assets?: Components.Schemas.AssetModelHash;
        };
        export type SensorsUUIDS = Components.Schemas.SensorUUID[];
        export type SilenceAlertTrigger = {
            type: "silence";
            duration: number;
        };
        export type SensorsSortByValue = Enums.SensorsSortByValue;
        export type Aggregation = Enums.Aggregation;
        export type Aggregations = Components.Schemas.Aggregation[];
        export type Granularity = Enums.Granularity;
        export type Measures = {
            date: Components.Schemas.Date;
            values: number[];
            qualities?: number[];
            labels?: string[][];
            labelsCount?: number[][];
        }[];
        export type NonEmptySensorsUUIDS = [
            Components.Schemas.SensorUUID,
            ...Components.Schemas.SensorUUID[]
        ];
        export type EventField = Enums.EventField;
        export type EventFields = Components.Schemas.EventField[];
        export type SensorsMLData = {
            name?: string;
            labels?: string[];
            timestamp?: string[];
            data?: (string | number | string[])[][];
        }[];
        export type ValueName = string;
        export type ValuesNames = Components.Schemas.ValueName[];
        export type SensorsEventData = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type EventRangeData = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.RangeMeasures;
        };
        export type RangeMeasures = {
            startDate: Components.Schemas.Date;
            endDate: Components.Schemas.Date;
            value: number;
            quality?: number;
            labels?: string[];
        }[][];
        export type Priorities = [
            Components.Schemas.Priority,
            ...Components.Schemas.Priority[]
        ];
        export type TasksSortByValue = Enums.TasksSortByValue;
        export type TaskModel = {
            status: Components.Schemas.TaskStatus;
            priority?: Components.Schemas.Priority;
            assetsIds?: Components.Schemas.AssetsUUIDS;
            creation: Components.Schemas.Date;
            lastModification: Components.Schemas.Date;
        } & ({
            id: Components.Schemas.AlertUUID;
            type: "alert";
        } | {
            id: Components.Schemas.InterventionUUID;
            type: "intervention";
        });
        export type TaskStatus = Enums.TaskStatus;
        export type TasksStatuses = [
            Components.Schemas.TaskStatus,
            ...Components.Schemas.TaskStatus[]
        ];
        export type TaskType = Enums.TaskType;
        export type TasksTypes = [
            Components.Schemas.TaskType,
            ...Components.Schemas.TaskType[]
        ];
        export type TasksModel = Components.Schemas.TaskModel[];
        export type SearchFilterType = Enums.SearchFilterType;
        export type SearchType = Enums.SearchType;
        export type MembershipCancelledNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.MembershipCancelledEventType;
            eventData: Components.Schemas.MembershipCancelledEventData;
        };
        export type AlertDeletedEventType = "ALERT_DELETED";
        export type AlertEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            alertId: Components.Schemas.AlertUUID;
            userId?: Components.Schemas.UserUUID;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
            eventsIds?: Components.Schemas.EventsUUIDS;
        };
        export type AlertNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AlertUpsertedEventType | Components.Schemas.AlertDeletedEventType;
            eventData: Components.Schemas.AlertEventData;
        };
        export type AlertUpsertedEventType = "ALERT_UPSERTED";
        export type AlgorithmModelEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            projectId: Components.Schemas.ProjectUUID;
            projectCode: Components.Schemas.ProjectCode;
            factoryId?: Components.Schemas.FactoryUUID;
        };
        export type AlgorithmModelUpdatedEventType = "ALGORITHM_MODEL_UPDATED";
        export type AlgorithmModelUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AlgorithmModelUpdatedEventType;
            eventData: Components.Schemas.AlgorithmModelEventData;
        };
        export type ApplicationDeletedEventType = "APPLICATION_DELETED";
        export type ApplicationEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            applicationId: Components.Schemas.ApplicationUUID;
        };
        export type ApplicationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ApplicationUpsertedEventType | Components.Schemas.ApplicationDeletedEventType;
            eventData: Components.Schemas.ApplicationEventData;
        };
        export type ApplicationUpsertedEventType = "APPLICATION_UPSERTED";
        export type AssetDeletedEventType = "ASSET_DELETED";
        export type AssetEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
            assetId: Components.Schemas.AssetUUID;
        };
        export type AssetNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.AssetUpsertedEventType | Components.Schemas.AssetDeletedEventType;
            eventData: Components.Schemas.AssetEventData;
        };
        export type AssetUpsertedEventType = "ASSET_UPSERTED";
        export type CommonNotification = {
            id: Components.Schemas.NotificationUUID;
            date: Components.Schemas.Date;
            read: boolean;
            data: {
                organisationId?: Components.Schemas.OrganisationUUID;
                factoryId?: Components.Schemas.FactoryUUID;
                ancestorsIds?: Components.Schemas.AssetsUUIDS;
                assetsIds?: Components.Schemas.AssetsUUIDS;
                alertsIds?: Components.Schemas.AlertsUUIDS;
                sensorsIds?: Components.Schemas.SensorsUUIDS;
            };
        };
        export type EmailStatusUpdatedEventData = {
            userId: Components.Schemas.UserUUID;
            email: string;
            name: string;
            status: Components.Schemas.EmailStatus;
        };
        export type EmailStatusUpdatedEventType = "EMAIL_STATUS_UPDATED";
        export type EmailStatusUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.EmailStatusUpdatedEventType;
            eventData: Components.Schemas.EmailStatusUpdatedEventData;
        };
        export type FactoryDeletedEventType = "FACTORY_DELETED";
        export type FactoryEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type FactoryNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.FactoryUpsertedEventType | Components.Schemas.FactoryDeletedEventType;
            eventData: Components.Schemas.FactoryEventData;
        };
        export type FactoryUpsertedEventType = "FACTORY_UPSERTED";
        export type InterventionDeletedEventType = "INTERVENTION_DELETED";
        export type InterventionEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            userId?: Components.Schemas.UserUUID;
            interventionId: Components.Schemas.InterventionUUID;
            alertsEventsIds?: Components.Schemas.EventsUUIDS;
            userFeedback?: Components.Schemas.UserFeedback;
            imagesIds?: Components.Schemas.ImagesUUIDS;
            attachmentsIds?: Components.Schemas.AttachmentsUUIDS;
        };
        export type InterventionNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.InterventionUpsertedEventType | Components.Schemas.InterventionDeletedEventType;
            eventData: Components.Schemas.InterventionEventData;
        };
        export type InterventionUpsertedEventType = "INTERVENTION_UPSERTED";
        export type MembershipCancelledEventData = {
            userId: Components.Schemas.UserUUID;
            organisationId: Components.Schemas.OrganisationUUID;
        };
        export type MembershipCancelledEventType = "MEMBERSHIP_CANCELLED";
        export type MembershipCancelledEventSchema = Components.Schemas.CommonNotification & {
            type: Components.Schemas.MembershipCancelledEventType;
            eventData: Components.Schemas.MembershipCancelledEventData;
        };
        export type NotificationModel = Components.Schemas.UserCreatedNotification | Components.Schemas.UserUpdatedNotification | Components.Schemas.AlertNotification | Components.Schemas.AssetNotification | Components.Schemas.ApplicationNotification | Components.Schemas.InterventionNotification | Components.Schemas.ReportNotification | Components.Schemas.SensorNotification | Components.Schemas.FactoryNotification | Components.Schemas.ProjectNotification | Components.Schemas.AlgorithmModelUpdatedNotification | Components.Schemas.OrganisationNotification | Components.Schemas.OrganisationUserUpdatedNotification | Components.Schemas.OrganisationPreferencesUpsertedNotification | Components.Schemas.SensorSeriesDeletedNotification | Components.Schemas.PasswordChangeRequestedNotification | Components.Schemas.EmailStatusUpdatedNotification | Components.Schemas.UserFeedbackUpdatedNotification | Components.Schemas.UserInvitedInOrganisationNotification | Components.Schemas.MembershipCancelledEventSchema | Components.Schemas.VirtualSensorComputeRequestedNotification;
        export type NotificationType = Enums.NotificationType;
        export type NotificationTypes = Components.Schemas.NotificationType[];
        export type NotificationModelHash = {
            [pattern: string]: Components.Schemas.NotificationModel;
        };
        export type NotificationsItems = {
            total: Components.Schemas.Total;
            items: Components.Schemas.NotificationsUUIDS;
            notifications: Components.Schemas.NotificationModelHash;
        };
        export type OrganisationDeletedEventType = "ORGANISATION_DELETED";
        export type OrganisationEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type OrganisationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationUpsertedEventType | Components.Schemas.OrganisationDeletedEventType;
            eventData: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationPreferencesUpsertedEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            preferences: Components.Schemas.PartialPreferencesModel;
        };
        export type OrganisationPreferencesUpsertedEventType = "ORGANISATION_PREFERENCES_UPSERTED";
        export type OrganisationPreferencesUpsertedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationPreferencesUpsertedEventType;
            eventData: Components.Schemas.OrganisationPreferencesUpsertedEventData;
        };
        export type OrganisationUpsertedEventType = "ORGANISATION_UPSERTED";
        export type OrganisationUserUpdatedEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            userName: string;
            accepted: boolean;
        };
        export type OrganisationUserUpdatedEventType = "ORGANISATION_USER_UPDATED";
        export type OrganisationUserUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.OrganisationUserUpdatedEventType;
            eventData: Components.Schemas.OrganisationUserUpdatedEventData;
        };
        export type PasswordChangeRequestedEventData = {
            token: string;
            email: string;
            userName: string;
            locale: Components.Schemas.Locale;
        };
        export type PasswordChangeRequestedEventType = "PASSWORD_CHANGE_REQUESTED";
        export type PasswordChangeRequestedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.PasswordChangeRequestedEventType;
            eventData: Components.Schemas.PasswordChangeRequestedEventData;
        };
        export type ProjectDeletedEventType = "PROJECT_DELETED";
        export type ProjectEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            projectId: Components.Schemas.ProjectUUID;
            projectCode: Components.Schemas.ProjectCode;
            topicsToAdd: Components.Schemas.DataTopic[];
            topicsToRemove: Components.Schemas.DataTopic[];
        };
        export type ProjectNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ProjectUpsertedEventType | Components.Schemas.ProjectDeletedEventType;
            eventData: Components.Schemas.ProjectEventData;
        };
        export type ProjectUpsertedEventType = "PROJECT_UPSERTED";
        export type ReportDeletedEventType = "REPORT_DELETED";
        export type ReportEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            reportId: Components.Schemas.ReportUUID;
        };
        export type ReportNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.ReportUpsertedEventType | Components.Schemas.ReportDeletedEventType;
            eventData: Components.Schemas.ReportEventData;
        };
        export type ReportUpsertedEventType = "REPORT_UPSERTED";
        export type SensorDeletedEventType = "SENSOR_DELETED";
        export type SensorEventData = {
            organisationId: Components.Schemas.OrganisationUUID;
            factoryId: Components.Schemas.FactoryUUID;
            sensorId: Components.Schemas.SensorUUID;
            userId?: Components.Schemas.UserUUID;
        };
        export type SensorNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.SensorUpsertedEventType | Components.Schemas.SensorDeletedEventType;
            eventData: Components.Schemas.SensorEventData;
        };
        export type SensorSeriesDeletedEventData = {
            sensorId: Components.Schemas.SensorUUID;
            valueName: Components.Schemas.ValueName;
        };
        export type SensorSeriesDeletedEventType = "SENSOR_SERIES_DELETED";
        export type SensorSeriesDeletedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.SensorSeriesDeletedEventType;
            eventData: Components.Schemas.SensorSeriesDeletedEventData;
        };
        export type SensorUpsertedEventType = "SENSOR_UPSERTED";
        export type UserCreatedEventData = {
            user: Components.Schemas.UserModel;
            verifyToken: Components.Schemas.VerifyToken;
        };
        export type UserCreatedEventType = "USER_CREATED";
        export type UserCreatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserCreatedEventType;
            eventData: Components.Schemas.UserCreatedEventData;
        };
        export type UserFeedbackUpdatedEventData = {
            alertId?: Components.Schemas.AlertUUID;
            eventsIds: Components.Schemas.EventsUUIDS;
            organisationId: Components.Schemas.OrganisationUUID;
            userId: Components.Schemas.UserUUID;
            userFeedBack: Components.Schemas.UserFeedback;
            beforeDate: Components.Schemas.Date;
            afterDate: Components.Schemas.Date;
        };
        export type UserFeedbackUpdatedEventType = "USER_FEEDBACK_UPDATED";
        export type UserFeedbackUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserFeedbackUpdatedEventType;
            eventData: Components.Schemas.UserFeedbackUpdatedEventData;
        };
        export type UserInvitedInOrganisationEventData = {
            inviterId: Components.Schemas.UserUUID;
            userId: Components.Schemas.UserUUID;
            organisationId: Components.Schemas.OrganisationUUID;
            userName: string;
            userEmail: string;
            organisationName: string;
            organisationRoles: Components.Schemas.UserFactoryRoles | Components.Schemas.UserOrganisationRoles;
            token: string;
        };
        export type UserInvitedInOrganisationEventType = "USER_INVITED_IN_ORGANISATION";
        export type UserInvitedInOrganisationNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserInvitedInOrganisationEventType;
            eventData: Components.Schemas.UserInvitedInOrganisationEventData;
        };
        export type UserUpdatedEventData = {
            user: Components.Schemas.UserModel;
            verifyToken?: Components.Schemas.VerifyToken;
        };
        export type UserUpdatedEventType = "USER_UPDATED";
        export type UserUpdatedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.UserUpdatedEventType;
            eventData: Components.Schemas.UserUpdatedEventData;
        };
        export type VirtualSensorComputeRequestedEventData = {
            sensorId: Components.Schemas.SensorUUID;
            projectCode: Components.Schemas.ProjectCode;
            sensorValueName: Components.Schemas.ValueName;
        };
        export type VirtualSensorComputeRequestedEventType = "VIRTUAL_SENSOR_COMPUTE_REQUESTED";
        export type VirtualSensorComputeRequestedNotification = Components.Schemas.CommonNotification & {
            type: Components.Schemas.VirtualSensorComputeRequestedEventType;
            eventData: Components.Schemas.VirtualSensorComputeRequestedEventData;
        };
        export type AllPreferencesModel = {
            default: Components.Schemas.DefaultPreferencesModel;
            organisation: Components.Schemas.PartialPreferencesModel;
            factory?: Components.Schemas.PartialPreferencesModel;
            user: Components.Schemas.PartialPreferencesModel;
        };
        export type DefaultPreferencesModel = {
            displayParentName: boolean;
            sensorDisplayExternalId: boolean;
            sensorDisplaySerie: Components.Schemas.SensorDisplaySerie;
            useFactoryTimeZone: boolean;
            showGraphLabels: boolean;
            showGraphConfigurations: boolean;
            showGraphCycles: boolean;
            showGraphPhases: boolean;
        };
        export type PartialPreferencesModel = {
            displayParentName?: boolean;
            sensorDisplayExternalId?: boolean;
            sensorDisplaySerie?: Components.Schemas.SensorDisplaySerie;
            useFactoryTimeZone?: boolean;
            showGraphLabels?: boolean;
            showGraphConfigurations?: boolean;
            showGraphCycles?: boolean;
            showGraphPhases?: boolean;
        };
        export type SensorDisplaySerie = Enums.SensorDisplaySerie;
        export type Date = string;
        export type EmailStatus = Enums.EmailStatus;
        export type FactoryScopedUserOrganisationMembership = {
            roles: Components.Schemas.UserOrganisationRoles;
            factories: {
                id: Components.Schemas.FactoryUUID;
                roles: Components.Schemas.UserFactoryRoles;
                status?: Components.Schemas.UserMembershipStatus;
                lastInvitationDate?: Components.Schemas.Date;
            }[];
        };
        export type GlobalUserOrganisationMembership = {
            roles: Components.Schemas.UserFactoryRoles;
        };
        export type Locale = string;
        export type Limit = 10 | 50 | 100 | 500 | 1000;
        export type Start = number;
        export type Role = Enums.Role;
        export type UsersSortByValue = Enums.UsersSortByValue;
        export type TimeZone = string;
        export type Total = number;
        export type UserData = {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type UserFactoryRoles = [
            "manager" | "technician",
            ...("manager" | "technician")[]
        ];
        export type UserItem = {
            item: Components.Schemas.UserUUID;
            users: Components.Schemas.UserModelHash;
        };
        export type UserMembership = (Components.Schemas.FactoryScopedUserOrganisationMembership | Components.Schemas.GlobalUserOrganisationMembership) & {
            id: Components.Schemas.OrganisationUUID;
            status: Components.Schemas.UserMembershipStatus;
            lastInvitationDate: Components.Schemas.Date;
            canReinvite?: boolean;
        };
        export type UserMembershipStatus = Enums.UserMembershipStatus;
        export type UserOrganisationRoles = [
            "member",
            ..."member"[]
        ];
        export type UserModel = {
            id?: Components.Schemas.UserUUID;
            roles?: Components.Schemas.Role[];
            password?: string;
            memberships?: Components.Schemas.UserMembership[];
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            emailStatus?: Components.Schemas.EmailStatus;
        };
        export type UserUUID = string;
        export type UserModelHash = {
            [pattern: string]: Components.Schemas.UserModel;
        };
        export type UsersItems = {
            total?: Components.Schemas.Total;
            items: Components.Schemas.UsersUUIDS;
            users: Components.Schemas.UserModelHash;
        };
        export type UsersUUIDS = Components.Schemas.UserUUID[];
        export type UUID = string;
        export type UUIDS = Components.Schemas.UUID[];
        export type AlgorithmRun = {
            projectCode: Components.Schemas.ProjectCode;
            command: string;
            algorithm?: string;
        };
        export type IngestionStage = Enums.IngestionStage;
        export type DspadDataAnalysisParameters = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId: string;
            startDate: Components.Schemas.Date;
            endDate: Components.Schemas.Date;
        };
        export type DspadDataCheckParameters = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId: string;
        };
        export type DspadStableRegistersDataAnalysisParameters = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId: string;
            direction: Components.Schemas.RegisterDirection;
            startDate: Components.Schemas.Date;
            endDate: Components.Schemas.Date;
        };
        export type DspadStableRegistersDataCheckParameters = {
            projectCode: Components.Schemas.ProjectCode;
            mlConfigId: string;
            direction: Components.Schemas.RegisterDirection;
            startDate: Components.Schemas.Date;
            endDate: Components.Schemas.Date;
        };
        export type RegisterDirection = Enums.RegisterDirection;
        export type DspadDetectionParameters = {
            name: string;
            description?: string;
            projectCode: Components.Schemas.ProjectCode;
            modelPath?: string;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
            mlSettings: {
                anomaly_type: string;
                context: {
                    message: string;
                };
            };
        };
        export type Timestamp = number;
        export type PasswordChangeBody = {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        export type AuthorizationCodeRequestBody = {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        export type ClientCredentialsRequestBody = {
            grant_type: "client_credentials";
            scope?: string;
        };
        export type PasswordRequestBody = {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        export type RefreshTokenRequestBody = {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type VerifyTokenRequestBody = {
            grant_type: "verify_token";
            verify_token: Components.Schemas.VerifyToken;
        };
        export type VerifyToken = string;
        export type DenormalizedInputData = {
            date: string;
            sensorId: string;
            valueName?: Components.Schemas.ValueName;
            value: number;
            precision?: Components.Schemas.ValuePrecision;
            labels?: Components.Schemas.Tags;
        }[];
        export type GroupedInputData = {
            date: string;
            values: {
                sensorId: string;
                valueName?: Components.Schemas.ValueName;
                value: number;
                precision?: Components.Schemas.ValuePrecision;
                labels?: Components.Schemas.Tags;
            }[];
        };
        export type InputData = Components.Schemas.GroupedInputData | Components.Schemas.DenormalizedInputData;
        export type LabelValue = string;
        export type Tags = Components.Schemas.LabelValue[];
        export type ValuePrecision = number;
        export type SendGridEventType = Enums.SendGridEventType;
        export type UserOrganisationInvitation = {
            email: string;
            givenName: string;
            familyName: string;
            membership: Components.Schemas.FactoryScopedUserOrganisationMembership | Components.Schemas.GlobalUserOrganisationMembership;
        };
        export type BinaryModel = string;
        export type AnomalyType = Enums.AnomalyType;
        export type MLContext = {
            [pattern: string]: unknown;
        };
        export type MLLearnResult = {
            type: "learn";
            learn: boolean;
            n_sample: number;
        };
        export type MLPredictionResult = {
            type: "forecast_predict";
            timestamp: Components.Schemas.Date;
            lower: number;
            mean: number;
            upper: number;
        };
        export type MlResultAttachments = {
            name: string;
        }[];
        export type MlResultImages = {
            name: string;
        }[];
        export type MLResult = {
            type: Enums.Type;
            images?: Components.Schemas.MlResultImages;
            attachments?: Components.Schemas.MlResultAttachments;
            debug?: {
                code: string;
                stack: string;
            };
            data?: Components.Schemas.SensorsValues;
            anomalies?: {
                type: Components.Schemas.AnomalyType;
                startDate?: Components.Schemas.Date;
                endDate?: Components.Schemas.Date;
            }[];
            results?: (Components.Schemas.MLPredictionResult | Components.Schemas.MLLearnResult)[];
            context: Components.Schemas.DataLabels & {
                runDate: Components.Schemas.Date;
                runId: Components.Schemas.RunUUID;
                eventType: Components.Schemas.EventType;
                runName?: string;
                startDate?: Components.Schemas.Date;
                endDate?: Components.Schemas.Date;
            };
            mlContext?: Components.Schemas.MLContext;
            [pattern: string]: unknown;
        };
        export type SensorsValues = {
            sensorId: string;
            valueName?: string;
            values?: [
                string,
                number,
                number,
                string[]
            ][];
        }[];
        export type AlertDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlertDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlertEventData;
        };
        export type AlertUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlertUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlertEventData;
        };
        export type AlgorithmModelUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AlgorithmModelUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AlgorithmModelEventData;
        };
        export type ApplicationDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ApplicationDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ApplicationEventData;
        };
        export type ApplicationUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ApplicationUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ApplicationEventData;
        };
        export type AssetDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AssetDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AssetEventData;
        };
        export type AssetUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.AssetUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.AssetEventData;
        };
        export type EmailStatusUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.EmailStatusUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.EmailStatusUpdatedEventData;
        };
        export type FactoryDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.FactoryDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.FactoryEventData;
        };
        export type FactoryUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.FactoryUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.FactoryEventData;
        };
        export type InterventionDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.InterventionDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.InterventionEventData;
        };
        export type InterventionUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.InterventionUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.InterventionEventData;
        };
        export type MembershipCancelledEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.MembershipCancelledEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.MembershipCancelledEventData;
        };
        export type NotificationEvent = Components.Schemas.AlertDeletedEvent | Components.Schemas.AlertUpsertedEvent | Components.Schemas.AlgorithmModelUpdatedEvent | Components.Schemas.ApplicationDeletedEvent | Components.Schemas.ApplicationUpsertedEvent | Components.Schemas.AssetDeletedEvent | Components.Schemas.AssetUpsertedEvent | Components.Schemas.EmailStatusUpdatedEvent | Components.Schemas.FactoryDeletedEvent | Components.Schemas.FactoryUpsertedEvent | Components.Schemas.InterventionDeletedEvent | Components.Schemas.InterventionUpsertedEvent | Components.Schemas.MembershipCancelledEvent | Components.Schemas.OrganisationDeletedEvent | Components.Schemas.OrganisationPreferencesUpsertedEvent | Components.Schemas.OrganisationUpsertedEvent | Components.Schemas.OrganisationUserUpdatedEvent | Components.Schemas.PasswordChangeRequestedEvent | Components.Schemas.ProjectDeletedEvent | Components.Schemas.ProjectUpsertedEvent | Components.Schemas.ReportDeletedEvent | Components.Schemas.ReportUpsertedEvent | Components.Schemas.SensorDeletedEvent | Components.Schemas.SensorSeriesDeletedEvent | Components.Schemas.SensorUpsertedEvent | Components.Schemas.UserCreatedEvent | Components.Schemas.UserFeedbackUpdatedEvent | Components.Schemas.UserInvitedInOrganisationEvent | Components.Schemas.UserUpdatedEvent | Components.Schemas.VirtualSensorComputeRequestedEvent;
        export type NotificationUUID = string;
        export type NotificationsUUIDS = Components.Schemas.NotificationUUID[];
        export type OrganisationDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationPreferencesUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationPreferencesUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationPreferencesUpsertedEventData;
        };
        export type OrganisationUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationEventData;
        };
        export type OrganisationUserUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.OrganisationUserUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.OrganisationUserUpdatedEventData;
        };
        export type PasswordChangeRequestedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.PasswordChangeRequestedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.PasswordChangeRequestedEventData;
        };
        export type ProjectDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ProjectDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ProjectEventData;
        };
        export type ProjectUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ProjectUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ProjectEventData;
        };
        export type ReportDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ReportDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ReportEventData;
        };
        export type ReportUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.ReportUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.ReportEventData;
        };
        export type SensorDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorEventData;
        };
        export type SensorSeriesDeletedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorSeriesDeletedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorSeriesDeletedEventData;
        };
        export type SensorUpsertedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.SensorUpsertedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.SensorEventData;
        };
        export type UserCreatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserCreatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserCreatedEventData;
        };
        export type UserFeedbackUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserFeedbackUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserFeedbackUpdatedEventData;
        };
        export type UserInvitedInOrganisationEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserInvitedInOrganisationEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserInvitedInOrganisationEventData;
        };
        export type UserUpdatedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.UserUpdatedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.UserUpdatedEventData;
        };
        export type VirtualSensorComputeRequestedEvent = {
            id: Components.Schemas.NotificationUUID;
            type: Components.Schemas.VirtualSensorComputeRequestedEventType;
            timestamp: Components.Schemas.Timestamp;
            data: Components.Schemas.VirtualSensorComputeRequestedEventData;
        };
        export type PreferenceLevel = Enums.PreferenceLevel;
        export type RequestBodiesAvevaBody0 = {
            projectCode: Components.Schemas.ProjectCode;
        };
        export type RequestBodiesPowerTrackSyncConfigBody0 = {
            projectCode: Components.Schemas.ProjectCode;
        };
        export type RequestBodiesOpenSearchSnapshotBody0 = {
            operation: Enums.Operation;
        };
        export type RequestBodiesPostAuthLoginBody0 = {
            username: string;
            password: string;
            scope?: string;
            remember?: boolean;
        };
        export type RequestBodiesPostAuthPasswordChangeBody0 = {
            token: string;
            oldPassword?: string;
            newPassword: string;
        };
        export type RequestBodiesPostAuthRefreshBody0 = {
            scope?: string;
            remember?: boolean;
        };
        export type RequestBodiesPostAuthVerifyBody0 = {
            verifyToken: string;
        };
        export type RequestBodiesPostPasswordChangeRequestBody0 = {
            email: string;
        };
        export type RequestBodiesPostUserInvitationResponseBody0 = {
            accepted: boolean;
            organisationId: Components.Schemas.OrganisationUUID;
        };
        export type RequestBodiesPostUserOrganisationInvitationFollowupBody0 = {
            userId: Components.Schemas.UserUUID;
        };
        export type RequestBodiesPutUserOrganisationAlertFeedbackBody0 = {
            userFeedback: Components.Schemas.UserFeedback;
        };
        export type ResponsesTasksCollectionBody0 = {
            total: number;
            stats: {
                alert?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
                intervention?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
                _all?: {
                    to_assign?: number;
                    to_do?: number;
                    in_progress?: number;
                    done?: number;
                };
            };
            items: Components.Schemas.TasksModel;
        };
        export type ResponsesgetOpenAPI200Body0 = {};
        export type ResponsesgetOrganisationFactoryDataLabels200Body0 = {
            key?: string;
            doc_count?: number;
        }[];
        export type ResponsesgetOrganisationSensorsAggregateData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsAggregateEventData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsAggregateEventRangeData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            aggregations: Components.Schemas.Aggregations;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.Measures;
        };
        export type ResponsesgetOrganisationSensorsData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            measures: Components.Schemas.Measures;
            valuesNames: Components.Schemas.NonEmptyValuesNames;
        };
        export type ResponsesgetOrganisationSensorsEventRangeData200Body0 = {
            from: Components.Schemas.Date;
            to: Components.Schemas.Date;
            sensorsIds: Components.Schemas.NonEmptySensorsUUIDS;
            eventFields: Components.Schemas.EventFields;
            configuration?: Components.Schemas.AssetConfiguration;
            phase?: Components.Schemas.ManufacturingPhase;
            measures: Components.Schemas.RangeMeasures;
        };
        export type ResponsesgetOrganisationUniversalSearch200Body0 = {
            results?: {
                id: Components.Schemas.UserUUID | Components.Schemas.FactoryUUID | Components.Schemas.ProjectUUID | Components.Schemas.AssetUUID | Components.Schemas.ApplicationUUID | Components.Schemas.InterventionUUID | Components.Schemas.AlertUUID | Components.Schemas.ReportUUID | Components.Schemas.SensorUUID | Components.Schemas.OrganisationUUID;
                type: Components.Schemas.SearchType;
                snippet?: string;
            }[][];
            suggestions?: {}[];
            start?: number;
            total?: number;
        };
        export type ResponsesgetUniversalSearch200Body0 = {
            results?: {
                id: Components.Schemas.UserUUID | Components.Schemas.FactoryUUID | Components.Schemas.ProjectUUID | Components.Schemas.AssetUUID | Components.Schemas.ApplicationUUID | Components.Schemas.InterventionUUID | Components.Schemas.AlertUUID | Components.Schemas.ReportUUID | Components.Schemas.SensorUUID | Components.Schemas.OrganisationUUID;
                type: Components.Schemas.SearchType;
                snippet?: string;
            }[][];
            suggestions?: {}[];
            start?: number;
            total?: number;
        };
        export type ResponsespostAuthLogin200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: string;
            token_type?: string;
        };
        export type ResponsespostAuthPasswordChange200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: number;
            token_type?: string;
        };
        export type ResponsespostAuthRefresh200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: string;
            token_type?: string;
        };
        export type ResponsespostAuthVerify200Body0 = {
            access_token?: string;
            expiration_date?: string;
            expires_in?: number;
            token_type?: string;
        };
        export type ResponsespostOAuth2Token200Body0 = {
            access_token: string;
            token_type: Enums.TokenType;
            expires_in?: number;
            refresh_token?: string;
        };
        export type ResponsespostOAuth2Token400Body0 = {
            error: Enums.Error;
            error_description?: string;
            error_uri?: string;
        };
        export type ResponsespostUserOrganisationInvitation201Body0 = {
            user: Components.Schemas.UserItem;
            token: string;
        };
        export type ResponsesgetPing200Body0 = {
            pong?: "pong";
        };
    }
}
export namespace AnotherAPI {
    export import DeleteAlert = Components.Operations.DeleteAlert;
    export import DeleteApplication = Components.Operations.DeleteApplication;
    export import DeleteIntervention = Components.Operations.DeleteIntervention;
    export import DeleteProject = Components.Operations.DeleteProject;
    export import DeleteUserOrganisationAlert = Components.Operations.DeleteUserOrganisationAlert;
    export import GetUserOrganisationAlert = Components.Operations.GetUserOrganisationAlert;
    export import PutUserOrganisationAlert = Components.Operations.PutUserOrganisationAlert;
    export import DeleteUserOrganisationAlertAttachment = Components.Operations.DeleteUserOrganisationAlertAttachment;
    export import PutUserOrganisationAlertAttachment = Components.Operations.PutUserOrganisationAlertAttachment;
    export import DeleteUserOrganisationAlertImage = Components.Operations.DeleteUserOrganisationAlertImage;
    export import PutUserOrganisationAlertImage = Components.Operations.PutUserOrganisationAlertImage;
    export import DeleteUserOrganisationApplication = Components.Operations.DeleteUserOrganisationApplication;
    export import PutUserOrganisationApplication = Components.Operations.PutUserOrganisationApplication;
    export import DeleteUserOrganisationIntervention = Components.Operations.DeleteUserOrganisationIntervention;
    export import DeleteUserOrganisationInterventionImage = Components.Operations.DeleteUserOrganisationInterventionImage;
    export import PutUserOrganisationInterventionImage = Components.Operations.PutUserOrganisationInterventionImage;
    export import DeleteUserOrganisationMembership = Components.Operations.DeleteUserOrganisationMembership;
    export import DeleteUserOrganisationProject = Components.Operations.DeleteUserOrganisationProject;
    export import PutUserOrganisationProject = Components.Operations.PutUserOrganisationProject;
    export import DeleteUserOrganisationSensorSeries = Components.Operations.DeleteUserOrganisationSensorSeries;
    export import GetAlertsStats = Components.Operations.GetAlertsStats;
    export import GetAuthProfile = Components.Operations.GetAuthProfile;
    export import GetMySelf = Components.Operations.GetMySelf;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetOrganisationFactory = Components.Operations.GetOrganisationFactory;
    export import GetOrganisationFactoryAlertsStats = Components.Operations.GetOrganisationFactoryAlertsStats;
    export import GetOrganisationFactoryAsset = Components.Operations.GetOrganisationFactoryAsset;
    export import GetOrganisationFactoryAssets = Components.Operations.GetOrganisationFactoryAssets;
    export import GetOrganisationFactoryDataLabels = Components.Operations.GetOrganisationFactoryDataLabels;
    export import GetOrganisationFactoryEvents = Components.Operations.GetOrganisationFactoryEvents;
    export import GetOrganisationFactoryIntervention = Components.Operations.GetOrganisationFactoryIntervention;
    export import GetOrganisationFactoryInterventions = Components.Operations.GetOrganisationFactoryInterventions;
    export import GetOrganisationFactoryReports = Components.Operations.GetOrganisationFactoryReports;
    export import GetOrganisationFactorySensor = Components.Operations.GetOrganisationFactorySensor;
    export import GetOrganisationFactorySensors = Components.Operations.GetOrganisationFactorySensors;
    export import GetOrganisationFactoryTrends = Components.Operations.GetOrganisationFactoryTrends;
    export import GetOrganisationProject = Components.Operations.GetOrganisationProject;
    export import GetOrganisationProjects = Components.Operations.GetOrganisationProjects;
    export import GetOrganisationSensorsAggregateData = Components.Operations.GetOrganisationSensorsAggregateData;
    export import GetOrganisationSensorsAggregateEventData = Components.Operations.GetOrganisationSensorsAggregateEventData;
    export import GetOrganisationSensorsAggregateEventRangeData = Components.Operations.GetOrganisationSensorsAggregateEventRangeData;
    export import GetOrganisationSensorsData = Components.Operations.GetOrganisationSensorsData;
    export import GetOrganisationSensorsEventData = Components.Operations.GetOrganisationSensorsEventData;
    export import GetOrganisationSensorsEventRangeData = Components.Operations.GetOrganisationSensorsEventRangeData;
    export import GetOrganisationUniversalSearch = Components.Operations.GetOrganisationUniversalSearch;
    export import PutReport = Components.Operations.PutReport;
    export import GetUniversalSearch = Components.Operations.GetUniversalSearch;
    export import GetUser = Components.Operations.GetUser;
    export import PutUser = Components.Operations.PutUser;
    export import GetUserFactories = Components.Operations.GetUserFactories;
    export import GetUserNotifications = Components.Operations.GetUserNotifications;
    export import GetUserOrganisation = Components.Operations.GetUserOrganisation;
    export import PutUserOrganisation = Components.Operations.PutUserOrganisation;
    export import GetUserOrganisationAlerts = Components.Operations.GetUserOrganisationAlerts;
    export import GetUserOrganisationApplications = Components.Operations.GetUserOrganisationApplications;
    export import PostUserOrganisationApplication = Components.Operations.PostUserOrganisationApplication;
    export import GetUserOrganisationFactories = Components.Operations.GetUserOrganisationFactories;
    export import PostUserOrganisationFactory = Components.Operations.PostUserOrganisationFactory;
    export import GetUserOrganisationFactoryPreferences = Components.Operations.GetUserOrganisationFactoryPreferences;
    export import GetUserOrganisationTasks = Components.Operations.GetUserOrganisationTasks;
    export import GetUserOrganisationUsers = Components.Operations.GetUserOrganisationUsers;
    export import GetUserOrganisations = Components.Operations.GetUserOrganisations;
    export import PostUserOrganisation = Components.Operations.PostUserOrganisation;
    export import PostUser = Components.Operations.PostUser;
    export import PostAuthLogin = Components.Operations.PostAuthLogin;
    export import PostAuthLogout = Components.Operations.PostAuthLogout;
    export import PostAuthPasswordChange = Components.Operations.PostAuthPasswordChange;
    export import PostAuthRefresh = Components.Operations.PostAuthRefresh;
    export import PostAuthVerify = Components.Operations.PostAuthVerify;
    export import PostOAuth2Token = Components.Operations.PostOAuth2Token;
    export import PostOrganisationData = Components.Operations.PostOrganisationData;
    export import PostPasswordChangeRequest = Components.Operations.PostPasswordChangeRequest;
    export import PostUserInvitationResponse = Components.Operations.PostUserInvitationResponse;
    export import PostUserOrganisationAssetSensor = Components.Operations.PostUserOrganisationAssetSensor;
    export import PostUserOrganisationFactoryAsset = Components.Operations.PostUserOrganisationFactoryAsset;
    export import PostUserOrganisationFactoryIntervention = Components.Operations.PostUserOrganisationFactoryIntervention;
    export import PostUserOrganisationFactorySensor = Components.Operations.PostUserOrganisationFactorySensor;
    export import PostUserOrganisationInvitation = Components.Operations.PostUserOrganisationInvitation;
    export import PostUserOrganisationInvitationFollowup = Components.Operations.PostUserOrganisationInvitationFollowup;
    export import PostUserOrganisationNotificationRead = Components.Operations.PostUserOrganisationNotificationRead;
    export import PostUserOrganisationProject = Components.Operations.PostUserOrganisationProject;
    export import PutAttachment = Components.Operations.PutAttachment;
    export import PutImage = Components.Operations.PutImage;
    export import PutNotificationEvent = Components.Operations.PutNotificationEvent;
    export import PutOrganisationFactoryEvent = Components.Operations.PutOrganisationFactoryEvent;
    export import PutUserOrganisationAlertFeedback = Components.Operations.PutUserOrganisationAlertFeedback;
    export import PutUserOrganisationAssetSensor = Components.Operations.PutUserOrganisationAssetSensor;
    export import PutUserOrganisationFactory = Components.Operations.PutUserOrganisationFactory;
    export import PutUserOrganisationFactoryAsset = Components.Operations.PutUserOrganisationFactoryAsset;
    export import PutUserOrganisationFactoryIntervention = Components.Operations.PutUserOrganisationFactoryIntervention;
    export import PutUserOrganisationFactoryPreferences = Components.Operations.PutUserOrganisationFactoryPreferences;
    export import PutUserOrganisationFactorySensor = Components.Operations.PutUserOrganisationFactorySensor;
    export import GetOAuth2Authorize = Components.Operations.GetOAuth2Authorize;
    export import GetPing = Components.Operations.GetPing;
}
export namespace Enums {
    export enum AttachmentFileType {
        Applicationpdf = "application/pdf",
        Texthtml = "text/html"
    }
    export enum ImageFileType {
        Imagejpeg = "image/jpeg",
        Imagepng = "image/png"
    }
    export enum ResponseType {
        Code = "code",
        Token = "token"
    }
    export enum SortDirection {
        Asc = "asc",
        Desc = "desc"
    }
    export enum AlertsSortByValue {
        Severity = "severity",
        Priority = "priority",
        AssignedAt = "assignedAt",
        StartAt = "startAt",
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum GrantType {
        Code = "code",
        Token = "token",
        Password = "password",
        Refresh = "refresh",
        ClientCredentials = "client_credentials",
        Verify = "verify",
        PasswordChange = "password_change"
    }
    export enum Scope {
        User = "user",
        Admin = "admin",
        Data = "data",
        Webhook = "webhook",
        Oauth2 = "oauth2",
        Ml = "ml"
    }
    export enum ApplicationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum PowerState {
        Unknown = "unknown",
        On = "on",
        Off = "off"
    }
    export enum OperatingState {
        Unknown = "unknown",
        Normal = "normal",
        Stopped = "stopped",
        Idle = "idle"
    }
    export enum HealthState {
        Unknown = "unknown",
        Good = "good",
        Faulty = "faulty",
        Erroring = "erroring"
    }
    export enum AssetType {
        Area = "area",
        Line = "line",
        Machine = "machine",
        Part = "part"
    }
    export enum LineMetricsStatus {
        Good = "good",
        Faulty = "faulty",
        Error = "error"
    }
    export enum AssetsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum EventType {
        SegmentedAnomalyDetectionPredict = "segmented_anomaly_detection_predict",
        UnivariateForecastLearn = "univariate_forecast_learn",
        RealtimeAlert = "realtime_alert",
        DriftDetection = "drift_detection",
        UnivariateForecastPredict = "univariate_forecast_predict",
        DspadPredict = "dspad_predict",
        Process = "process",
        Anomaly = "anomaly",
        DspadDataMvt = "dspad_data_mvt",
        Cycle = "cycle",
        Phase = "phase"
    }
    export enum DoSyncMode {
        OneWayIn = "one-way-in",
        OneWayOut = "one-way-out",
        TwoWays = "two-ways"
    }
    export enum FactoriesSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AlertStatus {
        Open = "open",
        Discarded = "discarded",
        Fixed = "fixed",
        Closed = "closed"
    }
    export enum Severity {
        NotSet = "not_set",
        Critical = "critical",
        Major = "major",
        Moderate = "moderate",
        Minor = "minor",
        Cosmetic = "cosmetic"
    }
    export enum ImageScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum InterventionType {
        Fix = "fix",
        Prevent = "prevent",
        Control = "control"
    }
    export enum Priority {
        NotSet = "not_set",
        Urgent = "urgent",
        Important = "important",
        Secondary = "secondary"
    }
    export enum InterventionsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Priority = "priority"
    }
    export enum StandardAlertCode {
        MissingData = "missing_data",
        BadData = "bad_data",
        WrongDelta = "wrong_delta",
        ProductionDrop = "production_drop",
        OutOfBounds = "out_of_bounds",
        AbnormalData = "abnormal_data",
        DataDrift = "data_drift",
        SilenceAlert = "silence_alert",
        RealtimeAlert = "realtime_alert"
    }
    export enum OrganisationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum ProjectsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AttachmentScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum ReportsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AlertType {
        Realtime = "realtime",
        Silence = "silence"
    }
    export enum TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors {
        Ancestors = "ancestors",
        Assets = "assets",
        All = "all"
    }
    export enum WetherAllLabelsShouldMatchOrAny {
        All = "all",
        Any = "any"
    }
    export enum RealtimeAlertTriggerBranchOperator {
        And = "and",
        Or = "or"
    }
    export enum NameOfTheLabelToTest {
        Phases = "phases",
        Cycles = "cycles",
        Configurations = "configurations",
        Tags = "tags"
    }
    export enum RealtimeAlertTriggerValueTestOperator {
        Eq = "eq",
        Gt = "gt",
        Gte = "gte",
        Lt = "lt",
        Lte = "lte",
        And = "and",
        Xor = "xor"
    }
    export enum SensorType {
        Qualitative = "qualitative",
        Quantitative = "quantitative"
    }
    export enum AggregationType {
        Ratio = "ratio",
        Sum = "sum"
    }
    export enum Unit {
        Days = "days",
        Hours = "hours"
    }
    export enum SensorsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum Aggregation {
        Min = "min",
        Max = "max",
        Avg = "avg",
        Count = "count",
        Sum = "sum",
        P25 = "p25",
        Median = "median",
        P75 = "p75",
        Top1 = "top1",
        Top2 = "top2",
        Top3 = "top3",
        Others = "others"
    }
    export enum Granularity {
        Second = "second",
        Minute = "minute",
        FifteenMinute = "fifteen_minute",
        ThirtyMinute = "thirty_minute",
        Hour = "hour",
        Day = "day",
        Week = "week",
        Month = "month",
        Quarter = "quarter",
        Year = "year"
    }
    export enum EventField {
        AggregatableValue1 = "aggregatableValue1",
        AggregatableValue2 = "aggregatableValue2",
        AggregatableValue3 = "aggregatableValue3"
    }
    export enum TasksSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum TaskStatus {
        ToAssign = "to_assign",
        ToDo = "to_do",
        InProgress = "in_progress",
        Done = "done"
    }
    export enum TaskType {
        Alert = "alert",
        Intervention = "intervention"
    }
    export enum SearchFilterType {
        Factory = "factory",
        Asset = "asset"
    }
    export enum SearchType {
        User = "user",
        Factory = "factory",
        Project = "project",
        Asset = "asset",
        Application = "application",
        Intervention = "intervention",
        Alert = "alert",
        Report = "report",
        Sensor = "sensor",
        Organisation = "organisation"
    }
    export enum NotificationType {
        USERCREATED = "USER_CREATED",
        USERUPDATED = "USER_UPDATED",
        ALERTUPSERTED = "ALERT_UPSERTED",
        ALERTDELETED = "ALERT_DELETED",
        ASSETUPSERTED = "ASSET_UPSERTED",
        ASSETDELETED = "ASSET_DELETED",
        SENSORUPSERTED = "SENSOR_UPSERTED",
        SENSORDELETED = "SENSOR_DELETED",
        REPORTUPSERTED = "REPORT_UPSERTED",
        REPORTDELETED = "REPORT_DELETED",
        INTERVENTIONUPSERTED = "INTERVENTION_UPSERTED",
        INTERVENTIONDELETED = "INTERVENTION_DELETED",
        ALGORITHMMODELUPDATED = "ALGORITHM_MODEL_UPDATED",
        PROJECTUPSERTED = "PROJECT_UPSERTED",
        PROJECTDELETED = "PROJECT_DELETED",
        FACTORYUPSERTED = "FACTORY_UPSERTED",
        FACTORYDELETED = "FACTORY_DELETED",
        ORGANISATIONUPSERTED = "ORGANISATION_UPSERTED",
        ORGANISATIONDELETED = "ORGANISATION_DELETED",
        ORGANISATIONUSERUPDATED = "ORGANISATION_USER_UPDATED",
        ORGANISATIONPREFERENCESUPSERTED = "ORGANISATION_PREFERENCES_UPSERTED",
        SENSORSERIESDELETED = "SENSOR_SERIES_DELETED",
        PASSWORDCHANGEREQUESTED = "PASSWORD_CHANGE_REQUESTED",
        EMAILSTATUSUPDATED = "EMAIL_STATUS_UPDATED",
        USERFEEDBACKUPDATED = "USER_FEEDBACK_UPDATED",
        USERINVITEDINORGANISATION = "USER_INVITED_IN_ORGANISATION",
        MEMBERSHIPCANCELLED = "MEMBERSHIP_CANCELLED",
        VIRTUALSENSORCOMPUTEREQUESTED = "VIRTUAL_SENSOR_COMPUTE_REQUESTED"
    }
    export enum SensorDisplaySerie {
        Always = "always",
        Never = "never",
        IfExists = "ifExists"
    }
    export enum EmailStatus {
        Bouncing = "bouncing",
        Reachable = "reachable",
        Dropped = "dropped",
        Unknown = "unknown"
    }
    export enum Role {
        Admin = "admin",
        User = "user",
        Candidate = "candidate",
        Third = "third"
    }
    export enum UsersSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum UserMembershipStatus {
        Member = "member",
        Pending = "pending",
        Declined = "declined",
        Cancelled = "cancelled"
    }
    export enum IngestionStage {
        Raw = "raw",
        Enriched = "enriched"
    }
    export enum RegisterDirection {
        Ascent = "ascent",
        Descent = "descent"
    }
    export enum SendGridEventType {
        Processed = "processed",
        Dropped = "dropped",
        Delivered = "delivered",
        Deferred = "deferred",
        Bounce = "bounce",
        Blocked = "blocked",
        Open = "open",
        Click = "click",
        Spamreport = "spamreport",
        Unsubscribe = "unsubscribe",
        GroupUnsubscribe = "group_unsubscribe",
        GroupResubscribe = "group_resubscribe"
    }
    export enum AnomalyType {
        AbnormalMachineBehavior = "abnormal_machine_behavior",
        AbnormalSensorBehavior = "abnormal_sensor_behavior",
        MissingData = "missing_data"
    }
    export enum Type {
        Succeeded = "succeeded",
        Errored = "errored",
        Discarded = "discarded"
    }
    export enum PreferenceLevel {
        Organisation = "organisation",
        Factory = "factory",
        User = "user"
    }
    export enum Operation {
        Restore = "restore",
        Backup = "backup"
    }
    export enum TokenType {
        Bearer = "bearer",
        Mac = "mac"
    }
    export enum Error {
        InvalidRequest = "invalid_request",
        InvalidClient = "invalid_client",
        InvalidGrant = "invalid_grant",
        UnauthorizedClient = "unauthorized_client",
        UnsupportedGrantType = "unsupported_grant_type",
        InvalidScope = "invalid_scope"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with parameters_aliasing.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $204 = Components.Responses.GetDelay204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type Duration = Components.Parameters.DurationTime;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
    }
    export namespace Responses {
        export type GetDelay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace Parameters {
        export type DurationUnit = Enums.DurationUnit;
        export type DurationTime = number;
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
    }
}
declare namespace API {
    export import GetDelay = Components.Operations.GetDelay;
}
declare namespace Enums {
    export enum DurationUnit {
        S = "s",
        M = "m",
        H = "h"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with parameters_aliasing.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export type Output = unknown;
            export namespace Parameters {
                export type Duration = Components.Parameters.DurationTime;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
    }
    export namespace Parameters {
        export type DurationUnit = "s" | "m" | "h";
        export type DurationTime = number;
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
    }
}
declare namespace API {
    export import GetDelay = Components.Operations.GetDelay;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with parameters_aliasing.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $204 = Components.Responses.GetDelay204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type Duration = Components.Parameters.DurationTime;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
    }
    export namespace Responses {
        export type GetDelay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace Parameters {
        export type DurationUnit = Enums.DurationUnit;
        export type DurationTime = number;
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
    }
}
export namespace AnotherAPI {
    export import GetDelay = Components.Operations.GetDelay;
}
export namespace Enums {
    export enum DurationUnit {
        S = "s",
        M = "m",
        H = "h"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace UpdatePet {
            export type Body = Components.RequestBodies.Pet;
            export namespace Responses {
                export type $400 = Components.Responses.UpdatePet400<400>;
                export type $404 = Components.Responses.UpdatePet404<404>;
                export type $405 = Components.Responses.UpdatePet405<405>;
            }
            export type Output = Responses.$400 | Responses.$404 | Responses.$405;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace AddPet {
            export type Body = Components.RequestBodies.Pet;
            export namespace Responses {
                export type $405 = Components.Responses.AddPet405<405>;
            }
            export type Output = Responses.$405;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace FindPetsByStatus {
            export namespace Responses {
                export type $200 = Components.Responses.FindPetsByStatus200<200>;
                export type $400 = Components.Responses.FindPetsByStatus400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type Status = Components.Parameters.FindPetsByStatus0;
            }
            export type Input = {
                readonly status: Parameters.Status;
            };
        }
        export namespace FindPetsByTags {
            export namespace Responses {
                export type $200 = Components.Responses.FindPetsByTags200<200>;
                export type $400 = Components.Responses.FindPetsByTags400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type Tags = Components.Parameters.FindPetsByTags0;
            }
            export type Input = {
                readonly tags: Parameters.Tags;
            };
        }
        export namespace GetPetById {
            export namespace Responses {
                export type $200 = Components.Responses.GetPetById200<200>;
                export type $400 = Components.Responses.GetPetById400<400>;
                export type $404 = Components.Responses.GetPetById404<404>;
            }
            export type Output = Responses.$200 | Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type PetId = Components.Parameters.GetPetById0;
            }
            export type Input = {
                readonly petId: Parameters.PetId;
            };
        }
        export namespace UpdatePetWithForm {
            export type Body = Components.RequestBodies.UpdatePetWithForm;
            export namespace Responses {
                export type $405 = Components.Responses.UpdatePetWithForm405<405>;
            }
            export type Output = Responses.$405;
            export namespace Parameters {
                export type PetId = Components.Parameters.UpdatePetWithForm0;
            }
            export type Input = {
                readonly body?: Body;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace DeletePet {
            export namespace Responses {
                export type $400 = Components.Responses.DeletePet400<400>;
            }
            export type Output = Responses.$400;
            export namespace Parameters {
                export type ApiKey = Components.Parameters.DeletePet0;
                export type PetId = Components.Parameters.DeletePet1;
            }
            export type Input = {
                readonly apiKey?: Parameters.ApiKey;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace UploadFile {
            export type Body = Components.RequestBodies.UploadFile;
            export namespace Responses {
                export type $200 = Components.Responses.UploadFile200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type PetId = Components.Parameters.UploadFile0;
            }
            export type Input = {
                readonly body?: Body;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace GetInventory {
            export namespace Responses {
                export type $200 = Components.Responses.GetInventory200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PlaceOrder {
            export type Body = Components.RequestBodies.PlaceOrder;
            export namespace Responses {
                export type $200 = Components.Responses.PlaceOrder200<200>;
                export type $400 = Components.Responses.PlaceOrder400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetOrderById {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrderById200<200>;
                export type $400 = Components.Responses.GetOrderById400<400>;
                export type $404 = Components.Responses.GetOrderById404<404>;
            }
            export type Output = Responses.$200 | Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type OrderId = Components.Parameters.GetOrderById0;
            }
            export type Input = {
                readonly orderId: Parameters.OrderId;
            };
        }
        export namespace DeleteOrder {
            export namespace Responses {
                export type $400 = Components.Responses.DeleteOrder400<400>;
                export type $404 = Components.Responses.DeleteOrder404<404>;
            }
            export type Output = Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type OrderId = Components.Parameters.DeleteOrder0;
            }
            export type Input = {
                readonly orderId: Parameters.OrderId;
            };
        }
        export namespace CreateUser {
            export type Body = Components.RequestBodies.CreateUser;
            export namespace Responses {
                export type $default = Components.Responses.CreateUserdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace CreateUsersWithArrayInput {
            export type Body = Components.RequestBodies.UserArray;
            export namespace Responses {
                export type $default = Components.Responses.CreateUsersWithArrayInputdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace CreateUsersWithListInput {
            export type Body = Components.RequestBodies.UserArray;
            export namespace Responses {
                export type $default = Components.Responses.CreateUsersWithListInputdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace LoginUser {
            export namespace Responses {
                export type $200 = Components.Responses.LoginUser200<200>;
                export type $400 = Components.Responses.LoginUser400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type Username = Components.Parameters.LoginUser0;
                export type Password = Components.Parameters.LoginUser1;
            }
            export type Input = {
                readonly username: Parameters.Username;
                readonly password: Parameters.Password;
            };
        }
        export namespace LogoutUser {
            export namespace Responses {
                export type $default = Components.Responses.LogoutUserdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {};
        }
        export namespace GetUserByName {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserByName200<200>;
                export type $400 = Components.Responses.GetUserByName400<400>;
                export type $404 = Components.Responses.GetUserByName404<404>;
            }
            export type Output = Responses.$200 | Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type Username = Components.Parameters.GetUserByName0;
            }
            export type Input = {
                readonly username: Parameters.Username;
            };
        }
        export namespace UpdateUser {
            export type Body = Components.RequestBodies.UpdateUser;
            export namespace Responses {
                export type $400 = Components.Responses.UpdateUser400<400>;
                export type $404 = Components.Responses.UpdateUser404<404>;
            }
            export type Output = Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type Username = Components.Parameters.UpdateUser0;
            }
            export type Input = {
                readonly body: Body;
                readonly username: Parameters.Username;
            };
        }
        export namespace DeleteUser {
            export namespace Responses {
                export type $400 = Components.Responses.DeleteUser400<400>;
                export type $404 = Components.Responses.DeleteUser404<404>;
            }
            export type Output = Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type Username = Components.Parameters.DeleteUser0;
            }
            export type Input = {
                readonly username: Parameters.Username;
            };
        }
    }
    export namespace Responses {
        export type UpdatePet400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdatePet404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdatePet405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type AddPet405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type FindPetsByStatus200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatus200Body0 | Components.Schemas.ResponsesfindPetsByStatus200Body1;
        };
        export type FindPetsByStatus400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type FindPetsByTags200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTags200Body0 | Components.Schemas.ResponsesfindPetsByTags200Body1;
        };
        export type FindPetsByTags400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetPetById200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        export type GetPetById400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetPetById404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdatePetWithForm405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeletePet400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UploadFile200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        export type GetInventory200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventory200Body0;
        };
        export type PlaceOrder200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type PlaceOrder400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOrderById200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type GetOrderById400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOrderById404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteOrder400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteOrder404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type CreateUserdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type CreateUsersWithArrayInputdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type CreateUsersWithListInputdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type LoginUser200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly "x-rate-limit": Components.Headers.LoginUser200HeadersXRateLimit;
                readonly "x-expires-after"?: Components.Headers.LoginUser200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUser200Body0 | Components.Schemas.ResponsesloginUser200Body1;
        };
        export type LoginUser400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type LogoutUserdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUserByName200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        export type GetUserByName400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUserByName404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdateUser400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdateUser404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUser400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUser404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace Pet {
            export import Put = Components.Operations.UpdatePet;
            export import Post = Components.Operations.AddPet;
        }
        export namespace PetfindByStatus {
            export import Get = Components.Operations.FindPetsByStatus;
        }
        export namespace PetfindByTags {
            export import Get = Components.Operations.FindPetsByTags;
        }
        export namespace PetpetId {
            export import Get = Components.Operations.GetPetById;
            export import Post = Components.Operations.UpdatePetWithForm;
            export import Delete = Components.Operations.DeletePet;
        }
        export namespace PetpetIduploadImage {
            export import Post = Components.Operations.UploadFile;
        }
        export namespace Storeinventory {
            export import Get = Components.Operations.GetInventory;
        }
        export namespace Storeorder {
            export import Post = Components.Operations.PlaceOrder;
        }
        export namespace StoreorderorderId {
            export import Get = Components.Operations.GetOrderById;
            export import Delete = Components.Operations.DeleteOrder;
        }
        export namespace User {
            export import Post = Components.Operations.CreateUser;
        }
        export namespace UsercreateWithArray {
            export import Post = Components.Operations.CreateUsersWithArrayInput;
        }
        export namespace UsercreateWithList {
            export import Post = Components.Operations.CreateUsersWithListInput;
        }
        export namespace Userlogin {
            export import Get = Components.Operations.LoginUser;
        }
        export namespace Userlogout {
            export import Get = Components.Operations.LogoutUser;
        }
        export namespace Userusername {
            export import Get = Components.Operations.GetUserByName;
            export import Put = Components.Operations.UpdateUser;
            export import Delete = Components.Operations.DeleteUser;
        }
    }
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithForm = Components.Schemas.Body;
        export type UploadFile = Components.Schemas.Body1;
        export type PlaceOrder = Components.Schemas.Order;
        export type CreateUser = Components.Schemas.User;
        export type UpdateUser = Components.Schemas.User;
    }
    export namespace Parameters {
        export type FindPetsByStatus0 = ("available" | "pending" | "sold")[];
        export type FindPetsByTags0 = string[];
        export type GetPetById0 = number;
        export type UpdatePetWithForm0 = number;
        export type DeletePet0 = string;
        export type DeletePet1 = number;
        export type UploadFile0 = number;
        export type GetOrderById0 = number;
        export type DeleteOrder0 = string;
        export type LoginUser0 = string;
        export type LoginUser1 = string;
        export type GetUserByName0 = string;
        export type UpdateUser0 = string;
        export type DeleteUser0 = string;
    }
    export namespace Headers {
        export type LoginUser200HeadersXRateLimit = number;
        export type LoginUser200HeadersXExpiresAfter = string;
    }
    export namespace Schemas {
        export type RequestBodiesUserArrayBody0 = Components.Schemas.User[];
        export type Pet = {
            id?: number;
            category?: Components.Schemas.Category;
            name: string;
            photoUrls: string[];
            tags?: Components.Schemas.Tag[];
            status?: Enums.PetStatusInTheStore;
        };
        export type Body = {
            name?: string;
            status?: string;
        };
        export type Body1 = {
            additionalMetadata?: string;
            file?: string;
        };
        export type Order = {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: Enums.OrderStatus;
            complete?: boolean;
        };
        export type User = {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        export type ResponsesfindPetsByStatus200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByStatus200Body1 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTags200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTags200Body1 = Components.Schemas.Pet[];
        export type ApiResponse = {
            code?: number;
            type?: string;
            message?: string;
        };
        export type ResponsesgetInventory200Body0 = {
            [pattern: string]: unknown;
        };
        export type ResponsesloginUser200Body0 = string;
        export type ResponsesloginUser200Body1 = string;
        export type Category = {
            id?: number;
            name?: string;
        };
        export type Tag = {
            id?: number;
            name?: string;
        };
    }
}
declare namespace API {
    export import UpdatePet = Components.Operations.UpdatePet;
    export import AddPet = Components.Operations.AddPet;
    export import FindPetsByStatus = Components.Operations.FindPetsByStatus;
    export import FindPetsByTags = Components.Operations.FindPetsByTags;
    export import GetPetById = Components.Operations.GetPetById;
    export import UpdatePetWithForm = Components.Operations.UpdatePetWithForm;
    export import DeletePet = Components.Operations.DeletePet;
    export import UploadFile = Components.Operations.UploadFile;
    export import GetInventory = Components.Operations.GetInventory;
    export import PlaceOrder = Components.Operations.PlaceOrder;
    export import GetOrderById = Components.Operations.GetOrderById;
    export import DeleteOrder = Components.Operations.DeleteOrder;
    export import CreateUser = Components.Operations.CreateUser;
    export import CreateUsersWithArrayInput = Components.Operations.CreateUsersWithArrayInput;
    export import CreateUsersWithListInput = Components.Operations.CreateUsersWithListInput;
    export import LoginUser = Components.Operations.LoginUser;
    export import LogoutUser = Components.Operations.LogoutUser;
    export import GetUserByName = Components.Operations.GetUserByName;
    export import UpdateUser = Components.Operations.UpdateUser;
    export import DeleteUser = Components.Operations.DeleteUser;
}
declare namespace Enums {
    export enum PetStatusInTheStore {
        Available = "available",
        Pending = "pending",
        Sold = "sold"
    }
    export enum OrderStatus {
        Placed = "placed",
        Approved = "approved",
        Delivered = "delivered"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace UpdatePet {
            export type Body = Components.RequestBodies.Pet;
            export type Output = unknown;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace AddPet {
            export type Body = Components.RequestBodies.Pet;
            export type Output = unknown;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace FindPetsByStatus {
            export namespace Responses {
                export type $200 = Components.Responses.FindPetsByStatus200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Status = Components.Parameters.FindPetsByStatus0;
            }
            export type Input = {
                readonly status: Parameters.Status;
            };
        }
        export namespace FindPetsByTags {
            export namespace Responses {
                export type $200 = Components.Responses.FindPetsByTags200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Tags = Components.Parameters.FindPetsByTags0;
            }
            export type Input = {
                readonly tags: Parameters.Tags;
            };
        }
        export namespace GetPetById {
            export namespace Responses {
                export type $200 = Components.Responses.GetPetById200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type PetId = Components.Parameters.GetPetById0;
            }
            export type Input = {
                readonly petId: Parameters.PetId;
            };
        }
        export namespace UpdatePetWithForm {
            export type Body = Components.RequestBodies.UpdatePetWithForm;
            export type Output = unknown;
            export namespace Parameters {
                export type PetId = Components.Parameters.UpdatePetWithForm0;
            }
            export type Input = {
                readonly body?: Body;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace DeletePet {
            export type Output = unknown;
            export namespace Parameters {
                export type ApiKey = Components.Parameters.DeletePet0;
                export type PetId = Components.Parameters.DeletePet1;
            }
            export type Input = {
                readonly apiKey?: Parameters.ApiKey;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace UploadFile {
            export type Body = Components.RequestBodies.UploadFile;
            export namespace Responses {
                export type $200 = Components.Responses.UploadFile200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type PetId = Components.Parameters.UploadFile0;
            }
            export type Input = {
                readonly body?: Body;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace GetInventory {
            export namespace Responses {
                export type $200 = Components.Responses.GetInventory200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PlaceOrder {
            export type Body = Components.RequestBodies.PlaceOrder;
            export namespace Responses {
                export type $200 = Components.Responses.PlaceOrder200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetOrderById {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrderById200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type OrderId = Components.Parameters.GetOrderById0;
            }
            export type Input = {
                readonly orderId: Parameters.OrderId;
            };
        }
        export namespace DeleteOrder {
            export type Output = unknown;
            export namespace Parameters {
                export type OrderId = Components.Parameters.DeleteOrder0;
            }
            export type Input = {
                readonly orderId: Parameters.OrderId;
            };
        }
        export namespace CreateUser {
            export type Body = Components.RequestBodies.CreateUser;
            export type Output = unknown;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace CreateUsersWithArrayInput {
            export type Body = Components.RequestBodies.UserArray;
            export type Output = unknown;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace CreateUsersWithListInput {
            export type Body = Components.RequestBodies.UserArray;
            export type Output = unknown;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace LoginUser {
            export namespace Responses {
                export type $200 = Components.Responses.LoginUser200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Username = Components.Parameters.LoginUser0;
                export type Password = Components.Parameters.LoginUser1;
            }
            export type Input = {
                readonly username: Parameters.Username;
                readonly password: Parameters.Password;
            };
        }
        export namespace LogoutUser {
            export type Output = unknown;
            export type Input = {};
        }
        export namespace GetUserByName {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserByName200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Username = Components.Parameters.GetUserByName0;
            }
            export type Input = {
                readonly username: Parameters.Username;
            };
        }
        export namespace UpdateUser {
            export type Body = Components.RequestBodies.UpdateUser;
            export type Output = unknown;
            export namespace Parameters {
                export type Username = Components.Parameters.UpdateUser0;
            }
            export type Input = {
                readonly body: Body;
                readonly username: Parameters.Username;
            };
        }
        export namespace DeleteUser {
            export type Output = unknown;
            export namespace Parameters {
                export type Username = Components.Parameters.DeleteUser0;
            }
            export type Input = {
                readonly username: Parameters.Username;
            };
        }
    }
    export namespace Responses {
        export type FindPetsByStatus200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatus200Body0 | Components.Schemas.ResponsesfindPetsByStatus200Body1;
        };
        export type FindPetsByTags200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTags200Body0 | Components.Schemas.ResponsesfindPetsByTags200Body1;
        };
        export type GetPetById200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        export type UploadFile200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        export type GetInventory200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventory200Body0;
        };
        export type PlaceOrder200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type GetOrderById200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type LoginUser200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly "x-rate-limit": Components.Headers.LoginUser200HeadersXRateLimit;
                readonly "x-expires-after"?: Components.Headers.LoginUser200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUser200Body0 | Components.Schemas.ResponsesloginUser200Body1;
        };
        export type GetUserByName200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
    }
    export namespace PathItems {
        export namespace Pet {
            export import Put = Components.Operations.UpdatePet;
            export import Post = Components.Operations.AddPet;
        }
        export namespace PetfindByStatus {
            export import Get = Components.Operations.FindPetsByStatus;
        }
        export namespace PetfindByTags {
            export import Get = Components.Operations.FindPetsByTags;
        }
        export namespace PetpetId {
            export import Get = Components.Operations.GetPetById;
            export import Post = Components.Operations.UpdatePetWithForm;
            export import Delete = Components.Operations.DeletePet;
        }
        export namespace PetpetIduploadImage {
            export import Post = Components.Operations.UploadFile;
        }
        export namespace Storeinventory {
            export import Get = Components.Operations.GetInventory;
        }
        export namespace Storeorder {
            export import Post = Components.Operations.PlaceOrder;
        }
        export namespace StoreorderorderId {
            export import Get = Components.Operations.GetOrderById;
            export import Delete = Components.Operations.DeleteOrder;
        }
        export namespace User {
            export import Post = Components.Operations.CreateUser;
        }
        export namespace UsercreateWithArray {
            export import Post = Components.Operations.CreateUsersWithArrayInput;
        }
        export namespace UsercreateWithList {
            export import Post = Components.Operations.CreateUsersWithListInput;
        }
        export namespace Userlogin {
            export import Get = Components.Operations.LoginUser;
        }
        export namespace Userlogout {
            export import Get = Components.Operations.LogoutUser;
        }
        export namespace Userusername {
            export import Get = Components.Operations.GetUserByName;
            export import Put = Components.Operations.UpdateUser;
            export import Delete = Components.Operations.DeleteUser;
        }
    }
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithForm = Components.Schemas.Body;
        export type UploadFile = Components.Schemas.Body1;
        export type PlaceOrder = Components.Schemas.Order;
        export type CreateUser = Components.Schemas.User;
        export type UpdateUser = Components.Schemas.User;
    }
    export namespace Parameters {
        export type FindPetsByStatus0 = ("available" | "pending" | "sold")[];
        export type FindPetsByTags0 = string[];
        export type GetPetById0 = number;
        export type UpdatePetWithForm0 = number;
        export type DeletePet0 = string;
        export type DeletePet1 = number;
        export type UploadFile0 = number;
        export type GetOrderById0 = number;
        export type DeleteOrder0 = string;
        export type LoginUser0 = string;
        export type LoginUser1 = string;
        export type GetUserByName0 = string;
        export type UpdateUser0 = string;
        export type DeleteUser0 = string;
    }
    export namespace Headers {
        export type LoginUser200HeadersXRateLimit = number;
        export type LoginUser200HeadersXExpiresAfter = string;
    }
    export namespace Schemas {
        export type RequestBodiesUserArrayBody0 = Components.Schemas.User[];
        export type Pet = {
            id?: number;
            category?: Components.Schemas.Category;
            name: string;
            photoUrls: string[];
            tags?: Components.Schemas.Tag[];
            status?: "available" | "pending" | "sold";
        };
        export type Body = {
            name?: string;
            status?: string;
        };
        export type Body1 = {
            additionalMetadata?: string;
            file?: string;
        };
        export type Order = {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: "placed" | "approved" | "delivered";
            complete?: boolean;
        };
        export type User = {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        export type ResponsesfindPetsByStatus200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByStatus200Body1 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTags200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTags200Body1 = Components.Schemas.Pet[];
        export type ApiResponse = {
            code?: number;
            type?: string;
            message?: string;
        };
        export type ResponsesgetInventory200Body0 = {
            [pattern: string]: unknown;
        };
        export type ResponsesloginUser200Body0 = string;
        export type ResponsesloginUser200Body1 = string;
        export type Category = {
            id?: number;
            name?: string;
        };
        export type Tag = {
            id?: number;
            name?: string;
        };
    }
}
declare namespace API {
    export import UpdatePet = Components.Operations.UpdatePet;
    export import AddPet = Components.Operations.AddPet;
    export import FindPetsByStatus = Components.Operations.FindPetsByStatus;
    export import FindPetsByTags = Components.Operations.FindPetsByTags;
    export import GetPetById = Components.Operations.GetPetById;
    export import UpdatePetWithForm = Components.Operations.UpdatePetWithForm;
    export import DeletePet = Components.Operations.DeletePet;
    export import UploadFile = Components.Operations.UploadFile;
    export import GetInventory = Components.Operations.GetInventory;
    export import PlaceOrder = Components.Operations.PlaceOrder;
    export import GetOrderById = Components.Operations.GetOrderById;
    export import DeleteOrder = Components.Operations.DeleteOrder;
    export import CreateUser = Components.Operations.CreateUser;
    export import CreateUsersWithArrayInput = Components.Operations.CreateUsersWithArrayInput;
    export import CreateUsersWithListInput = Components.Operations.CreateUsersWithListInput;
    export import LoginUser = Components.Operations.LoginUser;
    export import LogoutUser = Components.Operations.LogoutUser;
    export import GetUserByName = Components.Operations.GetUserByName;
    export import UpdateUser = Components.Operations.UpdateUser;
    export import DeleteUser = Components.Operations.DeleteUser;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace UpdatePet {
            export type Body = Components.RequestBodies.Pet;
            export namespace Responses {
                export type $400 = Components.Responses.UpdatePet400<400>;
                export type $404 = Components.Responses.UpdatePet404<404>;
                export type $405 = Components.Responses.UpdatePet405<405>;
            }
            export type Output = Responses.$400 | Responses.$404 | Responses.$405;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace AddPet {
            export type Body = Components.RequestBodies.Pet;
            export namespace Responses {
                export type $405 = Components.Responses.AddPet405<405>;
            }
            export type Output = Responses.$405;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace FindPetsByStatus {
            export namespace Responses {
                export type $200 = Components.Responses.FindPetsByStatus200<200>;
                export type $400 = Components.Responses.FindPetsByStatus400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type Status = Components.Parameters.FindPetsByStatus0;
            }
            export type Input = {
                readonly status: Parameters.Status;
            };
        }
        export namespace FindPetsByTags {
            export namespace Responses {
                export type $200 = Components.Responses.FindPetsByTags200<200>;
                export type $400 = Components.Responses.FindPetsByTags400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type Tags = Components.Parameters.FindPetsByTags0;
            }
            export type Input = {
                readonly tags: Parameters.Tags;
            };
        }
        export namespace GetPetById {
            export namespace Responses {
                export type $200 = Components.Responses.GetPetById200<200>;
                export type $400 = Components.Responses.GetPetById400<400>;
                export type $404 = Components.Responses.GetPetById404<404>;
            }
            export type Output = Responses.$200 | Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type PetId = Components.Parameters.GetPetById0;
            }
            export type Input = {
                readonly petId: Parameters.PetId;
            };
        }
        export namespace UpdatePetWithForm {
            export type Body = Components.RequestBodies.UpdatePetWithForm;
            export namespace Responses {
                export type $405 = Components.Responses.UpdatePetWithForm405<405>;
            }
            export type Output = Responses.$405;
            export namespace Parameters {
                export type PetId = Components.Parameters.UpdatePetWithForm0;
            }
            export type Input = {
                readonly body?: Body;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace DeletePet {
            export namespace Responses {
                export type $400 = Components.Responses.DeletePet400<400>;
            }
            export type Output = Responses.$400;
            export namespace Parameters {
                export type ApiKey = Components.Parameters.DeletePet0;
                export type PetId = Components.Parameters.DeletePet1;
            }
            export type Input = {
                readonly apiKey?: Parameters.ApiKey;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace UploadFile {
            export type Body = Components.RequestBodies.UploadFile;
            export namespace Responses {
                export type $200 = Components.Responses.UploadFile200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type PetId = Components.Parameters.UploadFile0;
            }
            export type Input = {
                readonly body?: Body;
                readonly petId: Parameters.PetId;
            };
        }
        export namespace GetInventory {
            export namespace Responses {
                export type $200 = Components.Responses.GetInventory200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PlaceOrder {
            export type Body = Components.RequestBodies.PlaceOrder;
            export namespace Responses {
                export type $200 = Components.Responses.PlaceOrder200<200>;
                export type $400 = Components.Responses.PlaceOrder400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetOrderById {
            export namespace Responses {
                export type $200 = Components.Responses.GetOrderById200<200>;
                export type $400 = Components.Responses.GetOrderById400<400>;
                export type $404 = Components.Responses.GetOrderById404<404>;
            }
            export type Output = Responses.$200 | Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type OrderId = Components.Parameters.GetOrderById0;
            }
            export type Input = {
                readonly orderId: Parameters.OrderId;
            };
        }
        export namespace DeleteOrder {
            export namespace Responses {
                export type $400 = Components.Responses.DeleteOrder400<400>;
                export type $404 = Components.Responses.DeleteOrder404<404>;
            }
            export type Output = Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type OrderId = Components.Parameters.DeleteOrder0;
            }
            export type Input = {
                readonly orderId: Parameters.OrderId;
            };
        }
        export namespace CreateUser {
            export type Body = Components.RequestBodies.CreateUser;
            export namespace Responses {
                export type $default = Components.Responses.CreateUserdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace CreateUsersWithArrayInput {
            export type Body = Components.RequestBodies.UserArray;
            export namespace Responses {
                export type $default = Components.Responses.CreateUsersWithArrayInputdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace CreateUsersWithListInput {
            export type Body = Components.RequestBodies.UserArray;
            export namespace Responses {
                export type $default = Components.Responses.CreateUsersWithListInputdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace LoginUser {
            export namespace Responses {
                export type $200 = Components.Responses.LoginUser200<200>;
                export type $400 = Components.Responses.LoginUser400<400>;
            }
            export type Output = Responses.$200 | Responses.$400;
            export namespace Parameters {
                export type Username = Components.Parameters.LoginUser0;
                export type Password = Components.Parameters.LoginUser1;
            }
            export type Input = {
                readonly username: Parameters.Username;
                readonly password: Parameters.Password;
            };
        }
        export namespace LogoutUser {
            export namespace Responses {
                export type $default = Components.Responses.LogoutUserdefault<default>;
            }
            export type Output = Responses.$default;
            export type Input = {};
        }
        export namespace GetUserByName {
            export namespace Responses {
                export type $200 = Components.Responses.GetUserByName200<200>;
                export type $400 = Components.Responses.GetUserByName400<400>;
                export type $404 = Components.Responses.GetUserByName404<404>;
            }
            export type Output = Responses.$200 | Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type Username = Components.Parameters.GetUserByName0;
            }
            export type Input = {
                readonly username: Parameters.Username;
            };
        }
        export namespace UpdateUser {
            export type Body = Components.RequestBodies.UpdateUser;
            export namespace Responses {
                export type $400 = Components.Responses.UpdateUser400<400>;
                export type $404 = Components.Responses.UpdateUser404<404>;
            }
            export type Output = Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type Username = Components.Parameters.UpdateUser0;
            }
            export type Input = {
                readonly body: Body;
                readonly username: Parameters.Username;
            };
        }
        export namespace DeleteUser {
            export namespace Responses {
                export type $400 = Components.Responses.DeleteUser400<400>;
                export type $404 = Components.Responses.DeleteUser404<404>;
            }
            export type Output = Responses.$400 | Responses.$404;
            export namespace Parameters {
                export type Username = Components.Parameters.DeleteUser0;
            }
            export type Input = {
                readonly username: Parameters.Username;
            };
        }
    }
    export namespace Responses {
        export type UpdatePet400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdatePet404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdatePet405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type AddPet405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type FindPetsByStatus200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatus200Body0 | Components.Schemas.ResponsesfindPetsByStatus200Body1;
        };
        export type FindPetsByStatus400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type FindPetsByTags200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTags200Body0 | Components.Schemas.ResponsesfindPetsByTags200Body1;
        };
        export type FindPetsByTags400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetPetById200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        export type GetPetById400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetPetById404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdatePetWithForm405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeletePet400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UploadFile200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        export type GetInventory200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventory200Body0;
        };
        export type PlaceOrder200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type PlaceOrder400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOrderById200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type GetOrderById400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOrderById404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteOrder400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteOrder404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type CreateUserdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type CreateUsersWithArrayInputdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type CreateUsersWithListInputdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type LoginUser200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly "x-rate-limit": Components.Headers.LoginUser200HeadersXRateLimit;
                readonly "x-expires-after"?: Components.Headers.LoginUser200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUser200Body0 | Components.Schemas.ResponsesloginUser200Body1;
        };
        export type LoginUser400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type LogoutUserdefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUserByName200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        export type GetUserByName400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetUserByName404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdateUser400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type UpdateUser404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUser400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type DeleteUser404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace Pet {
            export import Put = Components.Operations.UpdatePet;
            export import Post = Components.Operations.AddPet;
        }
        export namespace PetfindByStatus {
            export import Get = Components.Operations.FindPetsByStatus;
        }
        export namespace PetfindByTags {
            export import Get = Components.Operations.FindPetsByTags;
        }
        export namespace PetpetId {
            export import Get = Components.Operations.GetPetById;
            export import Post = Components.Operations.UpdatePetWithForm;
            export import Delete = Components.Operations.DeletePet;
        }
        export namespace PetpetIduploadImage {
            export import Post = Components.Operations.UploadFile;
        }
        export namespace Storeinventory {
            export import Get = Components.Operations.GetInventory;
        }
        export namespace Storeorder {
            export import Post = Components.Operations.PlaceOrder;
        }
        export namespace StoreorderorderId {
            export import Get = Components.Operations.GetOrderById;
            export import Delete = Components.Operations.DeleteOrder;
        }
        export namespace User {
            export import Post = Components.Operations.CreateUser;
        }
        export namespace UsercreateWithArray {
            export import Post = Components.Operations.CreateUsersWithArrayInput;
        }
        export namespace UsercreateWithList {
            export import Post = Components.Operations.CreateUsersWithListInput;
        }
        export namespace Userlogin {
            export import Get = Components.Operations.LoginUser;
        }
        export namespace Userlogout {
            export import Get = Components.Operations.LogoutUser;
        }
        export namespace Userusername {
            export import Get = Components.Operations.GetUserByName;
            export import Put = Components.Operations.UpdateUser;
            export import Delete = Components.Operations.DeleteUser;
        }
    }
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithForm = Components.Schemas.Body;
        export type UploadFile = Components.Schemas.Body1;
        export type PlaceOrder = Components.Schemas.Order;
        export type CreateUser = Components.Schemas.User;
        export type UpdateUser = Components.Schemas.User;
    }
    export namespace Parameters {
        export type FindPetsByStatus0 = ("available" | "pending" | "sold")[];
        export type FindPetsByTags0 = string[];
        export type GetPetById0 = number;
        export type UpdatePetWithForm0 = number;
        export type DeletePet0 = string;
        export type DeletePet1 = number;
        export type UploadFile0 = number;
        export type GetOrderById0 = number;
        export type DeleteOrder0 = string;
        export type LoginUser0 = string;
        export type LoginUser1 = string;
        export type GetUserByName0 = string;
        export type UpdateUser0 = string;
        export type DeleteUser0 = string;
    }
    export namespace Headers {
        export type LoginUser200HeadersXRateLimit = number;
        export type LoginUser200HeadersXExpiresAfter = string;
    }
    export namespace Schemas {
        export type Order = {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: Enums.OrderStatus;
            complete?: boolean;
        };
        export type Category = {
            id?: number;
            name?: string;
        };
        export type User = {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        export type Tag = {
            id?: number;
            name?: string;
        };
        export type Pet = {
            id?: number;
            category?: Components.Schemas.Category;
            name: string;
            photoUrls: string[];
            tags?: Components.Schemas.Tag[];
            status?: Enums.PetStatusInTheStore;
        };
        export type ApiResponse = {
            code?: number;
            type?: string;
            message?: string;
        };
        export type Body = {
            name?: string;
            status?: string;
        };
        export type Body1 = {
            additionalMetadata?: string;
            file?: string;
        };
        export type RequestBodiesUserArrayBody0 = Components.Schemas.User[];
        export type ResponsesfindPetsByStatus200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByStatus200Body1 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTags200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTags200Body1 = Components.Schemas.Pet[];
        export type ResponsesgetInventory200Body0 = {
            [pattern: string]: unknown;
        };
        export type ResponsesloginUser200Body0 = string;
        export type ResponsesloginUser200Body1 = string;
    }
}
export namespace AnotherAPI {
    export import UpdatePet = Components.Operations.UpdatePet;
    export import AddPet = Components.Operations.AddPet;
    export import FindPetsByStatus = Components.Operations.FindPetsByStatus;
    export import FindPetsByTags = Components.Operations.FindPetsByTags;
    export import GetPetById = Components.Operations.GetPetById;
    export import UpdatePetWithForm = Components.Operations.UpdatePetWithForm;
    export import DeletePet = Components.Operations.DeletePet;
    export import UploadFile = Components.Operations.UploadFile;
    export import GetInventory = Components.Operations.GetInventory;
    export import PlaceOrder = Components.Operations.PlaceOrder;
    export import GetOrderById = Components.Operations.GetOrderById;
    export import DeleteOrder = Components.Operations.DeleteOrder;
    export import CreateUser = Components.Operations.CreateUser;
    export import CreateUsersWithArrayInput = Components.Operations.CreateUsersWithArrayInput;
    export import CreateUsersWithListInput = Components.Operations.CreateUsersWithListInput;
    export import LoginUser = Components.Operations.LoginUser;
    export import LogoutUser = Components.Operations.LogoutUser;
    export import GetUserByName = Components.Operations.GetUserByName;
    export import UpdateUser = Components.Operations.UpdateUser;
    export import DeleteUser = Components.Operations.DeleteUser;
}
export namespace Enums {
    export enum OrderStatus {
        Placed = "placed",
        Approved = "approved",
        Delivered = "delivered"
    }
    export enum PetStatusInTheStore {
        Available = "available",
        Pending = "pending",
        Sold = "sold"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace PostWebhookNewPet {
            export type Body = Components.RequestBodies.PostWebhookNewPet;
            export namespace Responses {
                export type $200 = Components.Responses.PostWebhookNewPet200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body?: Body;
            };
        }
    }
    export namespace Responses {
        export type PostWebhookNewPet200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace WebhookNewPet {
            export import Post = Components.Operations.PostWebhookNewPet;
        }
    }
    export namespace RequestBodies {
        export type PostWebhookNewPet = Components.Schemas.Pet;
    }
    export namespace Schemas {
        export type Pet = {
            id: number;
            name: string;
            tag?: string;
        };
    }
}
declare namespace WebHooks {
    export type NewPet = Components.PathItems.WebhookNewPet;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace PostWebhookNewPet {
            export type Body = Components.RequestBodies.PostWebhookNewPet;
            export namespace Responses {
                export type $200 = Components.Responses.PostWebhookNewPet200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body?: Body;
            };
        }
    }
    export namespace Responses {
        export type PostWebhookNewPet200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace WebhookNewPet {
            export import Post = Components.Operations.PostWebhookNewPet;
        }
    }
    export namespace RequestBodies {
        export type PostWebhookNewPet = Components.Schemas.Pet;
    }
    export namespace Schemas {
        export type Pet = {
            id: number;
            name: string;
            tag?: string;
        };
    }
}
declare namespace WebHooks {
    export type NewPet = Components.PathItems.WebhookNewPet;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace PostWebhookNewPet {
            export type Body = Components.RequestBodies.PostWebhookNewPet;
            export namespace Responses {
                export type $200 = Components.Responses.PostWebhookNewPet200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body?: Body;
            };
        }
    }
    export namespace Responses {
        export type PostWebhookNewPet200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace PathItems {
        export namespace WebhookNewPet {
            export import Post = Components.Operations.PostWebhookNewPet;
        }
    }
    export namespace RequestBodies {
        export type PostWebhookNewPet = Components.Schemas.Pet;
    }
    export namespace Schemas {
        export type Pet = {
            id: number;
            name: string;
            tag?: string;
        };
    }
}
export namespace WebHooks {
    export type NewPet = Components.PathItems.WebhookNewPet;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $200 = Components.Responses.GetDelay200<200>;
                export type $204 = Components.Responses.GetDelay204<204>;
            }
            export type Output = Responses.$200 | Responses.$204;
            export namespace Parameters {
                export type Duration = Components.Parameters.Duration;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
        export namespace GetDiagnostic {
            export namespace Responses {
                export type $200 = Components.Responses.Diagnostic<200>;
                export type $204 = Components.Responses.Diagnostic<204>;
            }
            export type Output = Responses.$200 | Responses.$204;
            export type Input = {};
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.GetOpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetParameters {
            export namespace Responses {
                export type $200 = Components.Responses.GetParameters200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type AHeader = Components.Parameters.GetParameters3;
                export type AMultiHeader = Components.Parameters.GetParameters4;
                export type PathParam1 = Components.Parameters.PathParam1;
                export type PathParam2 = Components.Parameters.PathParam2;
                export type QueryParam = Components.Parameters.QueryParam;
            }
            export type Input = {
                readonly aHeader?: Parameters.AHeader;
                readonly aMultiHeader?: Parameters.AMultiHeader;
                readonly pathParam1: Parameters.PathParam1;
                readonly pathParam2: Parameters.PathParam2;
                readonly queryParam: Parameters.QueryParam;
            };
        }
        export namespace GetTime {
            export namespace Responses {
                export type $200 = Components.Responses.GetTime200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PutEcho {
            export type Body = Components.RequestBodies.Echo;
            export namespace Responses {
                export type $200 = Components.Responses.Echo<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetPing {
            export type Body = Components.RequestBodies.GetPing;
            export namespace Responses {
                export type $200 = Components.Responses.GetPing200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
    }
    export namespace Responses {
        export type Diagnostic<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnosticBody0;
        };
        export type Echo<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type GetDelay200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetDelay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPI200Body0;
        };
        export type GetParameters200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParameters200Body0;
        };
        export type GetTime200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type GetPing200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPing200Body0;
        };
    }
    export namespace Parameters {
        export type Duration = number;
        export type PathParam1 = number;
        export type PathParam2 = string;
        export type QueryParam = string[];
        export type GetParameters3 = boolean;
        export type GetParameters4 = number[];
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
        export namespace Diagnostic {
            export import Get = Components.Operations.GetDiagnostic;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace PathParam1PathParam2 {
            export import Get = Components.Operations.GetParameters;
        }
        export namespace Time {
            export import Get = Components.Operations.GetTime;
        }
        export namespace Echo {
            export import Put = Components.Operations.PutEcho;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type Echo = Components.Schemas.Echo;
        export type GetPing = Components.Schemas.Echo;
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type ResponsesDiagnosticBody0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesgetOpenAPI200Body0 = {};
        export type ResponsesgetParameters200Body0 = {
            aHeader?: boolean;
            aMultiHeader?: number[];
            pathParam1?: number;
            pathParam2?: string;
            queryParam?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesgetPing200Body0 = {
            pong?: "pong";
        };
    }
}
declare namespace API {
    export import GetDelay = Components.Operations.GetDelay;
    export import GetDiagnostic = Components.Operations.GetDiagnostic;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetParameters = Components.Operations.GetParameters;
    export import GetTime = Components.Operations.GetTime;
    export import PutEcho = Components.Operations.PutEcho;
    export import GetPing = Components.Operations.GetPing;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $200 = Components.Responses.GetDelay200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type Duration = Components.Parameters.Duration;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
        export namespace GetDiagnostic {
            export namespace Responses {
                export type $200 = Components.Responses.Diagnostic<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.GetOpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetParameters {
            export namespace Responses {
                export type $200 = Components.Responses.GetParameters200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type AHeader = Components.Parameters.GetParameters3;
                export type AMultiHeader = Components.Parameters.GetParameters4;
                export type PathParam1 = Components.Parameters.PathParam1;
                export type PathParam2 = Components.Parameters.PathParam2;
                export type QueryParam = Components.Parameters.QueryParam;
            }
            export type Input = {
                readonly aHeader?: Parameters.AHeader;
                readonly aMultiHeader?: Parameters.AMultiHeader;
                readonly pathParam1: Parameters.PathParam1;
                readonly pathParam2: Parameters.PathParam2;
                readonly queryParam: Parameters.QueryParam;
            };
        }
        export namespace GetTime {
            export namespace Responses {
                export type $200 = Components.Responses.GetTime200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PutEcho {
            export type Body = Components.RequestBodies.Echo;
            export namespace Responses {
                export type $200 = Components.Responses.Echo<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetPing {
            export type Body = Components.RequestBodies.GetPing;
            export namespace Responses {
                export type $200 = Components.Responses.GetPing200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
    }
    export namespace Responses {
        export type Diagnostic<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnosticBody0;
        };
        export type Echo<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type GetDelay200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPI200Body0;
        };
        export type GetParameters200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParameters200Body0;
        };
        export type GetTime200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type GetPing200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPing200Body0;
        };
    }
    export namespace Parameters {
        export type Duration = number;
        export type PathParam1 = number;
        export type PathParam2 = string;
        export type QueryParam = string[];
        export type GetParameters3 = boolean;
        export type GetParameters4 = number[];
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
        export namespace Diagnostic {
            export import Get = Components.Operations.GetDiagnostic;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace PathParam1PathParam2 {
            export import Get = Components.Operations.GetParameters;
        }
        export namespace Time {
            export import Get = Components.Operations.GetTime;
        }
        export namespace Echo {
            export import Put = Components.Operations.PutEcho;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type Echo = Components.Schemas.Echo;
        export type GetPing = Components.Schemas.Echo;
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type ResponsesDiagnosticBody0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesgetOpenAPI200Body0 = {};
        export type ResponsesgetParameters200Body0 = {
            aHeader?: boolean;
            aMultiHeader?: number[];
            pathParam1?: number;
            pathParam2?: string;
            queryParam?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesgetPing200Body0 = {
            pong?: "pong";
        };
    }
}
declare namespace API {
    export import GetDelay = Components.Operations.GetDelay;
    export import GetDiagnostic = Components.Operations.GetDiagnostic;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetParameters = Components.Operations.GetParameters;
    export import GetTime = Components.Operations.GetTime;
    export import PutEcho = Components.Operations.PutEcho;
    export import GetPing = Components.Operations.GetPing;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $200 = Components.Responses.GetDelay200<200>;
                export type $204 = Components.Responses.GetDelay204<204>;
            }
            export type Output = Responses.$200 | Responses.$204;
            export namespace Parameters {
                export type Duration = Components.Parameters.Duration;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
        export namespace GetDiagnostic {
            export namespace Responses {
                export type $200 = Components.Responses.Diagnostic<200>;
                export type $204 = Components.Responses.Diagnostic<204>;
            }
            export type Output = Responses.$200 | Responses.$204;
            export type Input = {};
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.GetOpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetParameters {
            export namespace Responses {
                export type $200 = Components.Responses.GetParameters200<200>;
            }
            export type Output = Responses.$200;
            export namespace Parameters {
                export type AHeader = Components.Parameters.GetParameters3;
                export type AMultiHeader = Components.Parameters.GetParameters4;
                export type PathParam1 = Components.Parameters.PathParam1;
                export type PathParam2 = Components.Parameters.PathParam2;
                export type QueryParam = Components.Parameters.QueryParam;
            }
            export type Input = {
                readonly aHeader?: Parameters.AHeader;
                readonly aMultiHeader?: Parameters.AMultiHeader;
                readonly pathParam1: Parameters.PathParam1;
                readonly pathParam2: Parameters.PathParam2;
                readonly queryParam: Parameters.QueryParam;
            };
        }
        export namespace GetTime {
            export namespace Responses {
                export type $200 = Components.Responses.GetTime200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PutEcho {
            export type Body = Components.RequestBodies.Echo;
            export namespace Responses {
                export type $200 = Components.Responses.Echo<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetPing {
            export type Body = Components.RequestBodies.GetPing;
            export namespace Responses {
                export type $200 = Components.Responses.GetPing200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
    }
    export namespace Responses {
        export type Diagnostic<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnosticBody0;
        };
        export type Echo<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type GetDelay200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetDelay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type GetOpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPI200Body0;
        };
        export type GetParameters200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParameters200Body0;
        };
        export type GetTime200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type GetPing200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPing200Body0;
        };
    }
    export namespace Parameters {
        export type Duration = number;
        export type PathParam1 = number;
        export type PathParam2 = string;
        export type QueryParam = string[];
        export type GetParameters3 = boolean;
        export type GetParameters4 = number[];
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
        export namespace Diagnostic {
            export import Get = Components.Operations.GetDiagnostic;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace PathParam1PathParam2 {
            export import Get = Components.Operations.GetParameters;
        }
        export namespace Time {
            export import Get = Components.Operations.GetTime;
        }
        export namespace Echo {
            export import Put = Components.Operations.PutEcho;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type Echo = Components.Schemas.Echo;
        export type GetPing = Components.Schemas.Echo;
    }
    export namespace Schemas {
        export type TimeSchema = {
            currentDate?: string;
        };
        export type Echo = {
            echo: string;
        };
        export type ResponsesDiagnosticBody0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesgetOpenAPI200Body0 = {};
        export type ResponsesgetParameters200Body0 = {
            aHeader?: boolean;
            aMultiHeader?: number[];
            pathParam1?: number;
            pathParam2?: string;
            queryParam?: string[];
        };
        export type ResponsesgetPing200Body0 = {
            pong?: "pong";
        };
    }
}
export namespace AnotherAPI {
    export import GetDelay = Components.Operations.GetDelay;
    export import GetDiagnostic = Components.Operations.GetDiagnostic;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetParameters = Components.Operations.GetParameters;
    export import GetTime = Components.Operations.GetTime;
    export import PutEcho = Components.Operations.PutEcho;
    export import GetPing = Components.Operations.GetPing;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $204 = Components.Responses.Delay204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type Duration = Components.Parameters.DurationClone;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
        export namespace GetDiagnostic {
            export namespace Responses {
                export type $200 = Components.Responses.Diagnostic200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.OpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetParameters {
            export namespace Responses {
                export type $204 = Components.Responses.Params204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type AHeader = Components.Parameters.GetParameters2;
                export type PathParam1 = Components.Parameters.PathParam1;
                export type PathParam2 = Components.Parameters.PathParam2;
            }
            export type Input = {
                readonly aHeader?: Parameters.AHeader;
                readonly pathParam1: Parameters.PathParam1;
                readonly pathParam2: Parameters.PathParam2;
            };
        }
        export namespace GetTime {
            export namespace Responses {
                export type $200 = Components.Responses.Time200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PutEcho {
            export type Body = Components.RequestBodies.EchoBody;
            export namespace Responses {
                export type $200 = Components.Responses.Echo200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetPing {
            export namespace Responses {
                export type $200 = Components.Responses.Ping200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
    }
    export namespace Responses {
        export type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        export type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        export type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
        export type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
    }
    export namespace Parameters {
        export type DurationClone = Components.Parameters.Duration;
        export type Duration = number;
        export type PathParam1 = number;
        export type PathParam2 = Components.Schemas.Strings;
        export type GetParameters2 = boolean;
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
        export namespace Diag {
            export import Get = Components.Operations.GetDiagnostic;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace PathParam1PathParam2 {
            export import Get = Components.Operations.GetParameters;
        }
        export namespace Time {
            export import Get = Components.Operations.GetTime;
        }
        export namespace Echo {
            export import Put = Components.Operations.PutEcho;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type EchoBodyClone = Components.RequestBodies.EchoBody;
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesDiagnostic200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesOpenAPI200Body0 = {};
        export type ResponsesParams204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesPing200Body0 = {
            pong?: "pong";
        };
    }
}
declare namespace API {
    export import GetDelay = Components.Operations.GetDelay;
    export import GetDiagnostic = Components.Operations.GetDiagnostic;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetParameters = Components.Operations.GetParameters;
    export import GetTime = Components.Operations.GetTime;
    export import PutEcho = Components.Operations.PutEcho;
    export import GetPing = Components.Operations.GetPing;
}
declare namespace Enums {
    export enum XDelayPrecision {
        Ns = "ns",
        Ms = "ms",
        S = "s"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export type Output = unknown;
            export namespace Parameters {
                export type Duration = Components.Parameters.DurationClone;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
        export namespace GetDiagnostic {
            export namespace Responses {
                export type $200 = Components.Responses.Diagnostic200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.OpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetParameters {
            export type Output = unknown;
            export namespace Parameters {
                export type AHeader = Components.Parameters.GetParameters2;
                export type PathParam1 = Components.Parameters.PathParam1;
                export type PathParam2 = Components.Parameters.PathParam2;
            }
            export type Input = {
                readonly aHeader?: Parameters.AHeader;
                readonly pathParam1: Parameters.PathParam1;
                readonly pathParam2: Parameters.PathParam2;
            };
        }
        export namespace GetTime {
            export namespace Responses {
                export type $200 = Components.Responses.Time200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PutEcho {
            export type Body = Components.RequestBodies.EchoBody;
            export namespace Responses {
                export type $200 = Components.Responses.Echo200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetPing {
            export namespace Responses {
                export type $200 = Components.Responses.Ping200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
    }
    export namespace Parameters {
        export type DurationClone = Components.Parameters.Duration;
        export type Duration = number;
        export type PathParam1 = number;
        export type PathParam2 = Components.Schemas.Strings;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        export type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        export type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
        export type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
        export namespace Diag {
            export import Get = Components.Operations.GetDiagnostic;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace PathParam1PathParam2 {
            export import Get = Components.Operations.GetParameters;
        }
        export namespace Time {
            export import Get = Components.Operations.GetTime;
        }
        export namespace Echo {
            export import Put = Components.Operations.PutEcho;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type EchoBodyClone = Components.RequestBodies.EchoBody;
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Headers {
        export type XDelayPrecision = "ns" | "ms" | "s";
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesDiagnostic200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesOpenAPI200Body0 = {};
        export type ResponsesParams204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesPing200Body0 = {
            pong?: "pong";
        };
    }
}
declare namespace API {
    export import GetDelay = Components.Operations.GetDelay;
    export import GetDiagnostic = Components.Operations.GetDiagnostic;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetParameters = Components.Operations.GetParameters;
    export import GetTime = Components.Operations.GetTime;
    export import PutEcho = Components.Operations.PutEcho;
    export import GetPing = Components.Operations.GetPing;
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and generateUnusedSchemas option to true 1`] = `
"export namespace Components {
    export namespace Operations {
        export namespace GetDelay {
            export namespace Responses {
                export type $204 = Components.Responses.Delay204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type Duration = Components.Parameters.DurationClone;
            }
            export type Input = {
                readonly duration: Parameters.Duration;
            };
        }
        export namespace GetDiagnostic {
            export namespace Responses {
                export type $200 = Components.Responses.Diagnostic200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetOpenAPI {
            export namespace Responses {
                export type $200 = Components.Responses.OpenAPI200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace GetParameters {
            export namespace Responses {
                export type $204 = Components.Responses.Params204<204>;
            }
            export type Output = Responses.$204;
            export namespace Parameters {
                export type AHeader = Components.Parameters.GetParameters2;
                export type PathParam1 = Components.Parameters.PathParam1;
                export type PathParam2 = Components.Parameters.PathParam2;
            }
            export type Input = {
                readonly aHeader?: Parameters.AHeader;
                readonly pathParam1: Parameters.PathParam1;
                readonly pathParam2: Parameters.PathParam2;
            };
        }
        export namespace GetTime {
            export namespace Responses {
                export type $200 = Components.Responses.Time200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
        export namespace PutEcho {
            export type Body = Components.RequestBodies.EchoBody;
            export namespace Responses {
                export type $200 = Components.Responses.Echo200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {
                readonly body: Body;
            };
        }
        export namespace GetPing {
            export namespace Responses {
                export type $200 = Components.Responses.Ping200<200>;
            }
            export type Output = Responses.$200;
            export type Input = {};
        }
    }
    export namespace Responses {
        export type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        export type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        export type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
        export type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
    }
    export namespace Parameters {
        export type DurationClone = Components.Parameters.Duration;
        export type Duration = number;
        export type PathParam1 = number;
        export type PathParam2 = Components.Schemas.Strings;
        export type GetParameters2 = boolean;
    }
    export namespace PathItems {
        export namespace Delay {
            export import Get = Components.Operations.GetDelay;
        }
        export namespace Diag {
            export import Get = Components.Operations.GetDiagnostic;
        }
        export namespace OpenApi {
            export import Get = Components.Operations.GetOpenAPI;
        }
        export namespace PathParam1PathParam2 {
            export import Get = Components.Operations.GetParameters;
        }
        export namespace Time {
            export import Get = Components.Operations.GetTime;
        }
        export namespace Echo {
            export import Put = Components.Operations.PutEcho;
        }
        export namespace Ping {
            export import Get = Components.Operations.GetPing;
        }
    }
    export namespace RequestBodies {
        export type EchoBodyClone = Components.RequestBodies.EchoBody;
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type TimeSchema = {
            currentDate?: string;
        };
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesDiagnostic200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesOpenAPI200Body0 = {};
        export type ResponsesParams204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type ResponsesPing200Body0 = {
            pong?: "pong";
        };
    }
}
export namespace AnotherAPI {
    export import GetDelay = Components.Operations.GetDelay;
    export import GetDiagnostic = Components.Operations.GetDiagnostic;
    export import GetOpenAPI = Components.Operations.GetOpenAPI;
    export import GetParameters = Components.Operations.GetParameters;
    export import GetTime = Components.Operations.GetTime;
    export import PutEcho = Components.Operations.PutEcho;
    export import GetPing = Components.Operations.GetPing;
}
export namespace Enums {
    export enum XDelayPrecision {
        Ns = "ns",
        Ms = "ms",
        S = "s"
    }
}"
`;
