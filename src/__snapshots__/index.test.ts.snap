// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with array_of_things.json 1`] = `
"declare type Main = {
    fruits?: string[];
    vegetables?: definitions["veggie"][];
};
declare interface definitions {
    veggie: {
        veggieName: string;
        veggieLike: boolean;
    };
}"
`;

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with wierd_schema.json 1`] = `"declare type Main = object | null;"`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with callback_example.json 1`] = `
"declare interface paths {
    "/streams": {
        post: operations["PathsStreams"];
    };
}
declare interface operations {
    ComponentsCallbacksOnValidatedRequestqueryqueryUrl: {
        responses: {
            201: {
                headers: {
                    "x-test"?: string;
                };
            };
        };
    };
    PathsStreams: {
        callbacks: {
            StreamValidated: components["callbacks"]["OnValidatedClone"];
            onData: {
                "{$request.query.callbackUrl}/data": {
                    post: operations["OperationsPathsStreamsCallbacksOnDataRequestquerycallbackUrldata"];
                };
            };
        };
        responses: {
            201: {
                body: {
                    subscriptionId: string;
                };
                headers: {
                    "x-test-3"?: components["headers"]["x-test-2"];
                };
            };
        };
        parameters: {
            query: {
                callbackUrl: string;
            };
        };
    };
    OperationsPathsStreamsCallbacksOnDataRequestquerycallbackUrldata: {
        requestBody?: {
            timestamp?: string;
            userData?: string;
        };
        responses: {
            202: object;
            204: object;
        };
    };
}
declare interface components {
    callbacks: {
        OnValidated: {
            "{$request.query.queryUrl}": {
                put: operations["ComponentsCallbacksOnValidatedRequestqueryqueryUrl"];
            };
        };
        OnValidatedClone: components["callbacks"]["OnValidated"];
    };
    headers: {
        "x-test-2": string;
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with callback_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface paths {
    "/streams": {
        post: operations["PathsStreams"];
    };
}
declare interface operations {
    ComponentsCallbacksOnValidatedRequestqueryqueryUrl: {
        responses: {
            201: {
                headers: {
                    "x-test"?: string;
                };
            };
        };
    };
    PathsStreams: {
        callbacks: {
            StreamValidated: components["callbacks"]["OnValidatedClone"];
            onData: {
                "{$request.query.callbackUrl}/data": {
                    post: operations["OperationsPathsStreamsCallbacksOnDataRequestquerycallbackUrldata"];
                };
            };
        };
        responses: {
            201: {
                body: {
                    subscriptionId: string;
                };
                headers: {
                    "x-test-3"?: components["headers"]["x-test-2"];
                };
            };
        };
        parameters: {
            query: {
                callbackUrl: string;
            };
        };
    };
    OperationsPathsStreamsCallbacksOnDataRequestquerycallbackUrldata: {
        requestBody?: {
            timestamp?: string;
            userData?: string;
        };
        responses: {
            202: object;
        };
    };
}
declare interface components {
    callbacks: {
        OnValidated: {
            "{$request.query.queryUrl}": {
                put: operations["ComponentsCallbacksOnValidatedRequestqueryqueryUrl"];
            };
        };
        OnValidatedClone: components["callbacks"]["OnValidated"];
    };
    headers: {
        "x-test-2": string;
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with callback_example.json and generateUnusedSchemas option to true 1`] = `
"export interface paths {
    "/streams": {
        post: operations["PathsStreams"];
    };
}
export interface operations {
    ComponentsCallbacksOnValidatedRequestqueryqueryUrl: {
        responses: {
            201: {
                headers: {
                    "x-test"?: string;
                };
            };
        };
    };
    PathsStreams: {
        callbacks: {
            StreamValidated: components["callbacks"]["OnValidatedClone"];
            onData: {
                "{$request.query.callbackUrl}/data": {
                    post: operations["OperationsPathsStreamsCallbacksOnDataRequestquerycallbackUrldata"];
                };
            };
        };
        responses: {
            201: {
                body: {
                    subscriptionId: string;
                };
                headers: {
                    "x-test-3"?: components["headers"]["x-test-2"];
                };
            };
        };
        parameters: {
            query: {
                callbackUrl: string;
            };
        };
    };
    OperationsPathsStreamsCallbacksOnDataRequestquerycallbackUrldata: {
        requestBody?: {
            timestamp?: string;
            userData?: string;
        };
        responses: {
            202: object;
            204: object;
        };
    };
}
export interface components {
    callbacks: {
        OnValidated: {
            "{$request.query.queryUrl}": {
                put: operations["ComponentsCallbacksOnValidatedRequestqueryqueryUrl"];
            };
        };
        OnValidatedClone: components["callbacks"]["OnValidated"];
    };
    headers: {
        "x-test-2": string;
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json 1`] = `
"declare interface paths {
    "/alerts/{alertId}": {
        "delete": operations["deleteAlert"];
    };
    "/applications/{applicationId}": {
        "delete": operations["deleteApplication"];
    };
    "/interventions/{interventionId}": {
        "delete": operations["deleteIntervention"];
    };
    "/projects/{projectId}": {
        "delete": operations["deleteProject"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}": {
        "delete": operations["deleteUserOrganisationAlert"];
        "get": operations["getUserOrganisationAlert"];
        put: operations["putUserOrganisationAlert"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/attachments/{attachmentId}": {
        "delete": operations["deleteUserOrganisationAlertAttachment"];
        put: operations["putUserOrganisationAlertAttachment"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/images/{imageId}": {
        "delete": operations["deleteUserOrganisationAlertImage"];
        put: operations["putUserOrganisationAlertImage"];
    };
    "/users/{userId}/organisations/{organisationId}/applications/{applicationId}": {
        "delete": operations["deleteUserOrganisationApplication"];
        put: operations["putUserOrganisationApplication"];
    };
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}": {
        "delete": operations["deleteUserOrganisationIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}/images/{imageId}": {
        "delete": operations["deleteUserOrganisationInterventionImage"];
        put: operations["putUserOrganisationInterventionImage"];
    };
    "/users/{userId}/organisations/{organisationId}/memberships/{collaboratorId}": {
        "delete": operations["deleteUserOrganisationMembership"];
    };
    "/users/{userId}/organisations/{organisationId}/projects/{projectId}": {
        "delete": operations["deleteUserOrganisationProject"];
        put: operations["putUserOrganisationProject"];
    };
    "/users/{userId}/organisations/{organisationId}/sensors/{sensorId}/series/{valueName}": {
        "delete": operations["deleteUserOrganisationSensorSeries"];
    };
    "/alerts/stats": {
        "get": operations["getAlertsStats"];
    };
    "/auth/profile": {
        "get": operations["getAuthProfile"];
    };
    "/me": {
        "get": operations["getMySelf"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/organisations/{organisationId}/factories/{factoryId}": {
        "get": operations["getOrganisationFactory"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/alerts/stats": {
        "get": operations["getOrganisationFactoryAlertsStats"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
        "get": operations["getOrganisationFactoryAsset"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/assets": {
        "get": operations["getOrganisationFactoryAssets"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/labels": {
        "get": operations["getOrganisationFactoryDataLabels"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/events": {
        "get": operations["getOrganisationFactoryEvents"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
        "get": operations["getOrganisationFactoryIntervention"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/interventions": {
        "get": operations["getOrganisationFactoryInterventions"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/reports": {
        "get": operations["getOrganisationFactoryReports"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
        "get": operations["getOrganisationFactorySensor"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/sensors": {
        "get": operations["getOrganisationFactorySensors"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/trends": {
        "get": operations["getOrganisationFactoryTrends"];
    };
    "/organisations/{organisationId}/projects/{projectId}": {
        "get": operations["getOrganisationProject"];
    };
    "/organisations/{organisationId}/projects": {
        "get": operations["getOrganisationProjects"];
    };
    "/organisations/{organisationId}/sensors/aggregateData": {
        "get": operations["getOrganisationSensorsAggregateData"];
    };
    "/organisations/{organisationId}/sensors/aggregateEventData": {
        "get": operations["getOrganisationSensorsAggregateEventData"];
    };
    "/organisations/{organisationId}/sensors/aggregateEventRangeData": {
        "get": operations["getOrganisationSensorsAggregateEventRangeData"];
    };
    "/organisations/{organisationId}/sensors/data": {
        "get": operations["getOrganisationSensorsData"];
    };
    "/organisations/{organisationId}/sensors/eventData": {
        "get": operations["getOrganisationSensorsEventData"];
    };
    "/organisations/{organisationId}/sensors/eventRangeDataSchema": {
        "get": operations["getOrganisationSensorsEventRangeData"];
    };
    "/organisations/{organisationId}/search": {
        "get": operations["getOrganisationUniversalSearch"];
    };
    "/reports/{reportId}": {
        put: operations["putReport"];
    };
    "/search": {
        "get": operations["getUniversalSearch"];
    };
    "/users/{userId}": {
        "get": operations["getUser"];
        put: operations["putUser"];
    };
    "/users/{userId}/factories": {
        "get": operations["getUserFactories"];
    };
    "/users/{userId}/notifications": {
        "get": operations["getUserNotifications"];
    };
    "/users/{userId}/organisations/{organisationId}": {
        "get": operations["getUserOrganisation"];
        put: operations["putUserOrganisation"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts": {
        "get": operations["getUserOrganisationAlerts"];
    };
    "/users/{userId}/organisations/{organisationId}/applications": {
        "get": operations["getUserOrganisationApplications"];
        post: operations["postUserOrganisationApplication"];
    };
    "/users/{userId}/organisations/{organisationId}/factories": {
        "get": operations["getUserOrganisationFactories"];
        post: operations["postUserOrganisationFactory"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences": {
        "get": operations["getUserOrganisationFactoryPreferences"];
    };
    "/users/{userId}/organisations/{organisationId}/tasks": {
        "get": operations["getUserOrganisationTasks"];
    };
    "/users/{userId}/organisations/{organisationId}/users": {
        "get": operations["getUserOrganisationUsers"];
    };
    "/users/{userId}/organisations": {
        "get": operations["getUserOrganisations"];
        post: operations["postUserOrganisation"];
    };
    "/users": {
        post: operations["postUser"];
    };
    "/auth/login": {
        post: operations["postAuthLogin"];
    };
    "/auth/logout": {
        post: operations["postAuthLogout"];
    };
    "/auth/changePassword": {
        post: operations["postAuthPasswordChange"];
    };
    "/auth/refresh": {
        post: operations["postAuthRefresh"];
    };
    "/auth/verify": {
        post: operations["postAuthVerify"];
    };
    "/oauth2/token": {
        post: operations["postOAuth2Token"];
    };
    "/organisations/{organisationId}/data/{projectCode}": {
        post: operations["postOrganisationData"];
    };
    "/oauth2/reset": {
        post: operations["postPasswordChangeRequest"];
    };
    "/users/{userId}/invitations/response": {
        post: operations["postUserInvitationResponse"];
    };
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors": {
        post: operations["postUserOrganisationAssetSensor"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets": {
        post: operations["postUserOrganisationFactoryAsset"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions": {
        post: operations["postUserOrganisationFactoryIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors": {
        post: operations["postUserOrganisationFactorySensor"];
    };
    "/users/{userId}/organisations/{organisationId}/invitations": {
        post: operations["postUserOrganisationInvitation"];
    };
    "/users/{userId}/organisations/{organisationId}/invitation/followup": {
        post: operations["postUserOrganisationInvitationFollowup"];
    };
    "/organisations/{organisationId}/users/{userId}/notifications/{notificationId}/read": {
        post: operations["postUserOrganisationNotificationRead"];
    };
    "/users/{userId}/organisations/{organisationId}/projects": {
        post: operations["postUserOrganisationProject"];
    };
    "/attachments/{attachmentId}": {
        put: operations["putAttachment"];
    };
    "/images/{imageId}": {
        put: operations["putImage"];
    };
    "/notifications/{notificationId}": {
        put: operations["putNotificationEvent"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/events/{eventId}": {
        put: operations["putOrganisationFactoryEvent"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/feedback": {
        put: operations["putUserOrganisationAlertFeedback"];
    };
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors/{sensorId}": {
        put: operations["putUserOrganisationAssetSensor"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}": {
        put: operations["putUserOrganisationFactory"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
        put: operations["putUserOrganisationFactoryAsset"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
        put: operations["putUserOrganisationFactoryIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences/{level}": {
        put: operations["putUserOrganisationFactoryPreferences"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
        put: operations["putUserOrganisationFactorySensor"];
    };
    "/oauth2/authorize": {
        "get": operations["getOAuth2Authorize"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
declare interface operations {
    deleteAlert: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteApplication: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteIntervention: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteProject: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlert: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationAlert: {
        responses: {
            200: components["responses"]["AlertItemResponse"];
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlert: {
        requestBody: components["schemas"]["AlertModel"];
        responses: {
            201: components["responses"]["AlertItemResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlertAttachment: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                attachmentId: components["parameters"]["attachmentId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertAttachment: {
        requestBody: components["requestBodies"]["Attachment"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                attachmentId: components["parameters"]["attachmentId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["AttachmentFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlertImage: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationApplication: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationApplication: {
        requestBody: components["schemas"]["ApplicationModel"];
        responses: {
            201: {
                body: components["schemas"]["ApplicationItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationIntervention: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationInterventionImage: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationInterventionImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationMembership: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                collaboratorId: string;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationProject: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationProject: {
        requestBody: components["schemas"]["ProjectModel"];
        responses: {
            201: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationSensorSeries: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                sensorId: components["parameters"]["sensorId"];
                valueName: components["parameters"]["valueName"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getAlertsStats: {
        responses: {
            200: {
                body: components["schemas"]["AlertsStats"];
            };
        };
        parameters: {
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getAuthProfile: {
        responses: {
            200: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            headers: {
                cookie?: components["parameters"]["cookie"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getMySelf: {
        responses: {
            302: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOpenAPI: {
        responses: {
            200: {
                body: object;
            };
        };
        parameters: {
            query: {
                mutedTags?: string[];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactory: {
        responses: {
            200: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAlertsStats: {
        responses: {
            200: {
                body: components["schemas"]["AlertsStat"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAsset: {
        responses: {
            200: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                assetId: components["parameters"]["assetId"];
            };
            query: {
                includeChildrenIds: components["parameters"]["IncludeChildrenIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAssets: {
        responses: {
            200: {
                body: components["schemas"]["AssetsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAssetsTypes?: components["parameters"]["OptionalWithAssetsTypes"];
                withRootAssetsFirst?: components["parameters"]["OptionalWithRootAssetsFirst"];
                withParentsAssetsIds?: components["parameters"]["OptionalWithParentsAssetsIds"];
                sortBy: components["parameters"]["assetsSortBy"];
                direction: components["parameters"]["direction"];
                includeChildrenIds: components["parameters"]["IncludeChildrenIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryDataLabels: {
        responses: {
            200: {
                body: {
                    key?: string;
                    doc_count?: number;
                }[];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryEvents: {
        responses: {
            200: {
                body: components["schemas"]["EventsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withEventsIds?: components["parameters"]["OptionalWithEventsIds"];
                withEventsTypes?: components["parameters"]["OptionalWithEventType"];
                sensorsIds?: components["parameters"]["OptionalsensorsIds"];
                valuesNames?: components["parameters"]["OptionalvaluesNames"];
                withUsersFeedback?: components["parameters"]["OptionalWithUsersFeedback"];
                since?: components["parameters"]["since"];
                before?: components["parameters"]["before"];
                size?: components["parameters"]["size"];
                beforeDate?: components["parameters"]["beforeDate"];
                afterDate?: components["parameters"]["afterDate"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryIntervention: {
        responses: {
            200: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryInterventions: {
        responses: {
            200: {
                body: components["schemas"]["InterventionsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withInterventionsIds?: components["parameters"]["OptionalWithInterventionsIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                sortBy: components["parameters"]["interventionsSortBy"];
                direction: components["parameters"]["direction"];
                withAttachments: components["parameters"]["WithAttachments"];
                withImages: components["parameters"]["WithImages"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryReports: {
        responses: {
            200: {
                body: components["schemas"]["ReportsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withReportsIds?: components["parameters"]["OptionalWithReportsIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["reportsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactorySensor: {
        responses: {
            200: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactorySensors: {
        responses: {
            200: {
                body: components["schemas"]["SensorsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                withAlertTriggerTypes?: components["parameters"]["withAlertTriggerTypes"];
                withFactorySensorsOnly: components["parameters"]["withFactorySensorsOnly"];
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withSensorsIds?: components["parameters"]["OptionalWithSensorsIds"];
                sortBy: components["parameters"]["sensorsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryTrends: {
        responses: {
            200: {
                body: components["schemas"]["TrendItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationProject: {
        responses: {
            200: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationProjects: {
        responses: {
            200: {
                body: components["schemas"]["ProjectsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                sortBy: components["parameters"]["projectsSortBy"];
                direction: components["parameters"]["direction"];
                withProjectsIds?: components["parameters"]["OptionalWithProjectsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    valuesNames: components["schemas"]["NonEmptyValuesNames"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                valuesNames: components["parameters"]["valuesNames"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateEventData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateEventRangeData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    measures: components["schemas"]["measures"];
                    valuesNames: components["schemas"]["NonEmptyValuesNames"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                valuesNames: components["parameters"]["valuesNames"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsEventData: {
        responses: {
            200: components["responses"]["EventDataResponse"];
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsEventRangeData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["RangeMeasures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationUniversalSearch: {
        responses: {
            200: {
                body: {
                    results?: {
                        id: components["schemas"]["UserUUID"] | components["schemas"]["FactoryUUID"] | components["schemas"]["ProjectUUID"] | components["schemas"]["AssetUUID"] | components["schemas"]["ApplicationUUID"] | components["schemas"]["InterventionUUID"] | components["schemas"]["AlertUUID"] | components["schemas"]["ReportUUID"] | components["schemas"]["SensorUUID"] | components["schemas"]["OrganisationUUID"];
                        type: components["schemas"]["SearchType"];
                        snippet?: string;
                    }[][];
                    suggestions?: object[];
                    start?: number;
                    total?: number;
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                searchType?: components["parameters"]["SearchType"];
                searchSentence: components["parameters"]["SearchSentence"];
                withFilterTypes?: components["parameters"]["WithFilterTypes"];
                withFilterIds?: components["parameters"]["WithFilterIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putReport: {
        requestBody: components["requestBodies"]["Report"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                reportId: components["parameters"]["reportId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUniversalSearch: {
        responses: {
            200: {
                body: {
                    results?: {
                        id: components["schemas"]["UserUUID"] | components["schemas"]["FactoryUUID"] | components["schemas"]["ProjectUUID"] | components["schemas"]["AssetUUID"] | components["schemas"]["ApplicationUUID"] | components["schemas"]["InterventionUUID"] | components["schemas"]["AlertUUID"] | components["schemas"]["ReportUUID"] | components["schemas"]["SensorUUID"] | components["schemas"]["OrganisationUUID"];
                        type: components["schemas"]["SearchType"];
                        snippet?: string;
                    }[][];
                    suggestions?: object[];
                    start?: number;
                    total?: number;
                };
            };
        };
        parameters: {
            query: {
                withOrganisationsIds?: components["parameters"]["OptionalWithOrganisationsIds"];
                searchSentence: components["parameters"]["SearchSentence"];
                searchType?: components["parameters"]["SearchType"];
                withFilterTypes?: components["parameters"]["WithFilterTypes"];
                withFilterIds?: components["parameters"]["WithFilterIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUser: {
        responses: {
            200: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                withMembershipsStatuses?: components["parameters"]["withMembershipsStatuses"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUser: {
        requestBody: components["schemas"]["UserModel"];
        responses: {
            201: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserFactories: {
        responses: {
            200: {
                body: components["schemas"]["FactoriesItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                sortBy: components["parameters"]["factoriesSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserNotifications: {
        responses: {
            200: {
                body: components["schemas"]["NotificationsItems"];
            };
        };
        parameters: {
            query: {
                withOrganisationsIds?: components["parameters"]["OptionalWithOrganisationsIds"];
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withNotificationTypes?: components["parameters"]["OptionalWithNotificationTypesQueryParameter"];
                includeOrganisationLevelItems?: components["parameters"]["IncludeOrganisationLevelItemsQueryParameter"];
            };
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisation: {
        responses: {
            200: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisation: {
        requestBody: components["schemas"]["OrganisationModel"];
        responses: {
            201: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationAlerts: {
        responses: {
            200: components["responses"]["AlertsCollection"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withSensorsIds?: components["parameters"]["OptionalWithSensorsIds"];
                withAlertsIds?: components["parameters"]["OptionalWithAlertsIds"];
                withStatuses?: components["parameters"]["withAlertsStatuses"];
                withOrphanAlertsOnly?: components["parameters"]["withOrphanAlertsOnly"];
                withAttachments: components["parameters"]["WithAttachments"];
                withImages: components["parameters"]["WithImages"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["alertsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationApplications: {
        responses: {
            200: {
                body: components["schemas"]["ApplicationsItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                sortBy: components["parameters"]["applicationsSortBy"];
                direction: components["parameters"]["direction"];
                withApplicationsIds?: components["parameters"]["OptionalWithApplicationsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationApplication: {
        requestBody: components["schemas"]["ApplicationModel"];
        responses: {
            201: {
                body: components["schemas"]["ApplicationItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationFactories: {
        responses: {
            200: {
                body: components["schemas"]["FactoriesItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                sortBy: components["parameters"]["factoriesSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactory: {
        requestBody: components["schemas"]["FactoryModel"];
        responses: {
            201: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationFactoryPreferences: {
        responses: {
            200: components["responses"]["AllPreferencesResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationTasks: {
        responses: {
            200: components["responses"]["TasksCollection"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withUsersIds?: components["parameters"]["OptionalWithUsersIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withTypes: components["parameters"]["withTasksTypes"];
                withStatuses: components["parameters"]["withTasksStatuses"];
                withPriorities: components["parameters"]["withPriorities"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["tasksSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationUsers: {
        responses: {
            200: {
                body: components["schemas"]["UsersItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withUsersIds?: components["parameters"]["OptionalWithUsersIds"];
                withMembershipsStatuses?: components["parameters"]["withMembershipsStatuses"];
                sortBy: components["parameters"]["usersSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisations: {
        responses: {
            200: {
                body: components["schemas"]["OrganisationsItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                sortBy: components["parameters"]["organisationsSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisation: {
        requestBody: components["schemas"]["OrganisationModel"];
        responses: {
            201: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUser: {
        requestBody: components["schemas"]["UserModel"];
        responses: {
            201: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            query: {
                invitationToken?: string;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthLogin: {
        requestBody: {
            username: string;
            password: string;
            scope?: string;
            remember?: boolean;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: string;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthLogout: {
        responses: {
            204: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthPasswordChange: {
        requestBody?: {
            token: string;
            oldPassword?: string;
            newPassword: string;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: number;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthRefresh: {
        requestBody: {
            scope?: string;
            remember?: boolean;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: string;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                cookie?: components["parameters"]["cookie"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthVerify: {
        requestBody?: {
            verifyToken: string;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: number;
                    token_type?: string;
                };
                headers: {
                    "set-cookie"?: string[];
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postOAuth2Token: {
        requestBody: components["schemas"]["TokenRequestBody"] | components["schemas"]["TokenRequestBody"];
        responses: {
            200: {
                body: {
                    access_token: string;
                    token_type: Enums.TokenType;
                    expires_in?: number;
                    refresh_token?: string;
                };
            };
            400: {
                body: {
                    error: Enums.Error;
                    error_description?: string;
                    error_uri?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postOrganisationData: {
        requestBody: components["schemas"]["InputData"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                projectCode: components["parameters"]["projectCode"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postPasswordChangeRequest: {
        requestBody: {
            email: string;
        };
        responses: {
            200: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserInvitationResponse: {
        requestBody: {
            accepted: boolean;
            organisationId: components["schemas"]["OrganisationUUID"];
        };
        responses: {
            200: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationAssetSensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                assetId: components["parameters"]["assetId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactoryAsset: {
        requestBody: components["schemas"]["AssetModel"];
        responses: {
            201: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactoryIntervention: {
        requestBody: components["schemas"]["InterventionModel"];
        responses: {
            201: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactorySensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationInvitation: {
        requestBody: components["schemas"]["UserOrganisationInvitation"];
        responses: {
            201: {
                body: {
                    user: components["schemas"]["UserItem"];
                    token: string;
                };
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationInvitationFollowup: {
        requestBody: {
            userId: components["schemas"]["UserUUID"];
        };
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationNotificationRead: {
        responses: {
            201: object;
        };
        parameters: {
            query: {
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
            };
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                notificationId: components["parameters"]["notificationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationProject: {
        requestBody: components["schemas"]["ProjectModel"];
        responses: {
            201: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putAttachment: {
        requestBody: components["requestBodies"]["Attachment"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                attachmentId: components["parameters"]["attachmentId"];
            };
            query: {
                withAlertId?: components["parameters"]["withAlertId"];
                withReportId?: components["parameters"]["withReportId"];
                withInterventionId?: components["parameters"]["withInterventionId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["AttachmentFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            query: {
                withAlertId?: components["parameters"]["withAlertId"];
                withInterventionId?: components["parameters"]["withInterventionId"];
            };
            path: {
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putNotificationEvent: {
        requestBody: components["schemas"]["NotificationEvent"];
        responses: {
            204: object;
        };
        parameters: {
            path: {
                notificationId: components["parameters"]["notificationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putOrganisationFactoryEvent: {
        requestBody: components["schemas"]["EventModel"];
        responses: {
            204: object;
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                eventId: components["parameters"]["eventId"];
            };
            query: {
                hasAttachments?: boolean;
                hasImages?: boolean;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertFeedback: {
        requestBody: {
            userFeedback: components["schemas"]["userFeedback"];
        };
        responses: {
            201: object;
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAssetSensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                assetId: components["parameters"]["assetId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactory: {
        requestBody: components["schemas"]["FactoryModel"];
        responses: {
            201: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryAsset: {
        requestBody: components["schemas"]["AssetModel"];
        responses: {
            201: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
                assetId: components["parameters"]["assetId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryIntervention: {
        requestBody: components["schemas"]["InterventionModel"];
        responses: {
            201: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryPreferences: {
        requestBody: components["schemas"]["PartialPreferencesModel"];
        responses: {
            201: components["responses"]["PreferencesResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                level: components["parameters"]["PreferenceLevel"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactorySensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOAuth2Authorize: {
        responses: {
            302: object;
        };
        parameters: {
            query: {
                response_type: components["parameters"]["responseType"];
                client_id: components["parameters"]["clientId"];
                redirect_uri?: components["parameters"]["redirectURI"];
                scope?: components["parameters"]["scope"];
                state: components["parameters"]["state"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getPing: {
        responses: {
            200: {
                body: {
                    pong?: "pong";
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
}
declare interface components {
    responses: {
        AlertItemResponse: {
            body: components["schemas"]["AlertItem"];
        };
        EventDataResponse: {
            body: components["schemas"]["SensorsEventData"];
        };
        AlertsCollection: {
            body: components["schemas"]["AlertsItems"];
        };
        AllPreferencesResponse: {
            body: components["schemas"]["AllPreferencesModel"];
        };
        TasksCollection: {
            body: {
                total: number;
                stats: {
                    alert?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                    intervention?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                    _all?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                };
                items: components["schemas"]["TasksModel"];
            };
        };
        PreferencesResponse: {
            body: components["schemas"]["PartialPreferencesModel"];
        };
    };
    parameters: {
        applicationId: components["schemas"]["ApplicationUUID"];
        valueName: components["schemas"]["ValueName"];
        OptionalWithAssetsTypes: components["schemas"]["AssetType"][];
        OptionalWithRootAssetsFirst: boolean;
        OptionalWithParentsAssetsIds: components["schemas"]["AssetsUUIDS"];
        assetsSortBy: [
            components["schemas"]["assetsSortByValue"],
            ...components["schemas"]["assetsSortByValue"][]
        ];
        IncludeChildrenIds: boolean;
        OptionalWithEventsIds: components["schemas"]["EventsUUIDS"];
        OptionalWithEventType: components["schemas"]["EventTypes"];
        OptionalsensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
        OptionalvaluesNames: components["schemas"]["NonEmptyValuesNames"];
        OptionalWithUsersFeedback: boolean;
        since: components["schemas"]["Cursor"];
        before: components["schemas"]["Cursor"];
        size: components["schemas"]["Size"];
        beforeDate: components["schemas"]["Date"];
        afterDate: components["schemas"]["Date"];
        OptionalWithInterventionsIds: components["schemas"]["InterventionsUUIDS"];
        interventionsSortBy: [
            components["schemas"]["interventionsSortByValue"],
            ...components["schemas"]["interventionsSortByValue"][]
        ];
        OptionalWithReportsIds: components["schemas"]["ReportsUUIDS"];
        reportsSortBy: [
            components["schemas"]["reportsSortByValue"],
            ...components["schemas"]["reportsSortByValue"][]
        ];
        withAlertTriggerTypes: components["schemas"]["AlertTriggerTypes"];
        withFactorySensorsOnly: boolean;
        sensorsSortBy: [
            components["schemas"]["sensorsSortByValue"],
            ...components["schemas"]["sensorsSortByValue"][]
        ];
        projectId: components["schemas"]["ProjectUUID"];
        projectsSortBy: [
            components["schemas"]["projectsSortByValue"],
            ...components["schemas"]["projectsSortByValue"][]
        ];
        OptionalWithProjectsIds: components["schemas"]["ProjectsUUIDS"];
        aggregations: components["schemas"]["aggregations"];
        WithTimeZone: components["schemas"]["TimeZone"];
        valuesNames: components["schemas"]["NonEmptyValuesNames"];
        includeLabels: boolean;
        sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
        sensorEventTypesQueryParameter: components["schemas"]["EventTypes"];
        eventFieldsQueryParameter: components["schemas"]["EventFields"];
        OptionalWithDataLabels: components["schemas"]["Tags"];
        OptionalWithValuedLabelsNames: components["schemas"]["ValuedLabelName"][];
        OptionalWithValuedLabelsValues: components["schemas"]["LabelValue"][];
        OptionalWithAssetConfigurations: components["schemas"]["AssetConfigurations"];
        OptionalWithManufacturingPhases: components["schemas"]["ManufacturingPhases"];
        OptionalWithManufacturingCycles: components["schemas"]["ManufacturingCycles"];
        reportId: components["schemas"]["ReportUUID"];
        SearchSentence: string;
        SearchType: components["schemas"]["SearchType"];
        WithFilterTypes: components["schemas"]["SearchFilterType"][];
        WithFilterIds: components["schemas"]["UUID"][];
        OptionalWithOrganisationsIds: components["schemas"]["OrganisationsUUIDS"];
        OptionalWithNotificationTypesQueryParameter: components["schemas"]["NotificationTypes"];
        IncludeOrganisationLevelItemsQueryParameter: boolean;
        OptionalWithSensorsIds: components["schemas"]["SensorsUUIDS"];
        OptionalWithAlertsIds: components["schemas"]["AlertsUUIDS"];
        withAlertsStatuses: components["schemas"]["AlertStatuses"];
        withOrphanAlertsOnly: boolean;
        WithAttachments: boolean;
        WithImages: boolean;
        alertsSortBy: [
            components["schemas"]["alertsSortByValue"],
            ...components["schemas"]["alertsSortByValue"][]
        ];
        applicationsSortBy: [
            components["schemas"]["applicationsSortByValue"],
            ...components["schemas"]["applicationsSortByValue"][]
        ];
        OptionalWithApplicationsIds: components["schemas"]["ApplicationsUUIDS"];
        factoriesSortBy: [
            components["schemas"]["factoriesSortByValue"],
            ...components["schemas"]["factoriesSortByValue"][]
        ];
        OptionalWithFactoriesIds: components["schemas"]["FactoriesUUIDS"];
        OptionalWithAssetsIds: components["schemas"]["AssetsUUIDS"];
        OptionalWithAncestorsIds: components["schemas"]["AssetsUUIDS"];
        withTasksTypes: components["schemas"]["TasksTypes"];
        withTasksStatuses: components["schemas"]["TasksStatuses"];
        withPriorities: components["schemas"]["Priorities"];
        fromFilter: components["schemas"]["Date"];
        toFilter: components["schemas"]["Date"];
        tasksSortBy: [
            components["schemas"]["tasksSortByValue"],
            ...components["schemas"]["tasksSortByValue"][]
        ];
        OptionalWithUsersIds: components["schemas"]["UsersUUIDS"];
        withMembershipsStatuses: components["schemas"]["UserMembershipStatus"][];
        usersSortBy: [
            components["schemas"]["usersSortByValue"],
            ...components["schemas"]["usersSortByValue"][]
        ];
        organisationsSortBy: [
            components["schemas"]["organisationsSortByValue"],
            ...components["schemas"]["organisationsSortByValue"][]
        ];
        direction: [
            components["schemas"]["SortDirection"],
            ...components["schemas"]["SortDirection"][]
        ];
        limit: components["schemas"]["Limit"];
        start: components["schemas"]["Start"];
        cookie: string;
        projectCode: components["schemas"]["ProjectCode"];
        "from": components["schemas"]["Date"];
        to: components["schemas"]["Date"];
        attachmentId: components["schemas"]["AttachmentUUID"];
        withReportId: components["schemas"]["ReportUUID"];
        AttachmentFileType: "application/pdf" | "text/html";
        withAlertId: components["schemas"]["AlertUUID"];
        withInterventionId: components["schemas"]["InterventionUUID"];
        imageId: components["schemas"]["ImageUUID"];
        FileName: string;
        FileSize: number;
        ImageFileType: "image/jpeg" | "image/png";
        notificationId: components["schemas"]["NotificationUUID"];
        eventId: components["schemas"]["EventUUID"];
        alertId: components["schemas"]["AlertUUID"];
        assetId: components["schemas"]["AssetUUID"];
        interventionId: components["schemas"]["InterventionUUID"];
        PreferenceLevel: components["schemas"]["PreferenceLevel"];
        userId: components["schemas"]["UserUUID"];
        organisationId: components["schemas"]["OrganisationUUID"];
        factoryId: components["schemas"]["FactoryUUID"];
        sensorId: components["schemas"]["SensorUUID"];
        responseType: "code" | "token";
        clientId: string;
        redirectURI: string;
        scope: string;
        state: string;
        xSdkVersion: string;
        xApplicationVersion: string;
        xApiVersion: string;
    };
    requestBodies: {
        Report: components["schemas"]["ReportModel"];
        Attachment: components["schemas"]["BinaryModel"] | components["schemas"]["BinaryModel"];
        Image: components["schemas"]["BinaryModel"] | components["schemas"]["BinaryModel"];
    };
    schemas: {
        AlertItem: {
            item: components["schemas"]["AlertUUID"];
            alerts: components["schemas"]["AlertModelHash"];
            interventions?: components["schemas"]["InterventionModelHash"];
            sensors?: components["schemas"]["SensorModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            images?: components["schemas"]["ImageModelHash"];
        };
        AlertModel: components["schemas"]["SynchronizableItem"] & components["schemas"]["BaseAlertModel"];
        AttachmentUUID: string;
        BinaryModel: string;
        ImageUUID: string;
        ValueName: string;
        AlertsStats: components["schemas"]["AlertsStat"][];
        FactoriesUUIDS: components["schemas"]["FactoryUUID"][];
        AlertsStat: {
            organisationId: components["schemas"]["OrganisationUUID"];
            stats: {
                discarded: number;
                fixed: number;
                closed: number;
                open: number;
                total: number;
            };
        };
        AssetsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["AssetsUUIDS"];
            assets: components["schemas"]["AssetModelHash"];
        };
        AssetsUUIDS: components["schemas"]["AssetUUID"][];
        AssetType: Enums.AssetType;
        assetsSortByValue: Enums.AssetsSortByValue;
        SortDirection: Enums.SortDirection;
        Limit: 10 | 50 | 100 | 500 | 1000;
        Start: number;
        EventsItems: {
            total: number;
            cursors: {
                before?: components["schemas"]["Cursor"];
                since?: components["schemas"]["Cursor"];
            };
            items: components["schemas"]["EventsUUIDS"];
            events: components["schemas"]["EventModelHash"];
        };
        AssetConfigurations: components["schemas"]["AssetConfiguration"][];
        ManufacturingPhases: components["schemas"]["ManufacturingPhase"][];
        ManufacturingCycles: components["schemas"]["ManufacturingCycle"][];
        EventsUUIDS: components["schemas"]["EventUUID"][];
        EventTypes: components["schemas"]["EventType"][];
        Cursor: string;
        Size: number;
        InterventionsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["InterventionsUUIDS"];
            interventions: components["schemas"]["InterventionModelHash"];
            alerts?: components["schemas"]["AlertModelHash"];
            images?: components["schemas"]["ImageModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            users?: components["schemas"]["UserModelHash"];
        };
        InterventionsUUIDS: components["schemas"]["InterventionUUID"][];
        interventionsSortByValue: Enums.InterventionsSortByValue;
        ReportsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ReportsUUIDS"];
            reports: components["schemas"]["ReportModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
        };
        ReportsUUIDS: components["schemas"]["ReportUUID"][];
        reportsSortByValue: Enums.ReportsSortByValue;
        SensorsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["SensorsUUIDS"];
            sensors: components["schemas"]["SensorModelHash"];
            assets?: components["schemas"]["AssetModelHash"];
        };
        AlertTriggerTypes: components["schemas"]["AlertType"][];
        SensorsUUIDS: components["schemas"]["SensorUUID"][];
        sensorsSortByValue: Enums.SensorsSortByValue;
        TrendItems: {
            total: number;
            items: components["schemas"]["UUIDS"];
            trends: components["schemas"]["TrendModelHash"];
        };
        ProjectsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ProjectsUUIDS"];
            projects: components["schemas"]["ProjectModelHash"];
        };
        projectsSortByValue: Enums.ProjectsSortByValue;
        ProjectsUUIDS: components["schemas"]["ProjectUUID"][];
        Tags: components["schemas"]["LabelValue"][];
        ValuedLabelName: string;
        LabelValue: string;
        TimeZone: string;
        aggregations: components["schemas"]["aggregation"][];
        measures: {
            date: components["schemas"]["Date"];
            values: number[];
            qualities?: number[];
            labels?: string[][];
            labelsCount?: number[][];
        }[];
        NonEmptyValuesNames: [
            components["schemas"]["ValueName"],
            ...components["schemas"]["ValueName"][]
        ];
        SensorsEventData: {
            from: components["schemas"]["Date"];
            to: components["schemas"]["Date"];
            sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
            eventFields: components["schemas"]["EventFields"];
            configuration?: components["schemas"]["AssetConfiguration"];
            phase?: components["schemas"]["ManufacturingPhase"];
            measures: components["schemas"]["measures"];
        };
        Date: string;
        NonEmptySensorsUUIDS: [
            components["schemas"]["SensorUUID"],
            ...components["schemas"]["SensorUUID"][]
        ];
        EventFields: components["schemas"]["EventField"][];
        AssetConfiguration: string;
        ManufacturingPhase: string;
        RangeMeasures: {
            startDate: components["schemas"]["Date"];
            endDate: components["schemas"]["Date"];
            value: number;
            quality?: number;
            labels?: string[];
        }[][];
        SearchFilterType: Enums.SearchFilterType;
        UUID: string;
        ReportModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["ReportUUID"];
            attachmentId?: components["schemas"]["AttachmentUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            authorId: components["schemas"]["UserUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            data: components["schemas"]["ReportData"];
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        };
        FactoryUUID: string;
        ProjectUUID: string;
        AssetUUID: string;
        ApplicationUUID: string;
        InterventionUUID: string;
        AlertUUID: string;
        ReportUUID: string;
        SensorUUID: string;
        SearchType: Enums.SearchType;
        OrganisationsUUIDS: components["schemas"]["OrganisationUUID"][];
        UserMembershipStatus: Enums.UserMembershipStatus;
        factoriesSortByValue: Enums.FactoriesSortByValue;
        NotificationsItems: {
            total: components["schemas"]["Total"];
            items: components["schemas"]["NotificationsUUIDS"];
            notifications: components["schemas"]["NotificationModelHash"];
        };
        NotificationTypes: components["schemas"]["NotificationType"][];
        AlertsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["AlertsUUIDS"];
            alerts: components["schemas"]["AlertModelHash"];
            interventions?: components["schemas"]["InterventionModelHash"];
            sensors?: components["schemas"]["SensorModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            images?: components["schemas"]["ImageModelHash"];
        };
        AlertsUUIDS: components["schemas"]["AlertUUID"][];
        AlertStatuses: [
            components["schemas"]["AlertStatus"],
            ...components["schemas"]["AlertStatus"][]
        ];
        alertsSortByValue: Enums.AlertsSortByValue;
        ApplicationsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ApplicationsUUIDS"];
            applications: components["schemas"]["ApplicationModelHash"];
        };
        applicationsSortByValue: Enums.ApplicationsSortByValue;
        ApplicationsUUIDS: components["schemas"]["ApplicationUUID"][];
        ApplicationModel: {
            id?: components["schemas"]["ApplicationUUID"];
            authorId?: components["schemas"]["UserUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            data: components["schemas"]["ApplicationData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            secret?: string;
        };
        ApplicationItem: {
            item: components["schemas"]["ApplicationUUID"];
            applications: components["schemas"]["ApplicationModelHash"];
        };
        FactoriesItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["FactoriesUUIDS"];
            factories: components["schemas"]["FactoryModelHash"];
        };
        AllPreferencesModel: {
            default: components["schemas"]["DefaultPreferencesModel"];
            organisation: components["schemas"]["PartialPreferencesModel"];
            factory?: components["schemas"]["PartialPreferencesModel"];
            user: components["schemas"]["PartialPreferencesModel"];
        };
        TasksModel: components["schemas"]["TaskModel"][];
        UsersUUIDS: components["schemas"]["UserUUID"][];
        TasksTypes: [
            components["schemas"]["TaskType"],
            ...components["schemas"]["TaskType"][]
        ];
        TasksStatuses: [
            components["schemas"]["TaskStatus"],
            ...components["schemas"]["TaskStatus"][]
        ];
        Priorities: [
            components["schemas"]["Priority"],
            ...components["schemas"]["Priority"][]
        ];
        tasksSortByValue: Enums.TasksSortByValue;
        UsersItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["UsersUUIDS"];
            users: components["schemas"]["UserModelHash"];
        };
        usersSortByValue: Enums.UsersSortByValue;
        OrganisationsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["OrganisationsUUIDS"];
            organisations: components["schemas"]["OrganisationModelHash"];
        };
        organisationsSortByValue: Enums.OrganisationsSortByValue;
        OrganisationModel: {
            id?: components["schemas"]["OrganisationUUID"];
            factoriesIds?: components["schemas"]["FactoriesUUIDS"];
            data: components["schemas"]["OrganisationData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        OrganisationItem: {
            item: components["schemas"]["OrganisationUUID"];
            organisations: components["schemas"]["OrganisationModelHash"];
        };
        UserModel: {
            id?: components["schemas"]["UserUUID"];
            roles?: components["schemas"]["Role"][];
            password?: string;
            memberships?: components["schemas"]["UserMembership"][];
            data: components["schemas"]["UserData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            emailStatus?: components["schemas"]["emailStatus"];
        };
        TokenRequestBody: components["schemas"]["PasswordRequestBody"] | components["schemas"]["AuthorizationCodeRequestBody"] | components["schemas"]["ClientCredentialsRequestBody"] | components["schemas"]["RefreshTokenRequestBody"] | components["schemas"]["VerifyTokenRequestBody"] | components["schemas"]["PasswordChangeBody"];
        InputData: components["schemas"]["GroupedInputData"] | components["schemas"]["DenormalizedInputData"];
        ProjectCode: string;
        OrganisationUUID: string;
        UserOrganisationInvitation: {
            email: string;
            givenName: string;
            familyName: string;
            membership: components["schemas"]["FactoryScopedUserOrganisationMembership"] | components["schemas"]["GlobalUserOrganisationMembership"];
        };
        UserItem: {
            item: components["schemas"]["UserUUID"];
            users: components["schemas"]["UserModelHash"];
        };
        UserUUID: string;
        NotificationUUID: string;
        ProjectModel: {
            id?: components["schemas"]["ProjectUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            author?: components["schemas"]["UserUUID"];
            data: components["schemas"]["ProjectData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        ProjectItem: {
            item: components["schemas"]["ProjectUUID"];
            projects: components["schemas"]["ProjectModelHash"];
        };
        NotificationEvent: components["schemas"]["AlertDeletedEvent"] | components["schemas"]["AlertUpsertedEvent"] | components["schemas"]["AlgorithmModelUpdatedEvent"] | components["schemas"]["ApplicationDeletedEvent"] | components["schemas"]["ApplicationUpsertedEvent"] | components["schemas"]["AssetDeletedEvent"] | components["schemas"]["AssetUpsertedEvent"] | components["schemas"]["EmailStatusUpdatedEvent"] | components["schemas"]["FactoryDeletedEvent"] | components["schemas"]["FactoryUpsertedEvent"] | components["schemas"]["InterventionDeletedEvent"] | components["schemas"]["InterventionUpsertedEvent"] | components["schemas"]["MembershipCancelledEvent"] | components["schemas"]["OrganisationDeletedEvent"] | components["schemas"]["OrganisationPreferencesUpsertedEvent"] | components["schemas"]["OrganisationUpsertedEvent"] | components["schemas"]["OrganisationUserUpdatedEvent"] | components["schemas"]["PasswordChangeRequestedEvent"] | components["schemas"]["ProjectDeletedEvent"] | components["schemas"]["ProjectUpsertedEvent"] | components["schemas"]["ReportDeletedEvent"] | components["schemas"]["ReportUpsertedEvent"] | components["schemas"]["SensorDeletedEvent"] | components["schemas"]["SensorSeriesDeletedEvent"] | components["schemas"]["SensorUpsertedEvent"] | components["schemas"]["UserCreatedEvent"] | components["schemas"]["UserFeedbackUpdatedEvent"] | components["schemas"]["UserInvitedInOrganisationEvent"] | components["schemas"]["UserUpdatedEvent"] | components["schemas"]["VirtualSensorComputeRequestedEvent"];
        EventModel: components["schemas"]["SegmentedAlertDetectionPredictEventModel"] | components["schemas"]["ForecastLearnEventModel"] | components["schemas"]["RealtimeAlertEventSchemaModel"] | components["schemas"]["DriftDetectionEventModel"] | components["schemas"]["ForecastPredictEventModel"] | components["schemas"]["DSPADPredictEventModel"] | components["schemas"]["ProcessEventSchemaModel"] | components["schemas"]["AnomalyEventModel"] | components["schemas"]["DSPADDataAnalysisEventModel"] | components["schemas"]["CycleEventModel"] | components["schemas"]["PhaseEventModel"];
        EventUUID: string;
        userFeedback: number;
        FactoryModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["FactoryUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            rootAssetsIds?: components["schemas"]["AssetsUUIDS"];
            linkedOrganisationsIds?: components["schemas"]["OrganisationsUUIDS"];
            data: components["schemas"]["FactoryData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        FactoryItem: {
            item: components["schemas"]["FactoryUUID"];
            factories: components["schemas"]["FactoryModelHash"];
        };
        AssetModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["AssetUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            childrenIds?: components["schemas"]["AssetsUUIDS"];
            ancestorsIds?: components["schemas"]["AssetsUUIDS"];
            metrics?: components["schemas"]["LineMetrics"];
            currentConfiguration?: components["schemas"]["AssetConfiguration"];
            currentPhase?: components["schemas"]["ManufacturingPhase"];
            currentCycle?: components["schemas"]["ManufacturingCycle"];
            powerState?: Enums.PowerState;
            operatingState?: Enums.OperatingState;
            healthState?: Enums.HealthState;
            data: components["schemas"]["AssetData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        AssetItem: {
            item: components["schemas"]["AssetUUID"];
            assets: components["schemas"]["AssetModelHash"];
        };
        InterventionModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["InterventionUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            authorId?: components["schemas"]["UserUUID"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            qualifiedAt?: components["schemas"]["Date"];
            reportedAt?: components["schemas"]["Date"];
            archivedAt?: components["schemas"]["Date"];
            taskStatus?: components["schemas"]["TaskStatus"];
            data: components["schemas"]["InterventionData"];
        };
        InterventionItem: {
            item: components["schemas"]["InterventionUUID"];
            interventions: components["schemas"]["InterventionModelHash"];
            alerts?: components["schemas"]["AlertModelHash"];
            images?: components["schemas"]["ImageModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            users?: components["schemas"]["UserModelHash"];
        };
        PartialPreferencesModel: {
            displayParentName?: boolean;
            sensorDisplayExternalId?: boolean;
            sensorDisplaySerie?: components["schemas"]["SensorDisplaySerie"];
            useFactoryTimeZone?: boolean;
            showGraphLabels?: boolean;
            showGraphConfigurations?: boolean;
            showGraphCycles?: boolean;
            showGraphPhases?: boolean;
        };
        PreferenceLevel: Enums.PreferenceLevel;
        SensorModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["SensorUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            assetId?: components["schemas"]["AssetUUID"];
            data: components["schemas"]["SensorData"];
            stats?: components["schemas"]["SensorStats"];
            inferredType?: components["schemas"]["SensorInferredType"];
            firstEmission?: components["schemas"]["FirstEmission"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            queries?: {
                [pattern: string]: components["schemas"]["SensorQuery"];
            };
        };
        SensorItem: {
            item: components["schemas"]["SensorUUID"];
            sensors: components["schemas"]["SensorModelHash"];
            assets?: components["schemas"]["AssetModelHash"];
        };
        AlertModelHash: {
            [pattern: string]: components["schemas"]["AlertModel"];
        };
        InterventionModelHash: {
            [pattern: string]: components["schemas"]["InterventionModel"];
        };
        SensorModelHash: {
            [pattern: string]: components["schemas"]["SensorModel"];
        };
        AttachmentModelHash: {
            [pattern: string]: components["schemas"]["AttachmentModel"];
        };
        ImageModelHash: {
            [pattern: string]: components["schemas"]["ImageModel"];
        };
        SynchronizableItem: {
            syncMode?: components["schemas"]["NoSyncMode"];
            externalId?: string;
        } | {
            syncMode: components["schemas"]["DoSyncMode"];
            externalId?: string;
        };
        BaseAlertModel: {
            id?: components["schemas"]["AlertUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            assetId?: components["schemas"]["AssetUUID"];
            assignations?: components["schemas"]["AlertAssignations"];
            interventionId?: components["schemas"]["InterventionUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            sensorsIds?: components["schemas"]["SensorsUUIDS"];
            sensorsValues?: components["schemas"]["ValuesNames"];
            eventsIds?: components["schemas"]["EventsUUIDS"];
            recurringAlertId?: components["schemas"]["AlertUUID"];
            startAt?: components["schemas"]["Date"];
            endAt?: components["schemas"]["Date"];
            taskStatus?: components["schemas"]["TaskStatus"];
            status?: components["schemas"]["AlertStatus"];
            usersFeedback?: components["schemas"]["usersFeedback"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            data?: components["schemas"]["BaseAlertData"];
        };
        ApplicationData: {
            name: string;
            description: string;
            allowedScopes: [
                components["schemas"]["Scope"],
                ...components["schemas"]["Scope"][]
            ];
            allowedGrantTypes: [
                components["schemas"]["GrantType"],
                ...components["schemas"]["GrantType"][]
            ];
            callbackUrl: string;
            isActive: boolean;
        };
        ApplicationModelHash: {
            [pattern: string]: components["schemas"]["ApplicationModel"];
        };
        ProjectData: {
            name: string;
            description: string;
            projectCode: components["schemas"]["ProjectCode"];
            algorithms: components["schemas"]["MLAlgorithms"];
            bridge: {
                type: "push";
            } | {
                type: "pull";
                handler?: string;
                schedule?: string;
            };
            ingestion?: components["schemas"]["ProjectIngestion"];
            indexation?: components["schemas"]["ProjectIndexation"];
        };
        ProjectModelHash: {
            [pattern: string]: components["schemas"]["ProjectModel"];
        };
        UserModelHash: {
            [pattern: string]: components["schemas"]["UserModel"];
        };
        FactoryModelHash: {
            [pattern: string]: components["schemas"]["FactoryModel"];
        };
        AssetModelHash: {
            [pattern: string]: components["schemas"]["AssetModel"];
        };
        Total: number;
        EventModelHash: {
            [pattern: string]: components["schemas"]["EventModel"];
        };
        ManufacturingCycle: string;
        EventType: Enums.EventType;
        ReportModelHash: {
            [pattern: string]: components["schemas"]["ReportModel"];
        };
        AlertType: Enums.AlertType;
        UUIDS: components["schemas"]["UUID"][];
        TrendModelHash: {
            [pattern: string]: components["schemas"]["TrendModel"];
        };
        aggregation: Enums.Aggregation;
        EventField: Enums.EventField;
        ReportData: {
            name: string;
            description: string;
        };
        Role: Enums.Role;
        UserMembership: (components["schemas"]["FactoryScopedUserOrganisationMembership"] | components["schemas"]["GlobalUserOrganisationMembership"]) & {
            id: components["schemas"]["OrganisationUUID"];
            status: components["schemas"]["UserMembershipStatus"];
            lastInvitationDate: components["schemas"]["Date"];
            canReinvite?: boolean;
        };
        UserData: {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        emailStatus: Enums.EmailStatus;
        NotificationsUUIDS: components["schemas"]["NotificationUUID"][];
        NotificationModelHash: {
            [pattern: string]: components["schemas"]["NotificationModel"];
        };
        NotificationType: Enums.NotificationType;
        OrganisationModelHash: {
            [pattern: string]: components["schemas"]["OrganisationModel"];
        };
        OrganisationData: {
            name: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        AlertStatus: Enums.AlertStatus;
        FactoryData: {
            name: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        DefaultPreferencesModel: {
            displayParentName: boolean;
            sensorDisplayExternalId: boolean;
            sensorDisplaySerie: components["schemas"]["SensorDisplaySerie"];
            useFactoryTimeZone: boolean;
            showGraphLabels: boolean;
            showGraphConfigurations: boolean;
            showGraphCycles: boolean;
            showGraphPhases: boolean;
        };
        TaskModel: {
            status: components["schemas"]["TaskStatus"];
            priority?: components["schemas"]["Priority"];
            assetsIds?: components["schemas"]["AssetsUUIDS"];
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        } & ({
            id: components["schemas"]["AlertUUID"];
            type: "alert";
        } | {
            id: components["schemas"]["InterventionUUID"];
            type: "intervention";
        });
        TaskType: Enums.TaskType;
        TaskStatus: Enums.TaskStatus;
        Priority: Enums.Priority;
        PasswordRequestBody: {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        AuthorizationCodeRequestBody: {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        ClientCredentialsRequestBody: {
            grant_type: "client_credentials";
            scope?: string;
        };
        RefreshTokenRequestBody: {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        VerifyTokenRequestBody: {
            grant_type: "verify_token";
            verify_token: components["schemas"]["VerifyToken"];
        };
        PasswordChangeBody: {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        GroupedInputData: {
            date: string;
            values: {
                sensorId: string;
                valueName?: components["schemas"]["ValueName"];
                value: number;
                precision?: components["schemas"]["ValuePrecision"];
                labels?: components["schemas"]["Tags"];
            }[];
        };
        DenormalizedInputData: {
            date: string;
            sensorId: string;
            valueName?: components["schemas"]["ValueName"];
            value: number;
            precision?: components["schemas"]["ValuePrecision"];
            labels?: components["schemas"]["Tags"];
        }[];
        SensorData: {
            name: string;
            variables: components["schemas"]["SensorVariables"];
            overridenType?: {
                [pattern: string]: components["schemas"]["SensorDataType"];
            };
            series: [
                components["schemas"]["SensorSerie"],
                ...components["schemas"]["SensorSerie"][]
            ];
            alertsTriggers: {
                [pattern: string]: [
                    components["schemas"]["AlertTrigger"],
                    ...components["schemas"]["AlertTrigger"][]
                ];
            };
        };
        SensorStats: {
            [pattern: string]: {
                ever: {
                    cardinality?: number;
                    min: number;
                    max: number;
                    percentiles?: {
                        "1.0"?: number;
                        "5.0"?: number;
                        "25.0"?: number;
                        "50.0"?: number;
                        "75.0"?: number;
                        "95.0"?: number;
                        "99.0"?: number;
                    };
                };
                month?: components["schemas"]["SensorTimeBucketStats"];
                day?: components["schemas"]["SensorTimeBucketStats"];
                hour?: components["schemas"]["SensorTimeBucketStats"];
            };
        };
        SensorInferredType: {
            [pattern: string]: components["schemas"]["SensorDataType"];
        };
        FirstEmission: {
            [pattern: string]: components["schemas"]["Date"];
        };
        SensorQuery: {
            aggregationType: Enums.AggregationType;
            template: string;
            pace: number;
            timeFrame: {
                unit: Enums.Unit;
                value: number;
            };
            timeZone?: components["schemas"]["TimeZone"];
        };
        LineMetrics: {
            cadency?: {
                value: number;
                unit: string;
                status: components["schemas"]["LineMetricsStatus"];
            };
            output?: {
                value: number;
                goal?: number;
                unit: string;
                status: components["schemas"]["LineMetricsStatus"];
            };
        };
        AssetData: components["schemas"]["AssetBaseData"] & (components["schemas"]["AssetAreaData"] | components["schemas"]["AssetLineData"] | components["schemas"]["AssetMachineData"] | components["schemas"]["AssetPartData"]);
        ImagesUUIDS: components["schemas"]["ImageUUID"][];
        AttachmentsUUIDS: components["schemas"]["AttachmentUUID"][];
        InterventionData: {
            assignedUsersIds: components["schemas"]["NonEmptyUsersUUIDS"];
            assetsIds: components["schemas"]["AssetsUUIDS"];
            archived: boolean;
            pauseAlertsTriggers?: boolean;
            type?: components["schemas"]["InterventionType"];
            priority: components["schemas"]["Priority"];
            qualification?: components["schemas"]["InterventionQualification"];
            report?: components["schemas"]["InterventionReport"];
        };
        FactoryScopedUserOrganisationMembership: {
            roles: components["schemas"]["UserOrganisationRoles"];
            factories: {
                id: components["schemas"]["FactoryUUID"];
                roles: components["schemas"]["UserFactoryRoles"];
                status?: components["schemas"]["UserMembershipStatus"];
                lastInvitationDate?: components["schemas"]["Date"];
            }[];
        };
        GlobalUserOrganisationMembership: {
            roles: components["schemas"]["UserFactoryRoles"];
        };
        AlertDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlertDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlertEventData"];
        };
        AlertUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlertUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlertEventData"];
        };
        AlgorithmModelUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlgorithmModelUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlgorithmModelEventData"];
        };
        ApplicationDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ApplicationDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ApplicationEventData"];
        };
        ApplicationUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ApplicationUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ApplicationEventData"];
        };
        AssetDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AssetDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AssetEventData"];
        };
        AssetUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AssetUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AssetEventData"];
        };
        EmailStatusUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["EmailStatusUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["EmailStatusUpdatedEventData"];
        };
        FactoryDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["FactoryDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["FactoryEventData"];
        };
        FactoryUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["FactoryUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["FactoryEventData"];
        };
        InterventionDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["InterventionDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["InterventionEventData"];
        };
        InterventionUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["InterventionUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["InterventionEventData"];
        };
        MembershipCancelledEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["MembershipCancelledEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["MembershipCancelledEventData"];
        };
        OrganisationDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationEventData"];
        };
        OrganisationPreferencesUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationPreferencesUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationPreferencesUpsertedEventData"];
        };
        OrganisationUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationEventData"];
        };
        OrganisationUserUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationUserUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationUserUpdatedEventData"];
        };
        PasswordChangeRequestedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["PasswordChangeRequestedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["PasswordChangeRequestedEventData"];
        };
        ProjectDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ProjectDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ProjectEventData"];
        };
        ProjectUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ProjectUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ProjectEventData"];
        };
        ReportDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ReportDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ReportEventData"];
        };
        ReportUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ReportUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ReportEventData"];
        };
        SensorDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorEventData"];
        };
        SensorSeriesDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorSeriesDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorSeriesDeletedEventData"];
        };
        SensorUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorEventData"];
        };
        UserCreatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserCreatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserCreatedEventData"];
        };
        UserFeedbackUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserFeedbackUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserFeedbackUpdatedEventData"];
        };
        UserInvitedInOrganisationEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserInvitedInOrganisationEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserInvitedInOrganisationEventData"];
        };
        UserUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserUpdatedEventData"];
        };
        VirtualSensorComputeRequestedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["VirtualSensorComputeRequestedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["VirtualSensorComputeRequestedEventData"];
        };
        SegmentedAlertDetectionPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["SegmentedAlertDetectionPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        ForecastLearnEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ForecastLearnEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"];
        };
        RealtimeAlertEventSchemaModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["RealtimeAlertEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                triggeringValue: number;
                variables: components["schemas"]["SensorVariables"];
                activatedAlertsTriggersIds: components["schemas"]["AlertsTriggersUUIDS"];
                customI18NMessage?: components["schemas"]["I18NString"];
            };
        };
        DriftDetectionEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DriftDetectionEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        ForecastPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ForecastPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        DSPADPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DSPADPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                runName?: string;
                [pattern: string]: unknown;
            };
        };
        ProcessEventSchemaModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ProcessEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                triggeringValue?: number;
                stepName: string;
                startDate?: components["schemas"]["Date"];
                endDate?: components["schemas"]["Date"];
            };
        };
        AnomalyEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["AnomalyEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                alertCode: components["schemas"]["AlertCode"];
                customI18NMessage?: components["schemas"]["I18NString"];
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        DSPADDataAnalysisEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DSPADDataAnalysisEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        CycleEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["CycleEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                cycleId: components["schemas"]["NanoId"];
                cycleValue?: number;
                [pattern: string]: unknown;
            };
        };
        PhaseEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["PhaseEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                phaseName: string;
                phaseValue?: number;
                [pattern: string]: unknown;
            };
        };
        SensorDisplaySerie: Enums.SensorDisplaySerie;
        AttachmentModel: components["schemas"]["SynchronizableItem"] & {
            id: components["schemas"]["AttachmentUUID"];
            authorId?: components["schemas"]["UserUUID"];
            alert?: components["schemas"]["AlertUUID"];
            intervention?: components["schemas"]["InterventionUUID"];
            report?: components["schemas"]["ReportUUID"];
            scope: components["schemas"]["AttachmentScope"];
            url?: string;
            stats: {
                name: string;
                size: number;
                type: string;
            };
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        ImageModel: {
            id: components["schemas"]["ImageUUID"];
            authorId?: components["schemas"]["UserUUID"];
            scope: components["schemas"]["ImageScope"];
            alert?: components["schemas"]["AlertUUID"];
            intervention?: components["schemas"]["InterventionUUID"];
            urls: {
                original: string;
                large?: string;
                medium?: string;
                thumb?: string;
            };
            stats: {
                name: string;
                size: number;
                type: string;
            };
            resized?: string;
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        };
        NoSyncMode: "none";
        DoSyncMode: Enums.DoSyncMode;
        AlertAssignations: {
            id: components["schemas"]["UserUUID"];
            assignedAt: components["schemas"]["Date"];
            viewedAt?: components["schemas"]["Date"];
        }[];
        ValuesNames: components["schemas"]["ValueName"][];
        usersFeedback: {
            [pattern: string]: components["schemas"]["userFeedback"];
        };
        BaseAlertData: {
            details: components["schemas"]["NoAlertDetailsModel"] | components["schemas"]["RealtimeAlertDetailsModel"] | components["schemas"]["SilentSensorsAlertDetailsModel"];
            code: components["schemas"]["AlertCode"];
            i18nMessage?: components["schemas"]["I18NString"];
            priority: components["schemas"]["Priority"];
            severity: Enums.Severity;
            viewed: boolean;
            assignedUsersIds?: components["schemas"]["UsersUUIDS"];
            comment?: string;
        };
        Scope: Enums.Scope;
        GrantType: Enums.GrantType;
        MLAlgorithms: ("pipelines" | "custom")[];
        ProjectIngestion: {
            handler: string;
            sourceTopic: components["schemas"]["DataTopic"];
            batchSize: number;
            delay: number;
        };
        ProjectIndexation: {
            handler: string;
            sourceTopic: components["schemas"]["DataTopic"];
            batchSize: number;
            delay: number;
        };
        TrendModel: {
            id?: components["schemas"]["UUID"];
            sensorId?: components["schemas"]["SensorUUID"];
            intercept?: number;
            slope?: number;
            from?: components["schemas"]["Date"];
            to?: components["schemas"]["Date"];
        };
        Locale: string;
        NotificationModel: components["schemas"]["UserCreatedNotification"] | components["schemas"]["UserUpdatedNotification"] | components["schemas"]["AlertNotification"] | components["schemas"]["AssetNotification"] | components["schemas"]["ApplicationNotification"] | components["schemas"]["InterventionNotification"] | components["schemas"]["ReportNotification"] | components["schemas"]["SensorNotification"] | components["schemas"]["FactoryNotification"] | components["schemas"]["ProjectNotification"] | components["schemas"]["AlgorithmModelUpdatedNotification"] | components["schemas"]["OrganisationNotification"] | components["schemas"]["OrganisationUserUpdatedNotification"] | components["schemas"]["OrganisationPreferencesUpsertedNotification"] | components["schemas"]["SensorSeriesDeletedNotification"] | components["schemas"]["PasswordChangeRequestedNotification"] | components["schemas"]["EmailStatusUpdatedNotification"] | components["schemas"]["UserFeedbackUpdatedNotification"] | components["schemas"]["UserInvitedInOrganisationNotification"] | components["schemas"]["MembershipCancelledEventSchema"] | components["schemas"]["VirtualSensorComputeRequestedNotification"];
        VerifyToken: string;
        ValuePrecision: number;
        SensorVariables: {
            [pattern: string]: (number | string);
        };
        SensorDataType: Enums.SensorType;
        SensorSerie: {
            name: components["schemas"]["ValueName"];
            unit: components["schemas"]["SensorSerieUnit"];
            description?: string;
            displayName?: string;
        } & (components["schemas"]["QuantitativeSensorSerie"] | components["schemas"]["QualitativeSensorSerie"]) & (components["schemas"]["DataSensorSerieSource"] | components["schemas"]["EventSensorSerieSource"]);
        AlertTrigger: {
            id: components["schemas"]["AlertTriggerUUID"];
            name: string;
            i18nMessage: components["schemas"]["I18NString"];
        } & (components["schemas"]["SilenceAlertTrigger"] | components["schemas"]["RealtimeAlertTrigger"]);
        SensorTimeBucketStats: {
            cardinality: number;
            volumetry: number;
            maxMin: number;
            minMax: number;
        };
        LineMetricsStatus: Enums.LineMetricsStatus;
        AssetBaseData: {
            name: string;
            tags: components["schemas"]["Tags"];
            parentId?: components["schemas"]["AssetUUID"];
        };
        AssetAreaData: {
            type: "area";
        };
        AssetLineData: {
            type: "line";
            configurations: {
                [pattern: string]: {
                    machinesTree: components["schemas"]["LineMachineTree"];
                };
            };
        };
        AssetMachineData: {
            type: "machine";
        };
        AssetPartData: {
            type: "part";
        };
        NonEmptyUsersUUIDS: [
            components["schemas"]["UserUUID"],
            ...components["schemas"]["UserUUID"][]
        ];
        InterventionType: Enums.InterventionType;
        InterventionQualification: {
            usersFeedback: components["schemas"]["usersFeedback"];
            alertsIds: components["schemas"]["NonEmptyAlertsUUIDS"];
        };
        InterventionReport: {
            rootCauses?: string;
            fixDetails?: string;
            startDate: components["schemas"]["Date"];
            endDate?: components["schemas"]["Date"];
        } | {
            comment: string;
        };
        UserOrganisationRoles: [
            "member",
            ..."member"[]
        ];
        UserFactoryRoles: [
            "manager" | "technician",
            ...("manager" | "technician")[]
        ];
        AlertDeletedEventType: "ALERT_DELETED";
        Timestamp: number;
        AlertEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            alertId: components["schemas"]["AlertUUID"];
            userId?: components["schemas"]["UserUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            eventsIds?: components["schemas"]["EventsUUIDS"];
        };
        AlertUpsertedEventType: "ALERT_UPSERTED";
        AlgorithmModelUpdatedEventType: "ALGORITHM_MODEL_UPDATED";
        AlgorithmModelEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            projectId: components["schemas"]["ProjectUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            factoryId?: components["schemas"]["FactoryUUID"];
        };
        ApplicationDeletedEventType: "APPLICATION_DELETED";
        ApplicationEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            applicationId: components["schemas"]["ApplicationUUID"];
        };
        ApplicationUpsertedEventType: "APPLICATION_UPSERTED";
        AssetDeletedEventType: "ASSET_DELETED";
        AssetEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
            assetId: components["schemas"]["AssetUUID"];
        };
        AssetUpsertedEventType: "ASSET_UPSERTED";
        EmailStatusUpdatedEventType: "EMAIL_STATUS_UPDATED";
        EmailStatusUpdatedEventData: {
            userId: components["schemas"]["UserUUID"];
            email: string;
            name: string;
            status: components["schemas"]["emailStatus"];
        };
        FactoryDeletedEventType: "FACTORY_DELETED";
        FactoryEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        FactoryUpsertedEventType: "FACTORY_UPSERTED";
        InterventionDeletedEventType: "INTERVENTION_DELETED";
        InterventionEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
            interventionId: components["schemas"]["InterventionUUID"];
            alertsEventsIds?: components["schemas"]["EventsUUIDS"];
            userFeedback?: components["schemas"]["userFeedback"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
        };
        InterventionUpsertedEventType: "INTERVENTION_UPSERTED";
        MembershipCancelledEventType: "MEMBERSHIP_CANCELLED";
        MembershipCancelledEventData: {
            userId: components["schemas"]["UserUUID"];
            organisationId: components["schemas"]["OrganisationUUID"];
        };
        OrganisationDeletedEventType: "ORGANISATION_DELETED";
        OrganisationEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        OrganisationPreferencesUpsertedEventType: "ORGANISATION_PREFERENCES_UPSERTED";
        OrganisationPreferencesUpsertedEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            preferences: components["schemas"]["PartialPreferencesModel"];
        };
        OrganisationUpsertedEventType: "ORGANISATION_UPSERTED";
        OrganisationUserUpdatedEventType: "ORGANISATION_USER_UPDATED";
        OrganisationUserUpdatedEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            userName: string;
            accepted: boolean;
        };
        PasswordChangeRequestedEventType: "PASSWORD_CHANGE_REQUESTED";
        PasswordChangeRequestedEventData: {
            token: string;
            email: string;
            userName: string;
            locale: components["schemas"]["Locale"];
        };
        ProjectDeletedEventType: "PROJECT_DELETED";
        ProjectEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            projectId: components["schemas"]["ProjectUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            topicsToAdd: components["schemas"]["DataTopic"][];
            topicsToRemove: components["schemas"]["DataTopic"][];
        };
        ProjectUpsertedEventType: "PROJECT_UPSERTED";
        ReportDeletedEventType: "REPORT_DELETED";
        ReportEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            reportId: components["schemas"]["ReportUUID"];
        };
        ReportUpsertedEventType: "REPORT_UPSERTED";
        SensorDeletedEventType: "SENSOR_DELETED";
        SensorEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            sensorId: components["schemas"]["SensorUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        SensorSeriesDeletedEventType: "SENSOR_SERIES_DELETED";
        SensorSeriesDeletedEventData: {
            sensorId: components["schemas"]["SensorUUID"];
            valueName: components["schemas"]["ValueName"];
        };
        SensorUpsertedEventType: "SENSOR_UPSERTED";
        UserCreatedEventType: "USER_CREATED";
        UserCreatedEventData: {
            user: components["schemas"]["UserModel"];
            verifyToken: components["schemas"]["VerifyToken"];
        };
        UserFeedbackUpdatedEventType: "USER_FEEDBACK_UPDATED";
        UserFeedbackUpdatedEventData: {
            alertId?: components["schemas"]["AlertUUID"];
            eventsIds: components["schemas"]["EventsUUIDS"];
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            userFeedBack: components["schemas"]["userFeedback"];
            beforeDate: components["schemas"]["Date"];
            afterDate: components["schemas"]["Date"];
        };
        UserInvitedInOrganisationEventType: "USER_INVITED_IN_ORGANISATION";
        UserInvitedInOrganisationEventData: {
            inviterId: components["schemas"]["UserUUID"];
            userId: components["schemas"]["UserUUID"];
            organisationId: components["schemas"]["OrganisationUUID"];
            userName: string;
            userEmail: string;
            organisationName: string;
            organisationRoles: components["schemas"]["UserFactoryRoles"] | components["schemas"]["UserOrganisationRoles"];
            token: string;
        };
        UserUpdatedEventType: "USER_UPDATED";
        UserUpdatedEventData: {
            user: components["schemas"]["UserModel"];
            verifyToken?: components["schemas"]["VerifyToken"];
        };
        VirtualSensorComputeRequestedEventType: "VIRTUAL_SENSOR_COMPUTE_REQUESTED";
        VirtualSensorComputeRequestedEventData: {
            sensorId: components["schemas"]["SensorUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            sensorValueName: components["schemas"]["ValueName"];
        };
        SegmentedAlertDetectionPredictEventType: "segmented_anomaly_detection_predict";
        DataLabels: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId?: string;
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            ancestorsIds: components["schemas"]["AssetsUUIDS"];
            assetsIds: components["schemas"]["AssetsUUIDS"];
            sensorsIds: components["schemas"]["SensorsUUIDS"];
            valuesNames?: components["schemas"]["ValuesNames"];
            labels: components["schemas"]["BaseDataLabels"];
            runId?: components["schemas"]["RunUUID"];
            usersFeedback?: components["schemas"]["usersFeedback"];
        };
        ForecastLearnEventType: "univariate_forecast_learn";
        RealtimeAlertEventType: "realtime_alert";
        AlertsTriggersUUIDS: components["schemas"]["AlertTriggerUUID"][];
        I18NString: {
            [pattern: string]: string;
        };
        DriftDetectionEventType: "drift_detection";
        ForecastPredictEventType: "univariate_forecast_predict";
        DSPADPredictEventType: "dspad_predict";
        ProcessEventType: "process";
        AnomalyEventType: "anomaly";
        AlertCode: components["schemas"]["StandardAlertCode"] | components["schemas"]["CustomAlertCode"];
        DSPADDataAnalysisEventType: "dspad_data_mvt";
        CycleEventType: "cycle";
        NanoId: string;
        PhaseEventType: "phase";
        AttachmentScope: Enums.AttachmentScope;
        ImageScope: Enums.ImageScope;
        NoAlertDetailsModel: object;
        RealtimeAlertDetailsModel: {
            triggeringValue: number;
            variables: components["schemas"]["SensorVariables"];
            activatedAlertsTriggersIds: components["schemas"]["AlertsTriggersUUIDS"];
        };
        SilentSensorsAlertDetailsModel: {
            totalSilence: boolean;
            sensorsIds: components["schemas"]["SensorsUUIDS"];
        };
        DataTopic: string;
        UserCreatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserCreatedEventType"];
            eventData: components["schemas"]["UserCreatedEventData"];
        };
        UserUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserUpdatedEventType"];
            eventData: components["schemas"]["UserUpdatedEventData"];
        };
        AlertNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AlertUpsertedEventType"] | components["schemas"]["AlertDeletedEventType"];
            eventData: components["schemas"]["AlertEventData"];
        };
        AssetNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AssetUpsertedEventType"] | components["schemas"]["AssetDeletedEventType"];
            eventData: components["schemas"]["AssetEventData"];
        };
        ApplicationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ApplicationUpsertedEventType"] | components["schemas"]["ApplicationDeletedEventType"];
            eventData: components["schemas"]["ApplicationEventData"];
        };
        InterventionNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["InterventionUpsertedEventType"] | components["schemas"]["InterventionDeletedEventType"];
            eventData: components["schemas"]["InterventionEventData"];
        };
        ReportNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ReportUpsertedEventType"] | components["schemas"]["ReportDeletedEventType"];
            eventData: components["schemas"]["ReportEventData"];
        };
        SensorNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["SensorUpsertedEventType"] | components["schemas"]["SensorDeletedEventType"];
            eventData: components["schemas"]["SensorEventData"];
        };
        FactoryNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["FactoryUpsertedEventType"] | components["schemas"]["FactoryDeletedEventType"];
            eventData: components["schemas"]["FactoryEventData"];
        };
        ProjectNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ProjectUpsertedEventType"] | components["schemas"]["ProjectDeletedEventType"];
            eventData: components["schemas"]["ProjectEventData"];
        };
        AlgorithmModelUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AlgorithmModelUpdatedEventType"];
            eventData: components["schemas"]["AlgorithmModelEventData"];
        };
        OrganisationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationUpsertedEventType"] | components["schemas"]["OrganisationDeletedEventType"];
            eventData: components["schemas"]["OrganisationEventData"];
        };
        OrganisationUserUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationUserUpdatedEventType"];
            eventData: components["schemas"]["OrganisationUserUpdatedEventData"];
        };
        OrganisationPreferencesUpsertedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationPreferencesUpsertedEventType"];
            eventData: components["schemas"]["OrganisationPreferencesUpsertedEventData"];
        };
        SensorSeriesDeletedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["SensorSeriesDeletedEventType"];
            eventData: components["schemas"]["SensorSeriesDeletedEventData"];
        };
        PasswordChangeRequestedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["PasswordChangeRequestedEventType"];
            eventData: components["schemas"]["PasswordChangeRequestedEventData"];
        };
        EmailStatusUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["EmailStatusUpdatedEventType"];
            eventData: components["schemas"]["EmailStatusUpdatedEventData"];
        };
        UserFeedbackUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserFeedbackUpdatedEventType"];
            eventData: components["schemas"]["UserFeedbackUpdatedEventData"];
        };
        UserInvitedInOrganisationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserInvitedInOrganisationEventType"];
            eventData: components["schemas"]["UserInvitedInOrganisationEventData"];
        };
        MembershipCancelledEventSchema: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["MembershipCancelledEventType"];
            eventData: components["schemas"]["MembershipCancelledEventData"];
        };
        VirtualSensorComputeRequestedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["VirtualSensorComputeRequestedEventType"];
            eventData: components["schemas"]["VirtualSensorComputeRequestedEventData"];
        };
        SensorSerieUnit: string;
        QuantitativeSensorSerie: {
            type: "quantitative";
        };
        QualitativeSensorSerie: {
            type: "qualitative";
            categories?: {
                [pattern: string]: string;
            };
        };
        DataSensorSerieSource: {
            sourceType: "data";
        };
        EventSensorSerieSource: {
            sourceType: "event";
            eventField: components["schemas"]["EventField"];
            eventType: components["schemas"]["EventType"];
            eventHasARange?: boolean;
        };
        AlertTriggerUUID: string;
        SilenceAlertTrigger: {
            type: "silence";
            duration: number;
        };
        RealtimeAlertTrigger: {
            type: "realtime";
            occurences: number;
            duration?: number;
            resetDelay: number;
            rule: components["schemas"]["RealtimeAlertTriggerRule"];
        };
        LineMachineTree: {
            nodes?: components["schemas"]["AssetUUID"][];
            edges?: {
                source?: components["schemas"]["AssetUUID"];
                target?: components["schemas"]["AssetUUID"];
            }[];
        };
        NonEmptyAlertsUUIDS: [
            components["schemas"]["AlertUUID"],
            ...components["schemas"]["AlertUUID"][]
        ];
        BaseDataLabels: {
            assets?: components["schemas"]["AssetLabels"];
            ancestors?: components["schemas"]["AssetLabels"];
            tags?: components["schemas"]["Tags"];
        };
        RunUUID: string;
        StandardAlertCode: Enums.StandardAlertCode;
        CustomAlertCode: string;
        CommonNotification: {
            id: components["schemas"]["NotificationUUID"];
            date: components["schemas"]["Date"];
            read: boolean;
            data: {
                organisationId?: components["schemas"]["OrganisationUUID"];
                factoryId?: components["schemas"]["FactoryUUID"];
                ancestorsIds?: components["schemas"]["AssetsUUIDS"];
                assetsIds?: components["schemas"]["AssetsUUIDS"];
                alertsIds?: components["schemas"]["AlertsUUIDS"];
                sensorsIds?: components["schemas"]["SensorsUUIDS"];
            };
        };
        RealtimeAlertTriggerRule: components["schemas"]["RealtimeAlertTriggerLabelTest"] | components["schemas"]["RealtimeAlertTriggerValuedLabelTest"] | components["schemas"]["RealtimeAlertTriggerValueTest"] | components["schemas"]["RealtimeAlertTriggerBranch"];
        AssetLabels: {
            values?: components["schemas"]["ValuedLabels"];
            tags?: components["schemas"]["Tags"];
            configurations?: components["schemas"]["AssetConfigurations"];
            cycles?: components["schemas"]["ManufacturingCycles"];
            phases?: components["schemas"]["ManufacturingPhases"];
        };
        RealtimeAlertTriggerLabelTest: {
            type: "label";
            operator: components["schemas"]["RealtimeAlertLabelsOperator"];
            target: components["schemas"]["RealtimeAlertLabelTarget"];
            name: Enums.NameOfTheLabelToTest;
            values: string[];
        };
        RealtimeAlertTriggerValuedLabelTest: {
            type: "valued_label";
            operator: components["schemas"]["RealtimeAlertLabelsOperator"];
            target: components["schemas"]["RealtimeAlertLabelTarget"];
            values: {
                [pattern: string]: string;
            };
        };
        RealtimeAlertTriggerValueTest: {
            type: "value";
            operator: Enums.RealtimeAlertTriggerValueTestOperator;
            value: number | components["schemas"]["SensorVariable"];
        };
        RealtimeAlertTriggerBranch: {
            type?: "branch";
            operator: Enums.RealtimeAlertTriggerBranchOperator;
            leftNode: components["schemas"]["RealtimeAlertTriggerRule"];
            rightNode: components["schemas"]["RealtimeAlertTriggerRule"];
        };
        ValuedLabels: {
            [pattern: string]: components["schemas"]["LabelValue"];
        };
        RealtimeAlertLabelsOperator: Enums.WetherAllLabelsShouldMatchOrAny;
        RealtimeAlertLabelTarget: Enums.TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors;
        SensorVariable: string;
    };
}
declare namespace Enums {
    export enum TokenType {
        Bearer = "bearer",
        Mac = "mac"
    }
    export enum Error {
        InvalidRequest = "invalid_request",
        InvalidClient = "invalid_client",
        InvalidGrant = "invalid_grant",
        UnauthorizedClient = "unauthorized_client",
        UnsupportedGrantType = "unsupported_grant_type",
        InvalidScope = "invalid_scope"
    }
    export enum AssetType {
        Area = "area",
        Line = "line",
        Machine = "machine",
        Part = "part"
    }
    export enum AssetsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum SortDirection {
        Asc = "asc",
        Desc = "desc"
    }
    export enum InterventionsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Priority = "priority"
    }
    export enum ReportsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum SensorsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum ProjectsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum SearchFilterType {
        Factory = "factory",
        Asset = "asset"
    }
    export enum SearchType {
        User = "user",
        Factory = "factory",
        Project = "project",
        Asset = "asset",
        Application = "application",
        Intervention = "intervention",
        Alert = "alert",
        Report = "report",
        Sensor = "sensor",
        Organisation = "organisation"
    }
    export enum UserMembershipStatus {
        Member = "member",
        Pending = "pending",
        Declined = "declined",
        Cancelled = "cancelled"
    }
    export enum FactoriesSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AlertsSortByValue {
        Severity = "severity",
        Priority = "priority",
        AssignedAt = "assignedAt",
        StartAt = "startAt",
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum ApplicationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum TasksSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum UsersSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum OrganisationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum PowerState {
        Unknown = "unknown",
        On = "on",
        Off = "off"
    }
    export enum OperatingState {
        Unknown = "unknown",
        Normal = "normal",
        Stopped = "stopped",
        Idle = "idle"
    }
    export enum HealthState {
        Unknown = "unknown",
        Good = "good",
        Faulty = "faulty",
        Erroring = "erroring"
    }
    export enum PreferenceLevel {
        Organisation = "organisation",
        Factory = "factory",
        User = "user"
    }
    export enum EventType {
        SegmentedAnomalyDetectionPredict = "segmented_anomaly_detection_predict",
        UnivariateForecastLearn = "univariate_forecast_learn",
        RealtimeAlert = "realtime_alert",
        DriftDetection = "drift_detection",
        UnivariateForecastPredict = "univariate_forecast_predict",
        DspadPredict = "dspad_predict",
        Process = "process",
        Anomaly = "anomaly",
        DspadDataMvt = "dspad_data_mvt",
        Cycle = "cycle",
        Phase = "phase"
    }
    export enum AlertType {
        Realtime = "realtime",
        Silence = "silence"
    }
    export enum Aggregation {
        Min = "min",
        Max = "max",
        Avg = "avg",
        Count = "count",
        Sum = "sum",
        P25 = "p25",
        Median = "median",
        P75 = "p75",
        Top1 = "top1",
        Top2 = "top2",
        Top3 = "top3",
        Others = "others"
    }
    export enum EventField {
        AggregatableValue1 = "aggregatableValue1",
        AggregatableValue2 = "aggregatableValue2",
        AggregatableValue3 = "aggregatableValue3"
    }
    export enum Role {
        Admin = "admin",
        User = "user",
        Candidate = "candidate",
        Third = "third"
    }
    export enum EmailStatus {
        Bouncing = "bouncing",
        Reachable = "reachable",
        Dropped = "dropped",
        Unknown = "unknown"
    }
    export enum NotificationType {
        USERCREATED = "USER_CREATED",
        USERUPDATED = "USER_UPDATED",
        ALERTUPSERTED = "ALERT_UPSERTED",
        ALERTDELETED = "ALERT_DELETED",
        ASSETUPSERTED = "ASSET_UPSERTED",
        ASSETDELETED = "ASSET_DELETED",
        SENSORUPSERTED = "SENSOR_UPSERTED",
        SENSORDELETED = "SENSOR_DELETED",
        REPORTUPSERTED = "REPORT_UPSERTED",
        REPORTDELETED = "REPORT_DELETED",
        INTERVENTIONUPSERTED = "INTERVENTION_UPSERTED",
        INTERVENTIONDELETED = "INTERVENTION_DELETED",
        ALGORITHMMODELUPDATED = "ALGORITHM_MODEL_UPDATED",
        PROJECTUPSERTED = "PROJECT_UPSERTED",
        PROJECTDELETED = "PROJECT_DELETED",
        FACTORYUPSERTED = "FACTORY_UPSERTED",
        FACTORYDELETED = "FACTORY_DELETED",
        ORGANISATIONUPSERTED = "ORGANISATION_UPSERTED",
        ORGANISATIONDELETED = "ORGANISATION_DELETED",
        ORGANISATIONUSERUPDATED = "ORGANISATION_USER_UPDATED",
        ORGANISATIONPREFERENCESUPSERTED = "ORGANISATION_PREFERENCES_UPSERTED",
        SENSORSERIESDELETED = "SENSOR_SERIES_DELETED",
        PASSWORDCHANGEREQUESTED = "PASSWORD_CHANGE_REQUESTED",
        EMAILSTATUSUPDATED = "EMAIL_STATUS_UPDATED",
        USERFEEDBACKUPDATED = "USER_FEEDBACK_UPDATED",
        USERINVITEDINORGANISATION = "USER_INVITED_IN_ORGANISATION",
        MEMBERSHIPCANCELLED = "MEMBERSHIP_CANCELLED",
        VIRTUALSENSORCOMPUTEREQUESTED = "VIRTUAL_SENSOR_COMPUTE_REQUESTED"
    }
    export enum AlertStatus {
        Open = "open",
        Discarded = "discarded",
        Fixed = "fixed",
        Closed = "closed"
    }
    export enum TaskType {
        Alert = "alert",
        Intervention = "intervention"
    }
    export enum TaskStatus {
        ToAssign = "to_assign",
        ToDo = "to_do",
        InProgress = "in_progress",
        Done = "done"
    }
    export enum Priority {
        NotSet = "not_set",
        Urgent = "urgent",
        Important = "important",
        Secondary = "secondary"
    }
    export enum AggregationType {
        Ratio = "ratio",
        Sum = "sum"
    }
    export enum Unit {
        Days = "days",
        Hours = "hours"
    }
    export enum SensorDisplaySerie {
        Always = "always",
        Never = "never",
        IfExists = "ifExists"
    }
    export enum DoSyncMode {
        OneWayIn = "one-way-in",
        OneWayOut = "one-way-out",
        TwoWays = "two-ways"
    }
    export enum Severity {
        NotSet = "not_set",
        Critical = "critical",
        Major = "major",
        Moderate = "moderate",
        Minor = "minor",
        Cosmetic = "cosmetic"
    }
    export enum Scope {
        User = "user",
        Admin = "admin",
        Data = "data",
        Webhook = "webhook",
        Oauth2 = "oauth2",
        Ml = "ml"
    }
    export enum GrantType {
        Code = "code",
        Token = "token",
        Password = "password",
        Refresh = "refresh",
        ClientCredentials = "client_credentials",
        Verify = "verify",
        PasswordChange = "password_change"
    }
    export enum SensorType {
        Qualitative = "qualitative",
        Quantitative = "quantitative"
    }
    export enum LineMetricsStatus {
        Good = "good",
        Faulty = "faulty",
        Error = "error"
    }
    export enum InterventionType {
        Fix = "fix",
        Prevent = "prevent",
        Control = "control"
    }
    export enum AttachmentScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum ImageScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum StandardAlertCode {
        MissingData = "missing_data",
        BadData = "bad_data",
        WrongDelta = "wrong_delta",
        ProductionDrop = "production_drop",
        OutOfBounds = "out_of_bounds",
        AbnormalData = "abnormal_data",
        DataDrift = "data_drift",
        SilenceAlert = "silence_alert",
        RealtimeAlert = "realtime_alert"
    }
    export enum NameOfTheLabelToTest {
        Phases = "phases",
        Cycles = "cycles",
        Configurations = "configurations",
        Tags = "tags"
    }
    export enum RealtimeAlertTriggerValueTestOperator {
        Eq = "eq",
        Gt = "gt",
        Gte = "gte",
        Lt = "lt",
        Lte = "lte",
        And = "and",
        Xor = "xor"
    }
    export enum RealtimeAlertTriggerBranchOperator {
        And = "and",
        Or = "or"
    }
    export enum WetherAllLabelsShouldMatchOrAny {
        All = "all",
        Any = "any"
    }
    export enum TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors {
        Ancestors = "ancestors",
        Assets = "assets",
        All = "all"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface paths {
    "/alerts/{alertId}": {
        "delete": operations["deleteAlert"];
    };
    "/applications/{applicationId}": {
        "delete": operations["deleteApplication"];
    };
    "/interventions/{interventionId}": {
        "delete": operations["deleteIntervention"];
    };
    "/projects/{projectId}": {
        "delete": operations["deleteProject"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}": {
        "delete": operations["deleteUserOrganisationAlert"];
        "get": operations["getUserOrganisationAlert"];
        put: operations["putUserOrganisationAlert"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/attachments/{attachmentId}": {
        "delete": operations["deleteUserOrganisationAlertAttachment"];
        put: operations["putUserOrganisationAlertAttachment"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/images/{imageId}": {
        "delete": operations["deleteUserOrganisationAlertImage"];
        put: operations["putUserOrganisationAlertImage"];
    };
    "/users/{userId}/organisations/{organisationId}/applications/{applicationId}": {
        "delete": operations["deleteUserOrganisationApplication"];
        put: operations["putUserOrganisationApplication"];
    };
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}": {
        "delete": operations["deleteUserOrganisationIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}/images/{imageId}": {
        "delete": operations["deleteUserOrganisationInterventionImage"];
        put: operations["putUserOrganisationInterventionImage"];
    };
    "/users/{userId}/organisations/{organisationId}/memberships/{collaboratorId}": {
        "delete": operations["deleteUserOrganisationMembership"];
    };
    "/users/{userId}/organisations/{organisationId}/projects/{projectId}": {
        "delete": operations["deleteUserOrganisationProject"];
        put: operations["putUserOrganisationProject"];
    };
    "/users/{userId}/organisations/{organisationId}/sensors/{sensorId}/series/{valueName}": {
        "delete": operations["deleteUserOrganisationSensorSeries"];
    };
    "/alerts/stats": {
        "get": operations["getAlertsStats"];
    };
    "/auth/profile": {
        "get": operations["getAuthProfile"];
    };
    "/me": {
        "get": operations["getMySelf"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/organisations/{organisationId}/factories/{factoryId}": {
        "get": operations["getOrganisationFactory"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/alerts/stats": {
        "get": operations["getOrganisationFactoryAlertsStats"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
        "get": operations["getOrganisationFactoryAsset"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/assets": {
        "get": operations["getOrganisationFactoryAssets"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/labels": {
        "get": operations["getOrganisationFactoryDataLabels"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/events": {
        "get": operations["getOrganisationFactoryEvents"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
        "get": operations["getOrganisationFactoryIntervention"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/interventions": {
        "get": operations["getOrganisationFactoryInterventions"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/reports": {
        "get": operations["getOrganisationFactoryReports"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
        "get": operations["getOrganisationFactorySensor"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/sensors": {
        "get": operations["getOrganisationFactorySensors"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/trends": {
        "get": operations["getOrganisationFactoryTrends"];
    };
    "/organisations/{organisationId}/projects/{projectId}": {
        "get": operations["getOrganisationProject"];
    };
    "/organisations/{organisationId}/projects": {
        "get": operations["getOrganisationProjects"];
    };
    "/organisations/{organisationId}/sensors/aggregateData": {
        "get": operations["getOrganisationSensorsAggregateData"];
    };
    "/organisations/{organisationId}/sensors/aggregateEventData": {
        "get": operations["getOrganisationSensorsAggregateEventData"];
    };
    "/organisations/{organisationId}/sensors/aggregateEventRangeData": {
        "get": operations["getOrganisationSensorsAggregateEventRangeData"];
    };
    "/organisations/{organisationId}/sensors/data": {
        "get": operations["getOrganisationSensorsData"];
    };
    "/organisations/{organisationId}/sensors/eventData": {
        "get": operations["getOrganisationSensorsEventData"];
    };
    "/organisations/{organisationId}/sensors/eventRangeDataSchema": {
        "get": operations["getOrganisationSensorsEventRangeData"];
    };
    "/organisations/{organisationId}/search": {
        "get": operations["getOrganisationUniversalSearch"];
    };
    "/reports/{reportId}": {
        put: operations["putReport"];
    };
    "/search": {
        "get": operations["getUniversalSearch"];
    };
    "/users/{userId}": {
        "get": operations["getUser"];
        put: operations["putUser"];
    };
    "/users/{userId}/factories": {
        "get": operations["getUserFactories"];
    };
    "/users/{userId}/notifications": {
        "get": operations["getUserNotifications"];
    };
    "/users/{userId}/organisations/{organisationId}": {
        "get": operations["getUserOrganisation"];
        put: operations["putUserOrganisation"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts": {
        "get": operations["getUserOrganisationAlerts"];
    };
    "/users/{userId}/organisations/{organisationId}/applications": {
        "get": operations["getUserOrganisationApplications"];
        post: operations["postUserOrganisationApplication"];
    };
    "/users/{userId}/organisations/{organisationId}/factories": {
        "get": operations["getUserOrganisationFactories"];
        post: operations["postUserOrganisationFactory"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences": {
        "get": operations["getUserOrganisationFactoryPreferences"];
    };
    "/users/{userId}/organisations/{organisationId}/tasks": {
        "get": operations["getUserOrganisationTasks"];
    };
    "/users/{userId}/organisations/{organisationId}/users": {
        "get": operations["getUserOrganisationUsers"];
    };
    "/users/{userId}/organisations": {
        "get": operations["getUserOrganisations"];
        post: operations["postUserOrganisation"];
    };
    "/users": {
        post: operations["postUser"];
    };
    "/auth/login": {
        post: operations["postAuthLogin"];
    };
    "/auth/logout": {
        post: operations["postAuthLogout"];
    };
    "/auth/changePassword": {
        post: operations["postAuthPasswordChange"];
    };
    "/auth/refresh": {
        post: operations["postAuthRefresh"];
    };
    "/auth/verify": {
        post: operations["postAuthVerify"];
    };
    "/oauth2/token": {
        post: operations["postOAuth2Token"];
    };
    "/organisations/{organisationId}/data/{projectCode}": {
        post: operations["postOrganisationData"];
    };
    "/oauth2/reset": {
        post: operations["postPasswordChangeRequest"];
    };
    "/users/{userId}/invitations/response": {
        post: operations["postUserInvitationResponse"];
    };
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors": {
        post: operations["postUserOrganisationAssetSensor"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets": {
        post: operations["postUserOrganisationFactoryAsset"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions": {
        post: operations["postUserOrganisationFactoryIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors": {
        post: operations["postUserOrganisationFactorySensor"];
    };
    "/users/{userId}/organisations/{organisationId}/invitations": {
        post: operations["postUserOrganisationInvitation"];
    };
    "/users/{userId}/organisations/{organisationId}/invitation/followup": {
        post: operations["postUserOrganisationInvitationFollowup"];
    };
    "/organisations/{organisationId}/users/{userId}/notifications/{notificationId}/read": {
        post: operations["postUserOrganisationNotificationRead"];
    };
    "/users/{userId}/organisations/{organisationId}/projects": {
        post: operations["postUserOrganisationProject"];
    };
    "/attachments/{attachmentId}": {
        put: operations["putAttachment"];
    };
    "/images/{imageId}": {
        put: operations["putImage"];
    };
    "/notifications/{notificationId}": {
        put: operations["putNotificationEvent"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/events/{eventId}": {
        put: operations["putOrganisationFactoryEvent"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/feedback": {
        put: operations["putUserOrganisationAlertFeedback"];
    };
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors/{sensorId}": {
        put: operations["putUserOrganisationAssetSensor"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}": {
        put: operations["putUserOrganisationFactory"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
        put: operations["putUserOrganisationFactoryAsset"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
        put: operations["putUserOrganisationFactoryIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences/{level}": {
        put: operations["putUserOrganisationFactoryPreferences"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
        put: operations["putUserOrganisationFactorySensor"];
    };
    "/oauth2/authorize": {
        "get": operations["getOAuth2Authorize"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
declare interface operations {
    deleteAlert: {
        parameters: {
            path: {
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteApplication: {
        parameters: {
            path: {
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteIntervention: {
        parameters: {
            path: {
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteProject: {
        parameters: {
            path: {
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlert: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationAlert: {
        responses: {
            200: components["responses"]["AlertItemResponse"];
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlert: {
        requestBody: components["schemas"]["AlertModel"];
        responses: {
            201: components["responses"]["AlertItemResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlertAttachment: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                attachmentId: components["parameters"]["attachmentId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertAttachment: {
        requestBody: components["requestBodies"]["Attachment"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                attachmentId: components["parameters"]["attachmentId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["AttachmentFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlertImage: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationApplication: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationApplication: {
        requestBody: components["schemas"]["ApplicationModel"];
        responses: {
            201: {
                body: components["schemas"]["ApplicationItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationIntervention: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationInterventionImage: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationInterventionImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationMembership: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                collaboratorId: string;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationProject: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationProject: {
        requestBody: components["schemas"]["ProjectModel"];
        responses: {
            201: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationSensorSeries: {
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                sensorId: components["parameters"]["sensorId"];
                valueName: components["parameters"]["valueName"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getAlertsStats: {
        responses: {
            200: {
                body: components["schemas"]["AlertsStats"];
            };
        };
        parameters: {
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getAuthProfile: {
        responses: {
            200: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            headers: {
                cookie?: components["parameters"]["cookie"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getMySelf: {
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOpenAPI: {
        responses: {
            200: {
                body: object;
            };
        };
        parameters: {
            query: {
                mutedTags?: string[];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactory: {
        responses: {
            200: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAlertsStats: {
        responses: {
            200: {
                body: components["schemas"]["AlertsStat"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAsset: {
        responses: {
            200: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                assetId: components["parameters"]["assetId"];
            };
            query: {
                includeChildrenIds: components["parameters"]["IncludeChildrenIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAssets: {
        responses: {
            200: {
                body: components["schemas"]["AssetsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAssetsTypes?: components["parameters"]["OptionalWithAssetsTypes"];
                withRootAssetsFirst?: components["parameters"]["OptionalWithRootAssetsFirst"];
                withParentsAssetsIds?: components["parameters"]["OptionalWithParentsAssetsIds"];
                sortBy: components["parameters"]["assetsSortBy"];
                direction: components["parameters"]["direction"];
                includeChildrenIds: components["parameters"]["IncludeChildrenIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryDataLabels: {
        responses: {
            200: {
                body: {
                    key?: string;
                    doc_count?: number;
                }[];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryEvents: {
        responses: {
            200: {
                body: components["schemas"]["EventsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withEventsIds?: components["parameters"]["OptionalWithEventsIds"];
                withEventsTypes?: components["parameters"]["OptionalWithEventType"];
                sensorsIds?: components["parameters"]["OptionalsensorsIds"];
                valuesNames?: components["parameters"]["OptionalvaluesNames"];
                withUsersFeedback?: components["parameters"]["OptionalWithUsersFeedback"];
                since?: components["parameters"]["since"];
                before?: components["parameters"]["before"];
                size?: components["parameters"]["size"];
                beforeDate?: components["parameters"]["beforeDate"];
                afterDate?: components["parameters"]["afterDate"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryIntervention: {
        responses: {
            200: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryInterventions: {
        responses: {
            200: {
                body: components["schemas"]["InterventionsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withInterventionsIds?: components["parameters"]["OptionalWithInterventionsIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                sortBy: components["parameters"]["interventionsSortBy"];
                direction: components["parameters"]["direction"];
                withAttachments: components["parameters"]["WithAttachments"];
                withImages: components["parameters"]["WithImages"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryReports: {
        responses: {
            200: {
                body: components["schemas"]["ReportsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withReportsIds?: components["parameters"]["OptionalWithReportsIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["reportsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactorySensor: {
        responses: {
            200: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactorySensors: {
        responses: {
            200: {
                body: components["schemas"]["SensorsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                withAlertTriggerTypes?: components["parameters"]["withAlertTriggerTypes"];
                withFactorySensorsOnly: components["parameters"]["withFactorySensorsOnly"];
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withSensorsIds?: components["parameters"]["OptionalWithSensorsIds"];
                sortBy: components["parameters"]["sensorsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryTrends: {
        responses: {
            200: {
                body: components["schemas"]["TrendItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationProject: {
        responses: {
            200: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationProjects: {
        responses: {
            200: {
                body: components["schemas"]["ProjectsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                sortBy: components["parameters"]["projectsSortBy"];
                direction: components["parameters"]["direction"];
                withProjectsIds?: components["parameters"]["OptionalWithProjectsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    valuesNames: components["schemas"]["NonEmptyValuesNames"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                valuesNames: components["parameters"]["valuesNames"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateEventData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateEventRangeData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    measures: components["schemas"]["measures"];
                    valuesNames: components["schemas"]["NonEmptyValuesNames"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                valuesNames: components["parameters"]["valuesNames"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsEventData: {
        responses: {
            200: components["responses"]["EventDataResponse"];
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsEventRangeData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["RangeMeasures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationUniversalSearch: {
        responses: {
            200: {
                body: {
                    results?: {
                        id: components["schemas"]["UserUUID"] | components["schemas"]["FactoryUUID"] | components["schemas"]["ProjectUUID"] | components["schemas"]["AssetUUID"] | components["schemas"]["ApplicationUUID"] | components["schemas"]["InterventionUUID"] | components["schemas"]["AlertUUID"] | components["schemas"]["ReportUUID"] | components["schemas"]["SensorUUID"] | components["schemas"]["OrganisationUUID"];
                        type: components["schemas"]["SearchType"];
                        snippet?: string;
                    }[][];
                    suggestions?: object[];
                    start?: number;
                    total?: number;
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                searchType?: components["parameters"]["SearchType"];
                searchSentence: components["parameters"]["SearchSentence"];
                withFilterTypes?: components["parameters"]["WithFilterTypes"];
                withFilterIds?: components["parameters"]["WithFilterIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putReport: {
        requestBody: components["requestBodies"]["Report"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                reportId: components["parameters"]["reportId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUniversalSearch: {
        responses: {
            200: {
                body: {
                    results?: {
                        id: components["schemas"]["UserUUID"] | components["schemas"]["FactoryUUID"] | components["schemas"]["ProjectUUID"] | components["schemas"]["AssetUUID"] | components["schemas"]["ApplicationUUID"] | components["schemas"]["InterventionUUID"] | components["schemas"]["AlertUUID"] | components["schemas"]["ReportUUID"] | components["schemas"]["SensorUUID"] | components["schemas"]["OrganisationUUID"];
                        type: components["schemas"]["SearchType"];
                        snippet?: string;
                    }[][];
                    suggestions?: object[];
                    start?: number;
                    total?: number;
                };
            };
        };
        parameters: {
            query: {
                withOrganisationsIds?: components["parameters"]["OptionalWithOrganisationsIds"];
                searchSentence: components["parameters"]["SearchSentence"];
                searchType?: components["parameters"]["SearchType"];
                withFilterTypes?: components["parameters"]["WithFilterTypes"];
                withFilterIds?: components["parameters"]["WithFilterIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUser: {
        responses: {
            200: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                withMembershipsStatuses?: components["parameters"]["withMembershipsStatuses"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUser: {
        requestBody: components["schemas"]["UserModel"];
        responses: {
            201: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserFactories: {
        responses: {
            200: {
                body: components["schemas"]["FactoriesItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                sortBy: components["parameters"]["factoriesSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserNotifications: {
        responses: {
            200: {
                body: components["schemas"]["NotificationsItems"];
            };
        };
        parameters: {
            query: {
                withOrganisationsIds?: components["parameters"]["OptionalWithOrganisationsIds"];
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withNotificationTypes?: components["parameters"]["OptionalWithNotificationTypesQueryParameter"];
                includeOrganisationLevelItems?: components["parameters"]["IncludeOrganisationLevelItemsQueryParameter"];
            };
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisation: {
        responses: {
            200: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisation: {
        requestBody: components["schemas"]["OrganisationModel"];
        responses: {
            201: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationAlerts: {
        responses: {
            200: components["responses"]["AlertsCollection"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withSensorsIds?: components["parameters"]["OptionalWithSensorsIds"];
                withAlertsIds?: components["parameters"]["OptionalWithAlertsIds"];
                withStatuses?: components["parameters"]["withAlertsStatuses"];
                withOrphanAlertsOnly?: components["parameters"]["withOrphanAlertsOnly"];
                withAttachments: components["parameters"]["WithAttachments"];
                withImages: components["parameters"]["WithImages"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["alertsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationApplications: {
        responses: {
            200: {
                body: components["schemas"]["ApplicationsItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                sortBy: components["parameters"]["applicationsSortBy"];
                direction: components["parameters"]["direction"];
                withApplicationsIds?: components["parameters"]["OptionalWithApplicationsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationApplication: {
        requestBody: components["schemas"]["ApplicationModel"];
        responses: {
            201: {
                body: components["schemas"]["ApplicationItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationFactories: {
        responses: {
            200: {
                body: components["schemas"]["FactoriesItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                sortBy: components["parameters"]["factoriesSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactory: {
        requestBody: components["schemas"]["FactoryModel"];
        responses: {
            201: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationFactoryPreferences: {
        responses: {
            200: components["responses"]["AllPreferencesResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationTasks: {
        responses: {
            200: components["responses"]["TasksCollection"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withUsersIds?: components["parameters"]["OptionalWithUsersIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withTypes: components["parameters"]["withTasksTypes"];
                withStatuses: components["parameters"]["withTasksStatuses"];
                withPriorities: components["parameters"]["withPriorities"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["tasksSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationUsers: {
        responses: {
            200: {
                body: components["schemas"]["UsersItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withUsersIds?: components["parameters"]["OptionalWithUsersIds"];
                withMembershipsStatuses?: components["parameters"]["withMembershipsStatuses"];
                sortBy: components["parameters"]["usersSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisations: {
        responses: {
            200: {
                body: components["schemas"]["OrganisationsItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                sortBy: components["parameters"]["organisationsSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisation: {
        requestBody: components["schemas"]["OrganisationModel"];
        responses: {
            201: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUser: {
        requestBody: components["schemas"]["UserModel"];
        responses: {
            201: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            query: {
                invitationToken?: string;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthLogin: {
        requestBody: {
            username: string;
            password: string;
            scope?: string;
            remember?: boolean;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: string;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthLogout: {
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthPasswordChange: {
        requestBody?: {
            token: string;
            oldPassword?: string;
            newPassword: string;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: number;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthRefresh: {
        requestBody: {
            scope?: string;
            remember?: boolean;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: string;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                cookie?: components["parameters"]["cookie"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthVerify: {
        requestBody?: {
            verifyToken: string;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: number;
                    token_type?: string;
                };
                headers: {
                    "set-cookie"?: string[];
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postOAuth2Token: {
        requestBody: components["schemas"]["TokenRequestBody"] | components["schemas"]["TokenRequestBody"];
        responses: {
            200: {
                body: {
                    access_token: string;
                    token_type: "bearer" | "mac";
                    expires_in?: number;
                    refresh_token?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postOrganisationData: {
        requestBody: components["schemas"]["InputData"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                projectCode: components["parameters"]["projectCode"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postPasswordChangeRequest: {
        requestBody: {
            email: string;
        };
        responses: {
            200: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserInvitationResponse: {
        requestBody: {
            accepted: boolean;
            organisationId: components["schemas"]["OrganisationUUID"];
        };
        responses: {
            200: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationAssetSensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                assetId: components["parameters"]["assetId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactoryAsset: {
        requestBody: components["schemas"]["AssetModel"];
        responses: {
            201: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactoryIntervention: {
        requestBody: components["schemas"]["InterventionModel"];
        responses: {
            201: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactorySensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationInvitation: {
        requestBody: components["schemas"]["UserOrganisationInvitation"];
        responses: {
            201: {
                body: {
                    user: components["schemas"]["UserItem"];
                    token: string;
                };
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationInvitationFollowup: {
        requestBody: {
            userId: components["schemas"]["UserUUID"];
        };
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationNotificationRead: {
        responses: {
            201: object;
        };
        parameters: {
            query: {
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
            };
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                notificationId: components["parameters"]["notificationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationProject: {
        requestBody: components["schemas"]["ProjectModel"];
        responses: {
            201: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putAttachment: {
        requestBody: components["requestBodies"]["Attachment"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                attachmentId: components["parameters"]["attachmentId"];
            };
            query: {
                withAlertId?: components["parameters"]["withAlertId"];
                withReportId?: components["parameters"]["withReportId"];
                withInterventionId?: components["parameters"]["withInterventionId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["AttachmentFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            query: {
                withAlertId?: components["parameters"]["withAlertId"];
                withInterventionId?: components["parameters"]["withInterventionId"];
            };
            path: {
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putNotificationEvent: {
        requestBody: components["schemas"]["NotificationEvent"];
        parameters: {
            path: {
                notificationId: components["parameters"]["notificationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putOrganisationFactoryEvent: {
        requestBody: components["schemas"]["EventModel"];
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                eventId: components["parameters"]["eventId"];
            };
            query: {
                hasAttachments?: boolean;
                hasImages?: boolean;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertFeedback: {
        requestBody: {
            userFeedback: components["schemas"]["userFeedback"];
        };
        responses: {
            201: object;
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAssetSensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                assetId: components["parameters"]["assetId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactory: {
        requestBody: components["schemas"]["FactoryModel"];
        responses: {
            201: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryAsset: {
        requestBody: components["schemas"]["AssetModel"];
        responses: {
            201: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
                assetId: components["parameters"]["assetId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryIntervention: {
        requestBody: components["schemas"]["InterventionModel"];
        responses: {
            201: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryPreferences: {
        requestBody: components["schemas"]["PartialPreferencesModel"];
        responses: {
            201: components["responses"]["PreferencesResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                level: components["parameters"]["PreferenceLevel"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactorySensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOAuth2Authorize: {
        parameters: {
            query: {
                response_type: components["parameters"]["responseType"];
                client_id: components["parameters"]["clientId"];
                redirect_uri?: components["parameters"]["redirectURI"];
                scope?: components["parameters"]["scope"];
                state: components["parameters"]["state"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getPing: {
        responses: {
            200: {
                body: {
                    pong?: "pong";
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
}
declare interface components {
    responses: {
        AlertItemResponse: {
            body: components["schemas"]["AlertItem"];
        };
        EventDataResponse: {
            body: components["schemas"]["SensorsEventData"];
        };
        AlertsCollection: {
            body: components["schemas"]["AlertsItems"];
        };
        AllPreferencesResponse: {
            body: components["schemas"]["AllPreferencesModel"];
        };
        TasksCollection: {
            body: {
                total: number;
                stats: {
                    alert?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                    intervention?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                    _all?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                };
                items: components["schemas"]["TasksModel"];
            };
        };
        PreferencesResponse: {
            body: components["schemas"]["PartialPreferencesModel"];
        };
    };
    parameters: {
        applicationId: components["schemas"]["ApplicationUUID"];
        valueName: components["schemas"]["ValueName"];
        OptionalWithAssetsTypes: components["schemas"]["AssetType"][];
        OptionalWithRootAssetsFirst: boolean;
        OptionalWithParentsAssetsIds: components["schemas"]["AssetsUUIDS"];
        assetsSortBy: [
            components["schemas"]["assetsSortByValue"],
            ...components["schemas"]["assetsSortByValue"][]
        ];
        IncludeChildrenIds: boolean;
        OptionalWithEventsIds: components["schemas"]["EventsUUIDS"];
        OptionalWithEventType: components["schemas"]["EventTypes"];
        OptionalsensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
        OptionalvaluesNames: components["schemas"]["NonEmptyValuesNames"];
        OptionalWithUsersFeedback: boolean;
        since: components["schemas"]["Cursor"];
        before: components["schemas"]["Cursor"];
        size: components["schemas"]["Size"];
        beforeDate: components["schemas"]["Date"];
        afterDate: components["schemas"]["Date"];
        OptionalWithInterventionsIds: components["schemas"]["InterventionsUUIDS"];
        interventionsSortBy: [
            components["schemas"]["interventionsSortByValue"],
            ...components["schemas"]["interventionsSortByValue"][]
        ];
        OptionalWithReportsIds: components["schemas"]["ReportsUUIDS"];
        reportsSortBy: [
            components["schemas"]["reportsSortByValue"],
            ...components["schemas"]["reportsSortByValue"][]
        ];
        withAlertTriggerTypes: components["schemas"]["AlertTriggerTypes"];
        withFactorySensorsOnly: boolean;
        sensorsSortBy: [
            components["schemas"]["sensorsSortByValue"],
            ...components["schemas"]["sensorsSortByValue"][]
        ];
        projectId: components["schemas"]["ProjectUUID"];
        projectsSortBy: [
            components["schemas"]["projectsSortByValue"],
            ...components["schemas"]["projectsSortByValue"][]
        ];
        OptionalWithProjectsIds: components["schemas"]["ProjectsUUIDS"];
        aggregations: components["schemas"]["aggregations"];
        WithTimeZone: components["schemas"]["TimeZone"];
        valuesNames: components["schemas"]["NonEmptyValuesNames"];
        includeLabels: boolean;
        sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
        sensorEventTypesQueryParameter: components["schemas"]["EventTypes"];
        eventFieldsQueryParameter: components["schemas"]["EventFields"];
        OptionalWithDataLabels: components["schemas"]["Tags"];
        OptionalWithValuedLabelsNames: components["schemas"]["ValuedLabelName"][];
        OptionalWithValuedLabelsValues: components["schemas"]["LabelValue"][];
        OptionalWithAssetConfigurations: components["schemas"]["AssetConfigurations"];
        OptionalWithManufacturingPhases: components["schemas"]["ManufacturingPhases"];
        OptionalWithManufacturingCycles: components["schemas"]["ManufacturingCycles"];
        reportId: components["schemas"]["ReportUUID"];
        SearchSentence: string;
        SearchType: components["schemas"]["SearchType"];
        WithFilterTypes: components["schemas"]["SearchFilterType"][];
        WithFilterIds: components["schemas"]["UUID"][];
        OptionalWithOrganisationsIds: components["schemas"]["OrganisationsUUIDS"];
        OptionalWithNotificationTypesQueryParameter: components["schemas"]["NotificationTypes"];
        IncludeOrganisationLevelItemsQueryParameter: boolean;
        OptionalWithSensorsIds: components["schemas"]["SensorsUUIDS"];
        OptionalWithAlertsIds: components["schemas"]["AlertsUUIDS"];
        withAlertsStatuses: components["schemas"]["AlertStatuses"];
        withOrphanAlertsOnly: boolean;
        WithAttachments: boolean;
        WithImages: boolean;
        alertsSortBy: [
            components["schemas"]["alertsSortByValue"],
            ...components["schemas"]["alertsSortByValue"][]
        ];
        applicationsSortBy: [
            components["schemas"]["applicationsSortByValue"],
            ...components["schemas"]["applicationsSortByValue"][]
        ];
        OptionalWithApplicationsIds: components["schemas"]["ApplicationsUUIDS"];
        factoriesSortBy: [
            components["schemas"]["factoriesSortByValue"],
            ...components["schemas"]["factoriesSortByValue"][]
        ];
        OptionalWithFactoriesIds: components["schemas"]["FactoriesUUIDS"];
        OptionalWithAssetsIds: components["schemas"]["AssetsUUIDS"];
        OptionalWithAncestorsIds: components["schemas"]["AssetsUUIDS"];
        withTasksTypes: components["schemas"]["TasksTypes"];
        withTasksStatuses: components["schemas"]["TasksStatuses"];
        withPriorities: components["schemas"]["Priorities"];
        fromFilter: components["schemas"]["Date"];
        toFilter: components["schemas"]["Date"];
        tasksSortBy: [
            components["schemas"]["tasksSortByValue"],
            ...components["schemas"]["tasksSortByValue"][]
        ];
        OptionalWithUsersIds: components["schemas"]["UsersUUIDS"];
        withMembershipsStatuses: components["schemas"]["UserMembershipStatus"][];
        usersSortBy: [
            components["schemas"]["usersSortByValue"],
            ...components["schemas"]["usersSortByValue"][]
        ];
        organisationsSortBy: [
            components["schemas"]["organisationsSortByValue"],
            ...components["schemas"]["organisationsSortByValue"][]
        ];
        direction: [
            components["schemas"]["SortDirection"],
            ...components["schemas"]["SortDirection"][]
        ];
        limit: components["schemas"]["Limit"];
        start: components["schemas"]["Start"];
        cookie: string;
        projectCode: components["schemas"]["ProjectCode"];
        "from": components["schemas"]["Date"];
        to: components["schemas"]["Date"];
        attachmentId: components["schemas"]["AttachmentUUID"];
        withReportId: components["schemas"]["ReportUUID"];
        AttachmentFileType: "application/pdf" | "text/html";
        withAlertId: components["schemas"]["AlertUUID"];
        withInterventionId: components["schemas"]["InterventionUUID"];
        imageId: components["schemas"]["ImageUUID"];
        FileName: string;
        FileSize: number;
        ImageFileType: "image/jpeg" | "image/png";
        notificationId: components["schemas"]["NotificationUUID"];
        eventId: components["schemas"]["EventUUID"];
        alertId: components["schemas"]["AlertUUID"];
        assetId: components["schemas"]["AssetUUID"];
        interventionId: components["schemas"]["InterventionUUID"];
        PreferenceLevel: components["schemas"]["PreferenceLevel"];
        userId: components["schemas"]["UserUUID"];
        organisationId: components["schemas"]["OrganisationUUID"];
        factoryId: components["schemas"]["FactoryUUID"];
        sensorId: components["schemas"]["SensorUUID"];
        responseType: "code" | "token";
        clientId: string;
        redirectURI: string;
        scope: string;
        state: string;
        xSdkVersion: string;
        xApplicationVersion: string;
        xApiVersion: string;
    };
    requestBodies: {
        Report: components["schemas"]["ReportModel"];
        Attachment: components["schemas"]["BinaryModel"] | components["schemas"]["BinaryModel"];
        Image: components["schemas"]["BinaryModel"] | components["schemas"]["BinaryModel"];
    };
    schemas: {
        AlertItem: {
            item: components["schemas"]["AlertUUID"];
            alerts: components["schemas"]["AlertModelHash"];
            interventions?: components["schemas"]["InterventionModelHash"];
            sensors?: components["schemas"]["SensorModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            images?: components["schemas"]["ImageModelHash"];
        };
        AlertModel: components["schemas"]["SynchronizableItem"] & components["schemas"]["BaseAlertModel"];
        AttachmentUUID: string & {
            _type?: "AttachmentUUID";
        };
        BinaryModel: string & {
            _type?: "BinaryModel";
        };
        ImageUUID: string & {
            _type?: "ImageUUID";
        };
        ValueName: string & {
            _type?: "ValueName";
        };
        AlertsStats: components["schemas"]["AlertsStat"][];
        FactoriesUUIDS: components["schemas"]["FactoryUUID"][];
        AlertsStat: {
            organisationId: components["schemas"]["OrganisationUUID"];
            stats: {
                discarded: number;
                fixed: number;
                closed: number;
                open: number;
                total: number;
            };
        };
        AssetsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["AssetsUUIDS"];
            assets: components["schemas"]["AssetModelHash"];
        };
        AssetsUUIDS: components["schemas"]["AssetUUID"][];
        AssetType: ("area" | "line" | "machine" | "part") & {
            _type?: "AssetType";
        };
        assetsSortByValue: "creation" | "lastModification" | "name";
        SortDirection: ("asc" | "desc") & {
            _type?: "SortDirection";
        };
        Limit: (10 | 50 | 100 | 500 | 1000) & {
            _type?: "Limit";
        };
        Start: number & {
            _type?: "Start";
        };
        EventsItems: {
            total: number;
            cursors: {
                before?: components["schemas"]["Cursor"];
                since?: components["schemas"]["Cursor"];
            };
            items: components["schemas"]["EventsUUIDS"];
            events: components["schemas"]["EventModelHash"];
        };
        AssetConfigurations: components["schemas"]["AssetConfiguration"][];
        ManufacturingPhases: components["schemas"]["ManufacturingPhase"][];
        ManufacturingCycles: components["schemas"]["ManufacturingCycle"][];
        EventsUUIDS: components["schemas"]["EventUUID"][];
        EventTypes: components["schemas"]["EventType"][];
        Cursor: string & {
            _type?: "Cursor";
        };
        Size: number & {
            _type?: "Size";
        };
        InterventionsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["InterventionsUUIDS"];
            interventions: components["schemas"]["InterventionModelHash"];
            alerts?: components["schemas"]["AlertModelHash"];
            images?: components["schemas"]["ImageModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            users?: components["schemas"]["UserModelHash"];
        };
        InterventionsUUIDS: components["schemas"]["InterventionUUID"][];
        interventionsSortByValue: "creation" | "lastModification" | "priority";
        ReportsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ReportsUUIDS"];
            reports: components["schemas"]["ReportModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
        };
        ReportsUUIDS: components["schemas"]["ReportUUID"][];
        reportsSortByValue: "creation" | "lastModification" | "name";
        SensorsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["SensorsUUIDS"];
            sensors: components["schemas"]["SensorModelHash"];
            assets?: components["schemas"]["AssetModelHash"];
        };
        AlertTriggerTypes: components["schemas"]["AlertType"][];
        SensorsUUIDS: components["schemas"]["SensorUUID"][];
        sensorsSortByValue: "creation" | "lastModification" | "name";
        TrendItems: {
            total: number;
            items: components["schemas"]["UUIDS"];
            trends: components["schemas"]["TrendModelHash"];
        };
        ProjectsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ProjectsUUIDS"];
            projects: components["schemas"]["ProjectModelHash"];
        };
        projectsSortByValue: "creation" | "lastModification" | "name";
        ProjectsUUIDS: components["schemas"]["ProjectUUID"][];
        Tags: components["schemas"]["LabelValue"][];
        ValuedLabelName: string & {
            _type?: "ValuedLabelName";
        };
        LabelValue: string & {
            _type?: "LabelValue";
        };
        TimeZone: string & {
            _type?: "TimeZone";
        };
        aggregations: components["schemas"]["aggregation"][];
        measures: {
            date: components["schemas"]["Date"];
            values: number[];
            qualities?: number[];
            labels?: string[][];
            labelsCount?: number[][];
        }[];
        NonEmptyValuesNames: [
            components["schemas"]["ValueName"],
            ...components["schemas"]["ValueName"][]
        ];
        SensorsEventData: {
            from: components["schemas"]["Date"];
            to: components["schemas"]["Date"];
            sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
            eventFields: components["schemas"]["EventFields"];
            configuration?: components["schemas"]["AssetConfiguration"];
            phase?: components["schemas"]["ManufacturingPhase"];
            measures: components["schemas"]["measures"];
        };
        Date: string & {
            _type?: "Date";
        };
        NonEmptySensorsUUIDS: [
            components["schemas"]["SensorUUID"],
            ...components["schemas"]["SensorUUID"][]
        ];
        EventFields: components["schemas"]["EventField"][];
        AssetConfiguration: string & {
            _type?: "AssetConfiguration";
        };
        ManufacturingPhase: string & {
            _type?: "ManufacturingPhase";
        };
        RangeMeasures: {
            startDate: components["schemas"]["Date"];
            endDate: components["schemas"]["Date"];
            value: number;
            quality?: number;
            labels?: string[];
        }[][];
        SearchFilterType: ("factory" | "asset") & {
            _type?: "SearchFilterType";
        };
        UUID: string & {
            _type?: "UUID";
        };
        ReportModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["ReportUUID"];
            attachmentId?: components["schemas"]["AttachmentUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            authorId: components["schemas"]["UserUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            data: components["schemas"]["ReportData"];
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        };
        FactoryUUID: string & {
            _type?: "FactoryUUID";
        };
        ProjectUUID: string & {
            _type?: "ProjectUUID";
        };
        AssetUUID: string & {
            _type?: "AssetUUID";
        };
        ApplicationUUID: string & {
            _type?: "ApplicationUUID";
        };
        InterventionUUID: string & {
            _type?: "InterventionUUID";
        };
        AlertUUID: string & {
            _type?: "AlertUUID";
        };
        ReportUUID: string & {
            _type?: "ReportUUID";
        };
        SensorUUID: string & {
            _type?: "SensorUUID";
        };
        SearchType: ("user" | "factory" | "project" | "asset" | "application" | "intervention" | "alert" | "report" | "sensor" | "organisation") & {
            _type?: "SearchType";
        };
        OrganisationsUUIDS: components["schemas"]["OrganisationUUID"][];
        UserMembershipStatus: ("member" | "pending" | "declined" | "cancelled") & {
            _type?: "UserMembershipStatus";
        };
        factoriesSortByValue: "creation" | "lastModification" | "name";
        NotificationsItems: {
            total: components["schemas"]["Total"];
            items: components["schemas"]["NotificationsUUIDS"];
            notifications: components["schemas"]["NotificationModelHash"];
        };
        NotificationTypes: components["schemas"]["NotificationType"][];
        AlertsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["AlertsUUIDS"];
            alerts: components["schemas"]["AlertModelHash"];
            interventions?: components["schemas"]["InterventionModelHash"];
            sensors?: components["schemas"]["SensorModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            images?: components["schemas"]["ImageModelHash"];
        };
        AlertsUUIDS: components["schemas"]["AlertUUID"][];
        AlertStatuses: [
            components["schemas"]["AlertStatus"],
            ...components["schemas"]["AlertStatus"][]
        ];
        alertsSortByValue: "severity" | "priority" | "assignedAt" | "startAt" | "creation" | "lastModification";
        ApplicationsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ApplicationsUUIDS"];
            applications: components["schemas"]["ApplicationModelHash"];
        };
        applicationsSortByValue: "creation" | "lastModification" | "name";
        ApplicationsUUIDS: components["schemas"]["ApplicationUUID"][];
        ApplicationModel: {
            id?: components["schemas"]["ApplicationUUID"];
            authorId?: components["schemas"]["UserUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            data: components["schemas"]["ApplicationData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            secret?: string;
        };
        ApplicationItem: {
            item: components["schemas"]["ApplicationUUID"];
            applications: components["schemas"]["ApplicationModelHash"];
        };
        FactoriesItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["FactoriesUUIDS"];
            factories: components["schemas"]["FactoryModelHash"];
        };
        AllPreferencesModel: {
            default: components["schemas"]["DefaultPreferencesModel"];
            organisation: components["schemas"]["PartialPreferencesModel"];
            factory?: components["schemas"]["PartialPreferencesModel"];
            user: components["schemas"]["PartialPreferencesModel"];
        };
        TasksModel: components["schemas"]["TaskModel"][];
        UsersUUIDS: components["schemas"]["UserUUID"][];
        TasksTypes: [
            components["schemas"]["TaskType"],
            ...components["schemas"]["TaskType"][]
        ];
        TasksStatuses: [
            components["schemas"]["TaskStatus"],
            ...components["schemas"]["TaskStatus"][]
        ];
        Priorities: [
            components["schemas"]["Priority"],
            ...components["schemas"]["Priority"][]
        ];
        tasksSortByValue: "creation" | "lastModification";
        UsersItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["UsersUUIDS"];
            users: components["schemas"]["UserModelHash"];
        };
        usersSortByValue: "creation" | "lastModification" | "name";
        OrganisationsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["OrganisationsUUIDS"];
            organisations: components["schemas"]["OrganisationModelHash"];
        };
        organisationsSortByValue: "creation" | "lastModification";
        OrganisationModel: {
            id?: components["schemas"]["OrganisationUUID"];
            factoriesIds?: components["schemas"]["FactoriesUUIDS"];
            data: components["schemas"]["OrganisationData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        OrganisationItem: {
            item: components["schemas"]["OrganisationUUID"];
            organisations: components["schemas"]["OrganisationModelHash"];
        };
        UserModel: {
            id?: components["schemas"]["UserUUID"];
            roles?: components["schemas"]["Role"][];
            password?: string;
            memberships?: components["schemas"]["UserMembership"][];
            data: components["schemas"]["UserData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            emailStatus?: components["schemas"]["emailStatus"];
        };
        TokenRequestBody: components["schemas"]["PasswordRequestBody"] | components["schemas"]["AuthorizationCodeRequestBody"] | components["schemas"]["ClientCredentialsRequestBody"] | components["schemas"]["RefreshTokenRequestBody"] | components["schemas"]["VerifyTokenRequestBody"] | components["schemas"]["PasswordChangeBody"];
        InputData: components["schemas"]["GroupedInputData"] | components["schemas"]["DenormalizedInputData"];
        ProjectCode: string & {
            _type?: "ProjectCode";
        };
        OrganisationUUID: string & {
            _type?: "OrganisationUUID";
        };
        UserOrganisationInvitation: {
            email: string;
            givenName: string;
            familyName: string;
            membership: components["schemas"]["FactoryScopedUserOrganisationMembership"] | components["schemas"]["GlobalUserOrganisationMembership"];
        };
        UserItem: {
            item: components["schemas"]["UserUUID"];
            users: components["schemas"]["UserModelHash"];
        };
        UserUUID: string & {
            _type?: "UserUUID";
        };
        NotificationUUID: string & {
            _type?: "NotificationUUID";
        };
        ProjectModel: {
            id?: components["schemas"]["ProjectUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            author?: components["schemas"]["UserUUID"];
            data: components["schemas"]["ProjectData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        ProjectItem: {
            item: components["schemas"]["ProjectUUID"];
            projects: components["schemas"]["ProjectModelHash"];
        };
        NotificationEvent: components["schemas"]["AlertDeletedEvent"] | components["schemas"]["AlertUpsertedEvent"] | components["schemas"]["AlgorithmModelUpdatedEvent"] | components["schemas"]["ApplicationDeletedEvent"] | components["schemas"]["ApplicationUpsertedEvent"] | components["schemas"]["AssetDeletedEvent"] | components["schemas"]["AssetUpsertedEvent"] | components["schemas"]["EmailStatusUpdatedEvent"] | components["schemas"]["FactoryDeletedEvent"] | components["schemas"]["FactoryUpsertedEvent"] | components["schemas"]["InterventionDeletedEvent"] | components["schemas"]["InterventionUpsertedEvent"] | components["schemas"]["MembershipCancelledEvent"] | components["schemas"]["OrganisationDeletedEvent"] | components["schemas"]["OrganisationPreferencesUpsertedEvent"] | components["schemas"]["OrganisationUpsertedEvent"] | components["schemas"]["OrganisationUserUpdatedEvent"] | components["schemas"]["PasswordChangeRequestedEvent"] | components["schemas"]["ProjectDeletedEvent"] | components["schemas"]["ProjectUpsertedEvent"] | components["schemas"]["ReportDeletedEvent"] | components["schemas"]["ReportUpsertedEvent"] | components["schemas"]["SensorDeletedEvent"] | components["schemas"]["SensorSeriesDeletedEvent"] | components["schemas"]["SensorUpsertedEvent"] | components["schemas"]["UserCreatedEvent"] | components["schemas"]["UserFeedbackUpdatedEvent"] | components["schemas"]["UserInvitedInOrganisationEvent"] | components["schemas"]["UserUpdatedEvent"] | components["schemas"]["VirtualSensorComputeRequestedEvent"];
        EventModel: components["schemas"]["SegmentedAlertDetectionPredictEventModel"] | components["schemas"]["ForecastLearnEventModel"] | components["schemas"]["RealtimeAlertEventSchemaModel"] | components["schemas"]["DriftDetectionEventModel"] | components["schemas"]["ForecastPredictEventModel"] | components["schemas"]["DSPADPredictEventModel"] | components["schemas"]["ProcessEventSchemaModel"] | components["schemas"]["AnomalyEventModel"] | components["schemas"]["DSPADDataAnalysisEventModel"] | components["schemas"]["CycleEventModel"] | components["schemas"]["PhaseEventModel"];
        EventUUID: string & {
            _type?: "EventUUID";
        };
        userFeedback: number;
        FactoryModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["FactoryUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            rootAssetsIds?: components["schemas"]["AssetsUUIDS"];
            linkedOrganisationsIds?: components["schemas"]["OrganisationsUUIDS"];
            data: components["schemas"]["FactoryData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        FactoryItem: {
            item: components["schemas"]["FactoryUUID"];
            factories: components["schemas"]["FactoryModelHash"];
        };
        AssetModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["AssetUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            childrenIds?: components["schemas"]["AssetsUUIDS"];
            ancestorsIds?: components["schemas"]["AssetsUUIDS"];
            metrics?: components["schemas"]["LineMetrics"];
            currentConfiguration?: components["schemas"]["AssetConfiguration"];
            currentPhase?: components["schemas"]["ManufacturingPhase"];
            currentCycle?: components["schemas"]["ManufacturingCycle"];
            powerState?: "unknown" | "on" | "off";
            operatingState?: "unknown" | "normal" | "stopped" | "idle";
            healthState?: "unknown" | "good" | "faulty" | "erroring";
            data: components["schemas"]["AssetData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        AssetItem: {
            item: components["schemas"]["AssetUUID"];
            assets: components["schemas"]["AssetModelHash"];
        };
        InterventionModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["InterventionUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            authorId?: components["schemas"]["UserUUID"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            qualifiedAt?: components["schemas"]["Date"];
            reportedAt?: components["schemas"]["Date"];
            archivedAt?: components["schemas"]["Date"];
            taskStatus?: components["schemas"]["TaskStatus"];
            data: components["schemas"]["InterventionData"];
        };
        InterventionItem: {
            item: components["schemas"]["InterventionUUID"];
            interventions: components["schemas"]["InterventionModelHash"];
            alerts?: components["schemas"]["AlertModelHash"];
            images?: components["schemas"]["ImageModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            users?: components["schemas"]["UserModelHash"];
        };
        PartialPreferencesModel: {
            displayParentName?: boolean;
            sensorDisplayExternalId?: boolean;
            sensorDisplaySerie?: components["schemas"]["SensorDisplaySerie"];
            useFactoryTimeZone?: boolean;
            showGraphLabels?: boolean;
            showGraphConfigurations?: boolean;
            showGraphCycles?: boolean;
            showGraphPhases?: boolean;
        };
        PreferenceLevel: ("organisation" | "factory" | "user") & {
            _type?: "PreferenceLevel";
        };
        SensorModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["SensorUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            assetId?: components["schemas"]["AssetUUID"];
            data: components["schemas"]["SensorData"];
            stats?: components["schemas"]["SensorStats"];
            inferredType?: components["schemas"]["SensorInferredType"];
            firstEmission?: components["schemas"]["FirstEmission"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            queries?: {
                [pattern: string]: components["schemas"]["SensorQuery"];
            };
        };
        SensorItem: {
            item: components["schemas"]["SensorUUID"];
            sensors: components["schemas"]["SensorModelHash"];
            assets?: components["schemas"]["AssetModelHash"];
        };
        AlertModelHash: {
            [pattern: string]: components["schemas"]["AlertModel"];
        };
        InterventionModelHash: {
            [pattern: string]: components["schemas"]["InterventionModel"];
        };
        SensorModelHash: {
            [pattern: string]: components["schemas"]["SensorModel"];
        };
        AttachmentModelHash: {
            [pattern: string]: components["schemas"]["AttachmentModel"];
        };
        ImageModelHash: {
            [pattern: string]: components["schemas"]["ImageModel"];
        };
        SynchronizableItem: {
            syncMode?: components["schemas"]["NoSyncMode"];
            externalId?: string;
        } | {
            syncMode: components["schemas"]["DoSyncMode"];
            externalId?: string;
        };
        BaseAlertModel: {
            id?: components["schemas"]["AlertUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            assetId?: components["schemas"]["AssetUUID"];
            assignations?: components["schemas"]["AlertAssignations"];
            interventionId?: components["schemas"]["InterventionUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            sensorsIds?: components["schemas"]["SensorsUUIDS"];
            sensorsValues?: components["schemas"]["ValuesNames"];
            eventsIds?: components["schemas"]["EventsUUIDS"];
            recurringAlertId?: components["schemas"]["AlertUUID"];
            startAt?: components["schemas"]["Date"];
            endAt?: components["schemas"]["Date"];
            taskStatus?: components["schemas"]["TaskStatus"];
            status?: components["schemas"]["AlertStatus"];
            usersFeedback?: components["schemas"]["usersFeedback"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            data?: components["schemas"]["BaseAlertData"];
        };
        ApplicationData: {
            name: string;
            description: string;
            allowedScopes: [
                components["schemas"]["Scope"],
                ...components["schemas"]["Scope"][]
            ];
            allowedGrantTypes: [
                components["schemas"]["GrantType"],
                ...components["schemas"]["GrantType"][]
            ];
            callbackUrl: string;
            isActive: boolean;
        };
        ApplicationModelHash: {
            [pattern: string]: components["schemas"]["ApplicationModel"];
        };
        ProjectData: {
            name: string;
            description: string;
            projectCode: components["schemas"]["ProjectCode"];
            algorithms: components["schemas"]["MLAlgorithms"];
            bridge: {
                type: "push";
            } | {
                type: "pull";
                handler?: string;
                schedule?: string;
            };
            ingestion?: components["schemas"]["ProjectIngestion"];
            indexation?: components["schemas"]["ProjectIndexation"];
        };
        ProjectModelHash: {
            [pattern: string]: components["schemas"]["ProjectModel"];
        };
        UserModelHash: {
            [pattern: string]: components["schemas"]["UserModel"];
        };
        FactoryModelHash: {
            [pattern: string]: components["schemas"]["FactoryModel"];
        };
        AssetModelHash: {
            [pattern: string]: components["schemas"]["AssetModel"];
        };
        Total: number & {
            _type?: "Total";
        };
        EventModelHash: {
            [pattern: string]: components["schemas"]["EventModel"];
        };
        ManufacturingCycle: string & {
            _type?: "ManufacturingCycle";
        };
        EventType: ("segmented_anomaly_detection_predict" | "univariate_forecast_learn" | "realtime_alert" | "drift_detection" | "univariate_forecast_predict" | "dspad_predict" | "process" | "anomaly" | "dspad_data_mvt" | "cycle" | "phase") & {
            _type?: "EventType";
        };
        ReportModelHash: {
            [pattern: string]: components["schemas"]["ReportModel"];
        };
        AlertType: ("realtime" | "silence") & {
            _type?: "AlertType";
        };
        UUIDS: components["schemas"]["UUID"][];
        TrendModelHash: {
            [pattern: string]: components["schemas"]["TrendModel"];
        };
        aggregation: "min" | "max" | "avg" | "count" | "sum" | "p25" | "median" | "p75" | "top1" | "top2" | "top3" | "others";
        EventField: "aggregatableValue1" | "aggregatableValue2" | "aggregatableValue3";
        ReportData: {
            name: string;
            description: string;
        };
        Role: ("admin" | "user" | "candidate" | "third") & {
            _type?: "Role";
        };
        UserMembership: (components["schemas"]["FactoryScopedUserOrganisationMembership"] | components["schemas"]["GlobalUserOrganisationMembership"]) & {
            id: components["schemas"]["OrganisationUUID"];
            status: components["schemas"]["UserMembershipStatus"];
            lastInvitationDate: components["schemas"]["Date"];
            canReinvite?: boolean;
        };
        UserData: {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        emailStatus: "bouncing" | "reachable" | "dropped" | "unknown";
        NotificationsUUIDS: components["schemas"]["NotificationUUID"][];
        NotificationModelHash: {
            [pattern: string]: components["schemas"]["NotificationModel"];
        };
        NotificationType: ("USER_CREATED" | "USER_UPDATED" | "ALERT_UPSERTED" | "ALERT_DELETED" | "ASSET_UPSERTED" | "ASSET_DELETED" | "SENSOR_UPSERTED" | "SENSOR_DELETED" | "REPORT_UPSERTED" | "REPORT_DELETED" | "INTERVENTION_UPSERTED" | "INTERVENTION_DELETED" | "ALGORITHM_MODEL_UPDATED" | "PROJECT_UPSERTED" | "PROJECT_DELETED" | "FACTORY_UPSERTED" | "FACTORY_DELETED" | "ORGANISATION_UPSERTED" | "ORGANISATION_DELETED" | "ORGANISATION_USER_UPDATED" | "ORGANISATION_PREFERENCES_UPSERTED" | "SENSOR_SERIES_DELETED" | "PASSWORD_CHANGE_REQUESTED" | "EMAIL_STATUS_UPDATED" | "USER_FEEDBACK_UPDATED" | "USER_INVITED_IN_ORGANISATION" | "MEMBERSHIP_CANCELLED" | "VIRTUAL_SENSOR_COMPUTE_REQUESTED") & {
            _type?: "NotificationType";
        };
        OrganisationModelHash: {
            [pattern: string]: components["schemas"]["OrganisationModel"];
        };
        OrganisationData: {
            name: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        AlertStatus: ("open" | "discarded" | "fixed" | "closed") & {
            _type?: "AlertStatus";
        };
        FactoryData: {
            name: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        DefaultPreferencesModel: {
            displayParentName: boolean;
            sensorDisplayExternalId: boolean;
            sensorDisplaySerie: components["schemas"]["SensorDisplaySerie"];
            useFactoryTimeZone: boolean;
            showGraphLabels: boolean;
            showGraphConfigurations: boolean;
            showGraphCycles: boolean;
            showGraphPhases: boolean;
        };
        TaskModel: {
            status: components["schemas"]["TaskStatus"];
            priority?: components["schemas"]["Priority"];
            assetsIds?: components["schemas"]["AssetsUUIDS"];
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        } & ({
            id: components["schemas"]["AlertUUID"];
            type: "alert";
        } | {
            id: components["schemas"]["InterventionUUID"];
            type: "intervention";
        });
        TaskType: ("alert" | "intervention") & {
            _type?: "TaskType";
        };
        TaskStatus: ("to_assign" | "to_do" | "in_progress" | "done") & {
            _type?: "TaskStatus";
        };
        Priority: ("not_set" | "urgent" | "important" | "secondary") & {
            _type?: "Priority";
        };
        PasswordRequestBody: {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        AuthorizationCodeRequestBody: {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        ClientCredentialsRequestBody: {
            grant_type: "client_credentials";
            scope?: string;
        };
        RefreshTokenRequestBody: {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        VerifyTokenRequestBody: {
            grant_type: "verify_token";
            verify_token: components["schemas"]["VerifyToken"];
        };
        PasswordChangeBody: {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        GroupedInputData: {
            date: string;
            values: {
                sensorId: string;
                valueName?: components["schemas"]["ValueName"];
                value: number;
                precision?: components["schemas"]["ValuePrecision"];
                labels?: components["schemas"]["Tags"];
            }[];
        };
        DenormalizedInputData: {
            date: string;
            sensorId: string;
            valueName?: components["schemas"]["ValueName"];
            value: number;
            precision?: components["schemas"]["ValuePrecision"];
            labels?: components["schemas"]["Tags"];
        }[];
        SensorData: {
            name: string;
            variables: components["schemas"]["SensorVariables"];
            overridenType?: {
                [pattern: string]: components["schemas"]["SensorDataType"];
            };
            series: [
                components["schemas"]["SensorSerie"],
                ...components["schemas"]["SensorSerie"][]
            ];
            alertsTriggers: {
                [pattern: string]: [
                    components["schemas"]["AlertTrigger"],
                    ...components["schemas"]["AlertTrigger"][]
                ];
            };
        };
        SensorStats: {
            [pattern: string]: {
                ever: {
                    cardinality?: number;
                    min: number;
                    max: number;
                    percentiles?: {
                        "1.0"?: number;
                        "5.0"?: number;
                        "25.0"?: number;
                        "50.0"?: number;
                        "75.0"?: number;
                        "95.0"?: number;
                        "99.0"?: number;
                    };
                };
                month?: components["schemas"]["SensorTimeBucketStats"];
                day?: components["schemas"]["SensorTimeBucketStats"];
                hour?: components["schemas"]["SensorTimeBucketStats"];
            };
        };
        SensorInferredType: {
            [pattern: string]: components["schemas"]["SensorDataType"];
        };
        FirstEmission: {
            [pattern: string]: components["schemas"]["Date"];
        };
        SensorQuery: {
            aggregationType: "ratio" | "sum";
            template: string;
            pace: number;
            timeFrame: {
                unit: "days" | "hours";
                value: number;
            };
            timeZone?: components["schemas"]["TimeZone"];
        };
        LineMetrics: {
            cadency?: {
                value: number;
                unit: string;
                status: components["schemas"]["LineMetricsStatus"];
            };
            output?: {
                value: number;
                goal?: number;
                unit: string;
                status: components["schemas"]["LineMetricsStatus"];
            };
        };
        AssetData: components["schemas"]["AssetBaseData"] & (components["schemas"]["AssetAreaData"] | components["schemas"]["AssetLineData"] | components["schemas"]["AssetMachineData"] | components["schemas"]["AssetPartData"]);
        ImagesUUIDS: components["schemas"]["ImageUUID"][];
        AttachmentsUUIDS: components["schemas"]["AttachmentUUID"][];
        InterventionData: {
            assignedUsersIds: components["schemas"]["NonEmptyUsersUUIDS"];
            assetsIds: components["schemas"]["AssetsUUIDS"];
            archived: boolean;
            pauseAlertsTriggers?: boolean;
            type?: components["schemas"]["InterventionType"];
            priority: components["schemas"]["Priority"];
            qualification?: components["schemas"]["InterventionQualification"];
            report?: components["schemas"]["InterventionReport"];
        };
        FactoryScopedUserOrganisationMembership: {
            roles: components["schemas"]["UserOrganisationRoles"];
            factories: {
                id: components["schemas"]["FactoryUUID"];
                roles: components["schemas"]["UserFactoryRoles"];
                status?: components["schemas"]["UserMembershipStatus"];
                lastInvitationDate?: components["schemas"]["Date"];
            }[];
        };
        GlobalUserOrganisationMembership: {
            roles: components["schemas"]["UserFactoryRoles"];
        };
        AlertDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlertDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlertEventData"];
        };
        AlertUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlertUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlertEventData"];
        };
        AlgorithmModelUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlgorithmModelUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlgorithmModelEventData"];
        };
        ApplicationDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ApplicationDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ApplicationEventData"];
        };
        ApplicationUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ApplicationUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ApplicationEventData"];
        };
        AssetDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AssetDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AssetEventData"];
        };
        AssetUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AssetUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AssetEventData"];
        };
        EmailStatusUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["EmailStatusUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["EmailStatusUpdatedEventData"];
        };
        FactoryDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["FactoryDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["FactoryEventData"];
        };
        FactoryUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["FactoryUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["FactoryEventData"];
        };
        InterventionDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["InterventionDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["InterventionEventData"];
        };
        InterventionUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["InterventionUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["InterventionEventData"];
        };
        MembershipCancelledEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["MembershipCancelledEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["MembershipCancelledEventData"];
        };
        OrganisationDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationEventData"];
        };
        OrganisationPreferencesUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationPreferencesUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationPreferencesUpsertedEventData"];
        };
        OrganisationUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationEventData"];
        };
        OrganisationUserUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationUserUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationUserUpdatedEventData"];
        };
        PasswordChangeRequestedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["PasswordChangeRequestedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["PasswordChangeRequestedEventData"];
        };
        ProjectDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ProjectDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ProjectEventData"];
        };
        ProjectUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ProjectUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ProjectEventData"];
        };
        ReportDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ReportDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ReportEventData"];
        };
        ReportUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ReportUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ReportEventData"];
        };
        SensorDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorEventData"];
        };
        SensorSeriesDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorSeriesDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorSeriesDeletedEventData"];
        };
        SensorUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorEventData"];
        };
        UserCreatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserCreatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserCreatedEventData"];
        };
        UserFeedbackUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserFeedbackUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserFeedbackUpdatedEventData"];
        };
        UserInvitedInOrganisationEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserInvitedInOrganisationEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserInvitedInOrganisationEventData"];
        };
        UserUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserUpdatedEventData"];
        };
        VirtualSensorComputeRequestedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["VirtualSensorComputeRequestedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["VirtualSensorComputeRequestedEventData"];
        };
        SegmentedAlertDetectionPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["SegmentedAlertDetectionPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        ForecastLearnEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ForecastLearnEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"];
        };
        RealtimeAlertEventSchemaModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["RealtimeAlertEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                triggeringValue: number;
                variables: components["schemas"]["SensorVariables"];
                activatedAlertsTriggersIds: components["schemas"]["AlertsTriggersUUIDS"];
                customI18NMessage?: components["schemas"]["I18NString"];
            };
        };
        DriftDetectionEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DriftDetectionEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        ForecastPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ForecastPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        DSPADPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DSPADPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                runName?: string;
                [pattern: string]: unknown;
            };
        };
        ProcessEventSchemaModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ProcessEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                triggeringValue?: number;
                stepName: string;
                startDate?: components["schemas"]["Date"];
                endDate?: components["schemas"]["Date"];
            };
        };
        AnomalyEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["AnomalyEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                alertCode: components["schemas"]["AlertCode"];
                customI18NMessage?: components["schemas"]["I18NString"];
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        DSPADDataAnalysisEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DSPADDataAnalysisEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        CycleEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["CycleEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                cycleId: components["schemas"]["NanoId"];
                cycleValue?: number;
                [pattern: string]: unknown;
            };
        };
        PhaseEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["PhaseEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                phaseName: string;
                phaseValue?: number;
                [pattern: string]: unknown;
            };
        };
        SensorDisplaySerie: ("always" | "never" | "ifExists") & {
            _type?: "SensorDisplaySerie";
        };
        AttachmentModel: components["schemas"]["SynchronizableItem"] & {
            id: components["schemas"]["AttachmentUUID"];
            authorId?: components["schemas"]["UserUUID"];
            alert?: components["schemas"]["AlertUUID"];
            intervention?: components["schemas"]["InterventionUUID"];
            report?: components["schemas"]["ReportUUID"];
            scope: components["schemas"]["AttachmentScope"];
            url?: string;
            stats: {
                name: string;
                size: number;
                type: string;
            };
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        ImageModel: {
            id: components["schemas"]["ImageUUID"];
            authorId?: components["schemas"]["UserUUID"];
            scope: components["schemas"]["ImageScope"];
            alert?: components["schemas"]["AlertUUID"];
            intervention?: components["schemas"]["InterventionUUID"];
            urls: {
                original: string;
                large?: string;
                medium?: string;
                thumb?: string;
            };
            stats: {
                name: string;
                size: number;
                type: string;
            };
            resized?: string;
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        };
        NoSyncMode: "none" & {
            _type?: "NoSyncMode";
        };
        DoSyncMode: ("one-way-in" | "one-way-out" | "two-ways") & {
            _type?: "DoSyncMode";
        };
        AlertAssignations: {
            id: components["schemas"]["UserUUID"];
            assignedAt: components["schemas"]["Date"];
            viewedAt?: components["schemas"]["Date"];
        }[];
        ValuesNames: components["schemas"]["ValueName"][];
        usersFeedback: {
            [pattern: string]: components["schemas"]["userFeedback"];
        };
        BaseAlertData: {
            details: components["schemas"]["NoAlertDetailsModel"] | components["schemas"]["RealtimeAlertDetailsModel"] | components["schemas"]["SilentSensorsAlertDetailsModel"];
            code: components["schemas"]["AlertCode"];
            i18nMessage?: components["schemas"]["I18NString"];
            priority: components["schemas"]["Priority"];
            severity: "not_set" | "critical" | "major" | "moderate" | "minor" | "cosmetic";
            viewed: boolean;
            assignedUsersIds?: components["schemas"]["UsersUUIDS"];
            comment?: string;
        };
        Scope: ("user" | "admin" | "data" | "webhook" | "oauth2" | "ml") & {
            _type?: "Scope";
        };
        GrantType: ("code" | "token" | "password" | "refresh" | "client_credentials" | "verify" | "password_change") & {
            _type?: "GrantType";
        };
        MLAlgorithms: ("pipelines" | "custom")[];
        ProjectIngestion: {
            handler: string;
            sourceTopic: components["schemas"]["DataTopic"];
            batchSize: number;
            delay: number;
        };
        ProjectIndexation: {
            handler: string;
            sourceTopic: components["schemas"]["DataTopic"];
            batchSize: number;
            delay: number;
        };
        TrendModel: {
            id?: components["schemas"]["UUID"];
            sensorId?: components["schemas"]["SensorUUID"];
            intercept?: number;
            slope?: number;
            from?: components["schemas"]["Date"];
            to?: components["schemas"]["Date"];
        };
        Locale: string & {
            _type?: "Locale";
        };
        NotificationModel: components["schemas"]["UserCreatedNotification"] | components["schemas"]["UserUpdatedNotification"] | components["schemas"]["AlertNotification"] | components["schemas"]["AssetNotification"] | components["schemas"]["ApplicationNotification"] | components["schemas"]["InterventionNotification"] | components["schemas"]["ReportNotification"] | components["schemas"]["SensorNotification"] | components["schemas"]["FactoryNotification"] | components["schemas"]["ProjectNotification"] | components["schemas"]["AlgorithmModelUpdatedNotification"] | components["schemas"]["OrganisationNotification"] | components["schemas"]["OrganisationUserUpdatedNotification"] | components["schemas"]["OrganisationPreferencesUpsertedNotification"] | components["schemas"]["SensorSeriesDeletedNotification"] | components["schemas"]["PasswordChangeRequestedNotification"] | components["schemas"]["EmailStatusUpdatedNotification"] | components["schemas"]["UserFeedbackUpdatedNotification"] | components["schemas"]["UserInvitedInOrganisationNotification"] | components["schemas"]["MembershipCancelledEventSchema"] | components["schemas"]["VirtualSensorComputeRequestedNotification"];
        VerifyToken: string & {
            _type?: "VerifyToken";
        };
        ValuePrecision: number & {
            _type?: "ValuePrecision";
        };
        SensorVariables: {
            [pattern: string]: (number | string);
        };
        SensorDataType: "qualitative" | "quantitative";
        SensorSerie: {
            name: components["schemas"]["ValueName"];
            unit: components["schemas"]["SensorSerieUnit"];
            description?: string;
            displayName?: string;
        } & (components["schemas"]["QuantitativeSensorSerie"] | components["schemas"]["QualitativeSensorSerie"]) & (components["schemas"]["DataSensorSerieSource"] | components["schemas"]["EventSensorSerieSource"]);
        AlertTrigger: {
            id: components["schemas"]["AlertTriggerUUID"];
            name: string;
            i18nMessage: components["schemas"]["I18NString"];
        } & (components["schemas"]["SilenceAlertTrigger"] | components["schemas"]["RealtimeAlertTrigger"]);
        SensorTimeBucketStats: {
            cardinality: number;
            volumetry: number;
            maxMin: number;
            minMax: number;
        };
        LineMetricsStatus: ("good" | "faulty" | "error") & {
            _type?: "LineMetricsStatus";
        };
        AssetBaseData: {
            name: string;
            tags: components["schemas"]["Tags"];
            parentId?: components["schemas"]["AssetUUID"];
        };
        AssetAreaData: {
            type: "area";
        };
        AssetLineData: {
            type: "line";
            configurations: {
                [pattern: string]: {
                    machinesTree: components["schemas"]["LineMachineTree"];
                };
            };
        };
        AssetMachineData: {
            type: "machine";
        };
        AssetPartData: {
            type: "part";
        };
        NonEmptyUsersUUIDS: [
            components["schemas"]["UserUUID"],
            ...components["schemas"]["UserUUID"][]
        ];
        InterventionType: ("fix" | "prevent" | "control") & {
            _type?: "InterventionType";
        };
        InterventionQualification: {
            usersFeedback: components["schemas"]["usersFeedback"];
            alertsIds: components["schemas"]["NonEmptyAlertsUUIDS"];
        };
        InterventionReport: {
            rootCauses?: string;
            fixDetails?: string;
            startDate: components["schemas"]["Date"];
            endDate?: components["schemas"]["Date"];
        } | {
            comment: string;
        };
        UserOrganisationRoles: [
            "member",
            ..."member"[]
        ];
        UserFactoryRoles: [
            "manager" | "technician",
            ...("manager" | "technician")[]
        ];
        AlertDeletedEventType: "ALERT_DELETED" & {
            _type?: "AlertDeletedEventType";
        };
        Timestamp: number & {
            _type?: "Timestamp";
        };
        AlertEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            alertId: components["schemas"]["AlertUUID"];
            userId?: components["schemas"]["UserUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            eventsIds?: components["schemas"]["EventsUUIDS"];
        };
        AlertUpsertedEventType: "ALERT_UPSERTED" & {
            _type?: "AlertUpsertedEventType";
        };
        AlgorithmModelUpdatedEventType: "ALGORITHM_MODEL_UPDATED" & {
            _type?: "AlgorithmModelUpdatedEventType";
        };
        AlgorithmModelEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            projectId: components["schemas"]["ProjectUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            factoryId?: components["schemas"]["FactoryUUID"];
        };
        ApplicationDeletedEventType: "APPLICATION_DELETED" & {
            _type?: "ApplicationDeletedEventType";
        };
        ApplicationEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            applicationId: components["schemas"]["ApplicationUUID"];
        };
        ApplicationUpsertedEventType: "APPLICATION_UPSERTED" & {
            _type?: "ApplicationUpsertedEventType";
        };
        AssetDeletedEventType: "ASSET_DELETED" & {
            _type?: "AssetDeletedEventType";
        };
        AssetEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
            assetId: components["schemas"]["AssetUUID"];
        };
        AssetUpsertedEventType: "ASSET_UPSERTED" & {
            _type?: "AssetUpsertedEventType";
        };
        EmailStatusUpdatedEventType: "EMAIL_STATUS_UPDATED" & {
            _type?: "EmailStatusUpdatedEventType";
        };
        EmailStatusUpdatedEventData: {
            userId: components["schemas"]["UserUUID"];
            email: string;
            name: string;
            status: components["schemas"]["emailStatus"];
        };
        FactoryDeletedEventType: "FACTORY_DELETED" & {
            _type?: "FactoryDeletedEventType";
        };
        FactoryEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        FactoryUpsertedEventType: "FACTORY_UPSERTED" & {
            _type?: "FactoryUpsertedEventType";
        };
        InterventionDeletedEventType: "INTERVENTION_DELETED" & {
            _type?: "InterventionDeletedEventType";
        };
        InterventionEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
            interventionId: components["schemas"]["InterventionUUID"];
            alertsEventsIds?: components["schemas"]["EventsUUIDS"];
            userFeedback?: components["schemas"]["userFeedback"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
        };
        InterventionUpsertedEventType: "INTERVENTION_UPSERTED" & {
            _type?: "InterventionUpsertedEventType";
        };
        MembershipCancelledEventType: "MEMBERSHIP_CANCELLED" & {
            _type?: "MembershipCancelledEventType";
        };
        MembershipCancelledEventData: {
            userId: components["schemas"]["UserUUID"];
            organisationId: components["schemas"]["OrganisationUUID"];
        };
        OrganisationDeletedEventType: "ORGANISATION_DELETED" & {
            _type?: "OrganisationDeletedEventType";
        };
        OrganisationEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        OrganisationPreferencesUpsertedEventType: "ORGANISATION_PREFERENCES_UPSERTED" & {
            _type?: "OrganisationPreferencesUpsertedEventType";
        };
        OrganisationPreferencesUpsertedEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            preferences: components["schemas"]["PartialPreferencesModel"];
        };
        OrganisationUpsertedEventType: "ORGANISATION_UPSERTED" & {
            _type?: "OrganisationUpsertedEventType";
        };
        OrganisationUserUpdatedEventType: "ORGANISATION_USER_UPDATED" & {
            _type?: "OrganisationUserUpdatedEventType";
        };
        OrganisationUserUpdatedEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            userName: string;
            accepted: boolean;
        };
        PasswordChangeRequestedEventType: "PASSWORD_CHANGE_REQUESTED" & {
            _type?: "PasswordChangeRequestedEventType";
        };
        PasswordChangeRequestedEventData: {
            token: string;
            email: string;
            userName: string;
            locale: components["schemas"]["Locale"];
        };
        ProjectDeletedEventType: "PROJECT_DELETED" & {
            _type?: "ProjectDeletedEventType";
        };
        ProjectEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            projectId: components["schemas"]["ProjectUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            topicsToAdd: components["schemas"]["DataTopic"][];
            topicsToRemove: components["schemas"]["DataTopic"][];
        };
        ProjectUpsertedEventType: "PROJECT_UPSERTED" & {
            _type?: "ProjectUpsertedEventType";
        };
        ReportDeletedEventType: "REPORT_DELETED" & {
            _type?: "ReportDeletedEventType";
        };
        ReportEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            reportId: components["schemas"]["ReportUUID"];
        };
        ReportUpsertedEventType: "REPORT_UPSERTED" & {
            _type?: "ReportUpsertedEventType";
        };
        SensorDeletedEventType: "SENSOR_DELETED" & {
            _type?: "SensorDeletedEventType";
        };
        SensorEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            sensorId: components["schemas"]["SensorUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        SensorSeriesDeletedEventType: "SENSOR_SERIES_DELETED" & {
            _type?: "SensorSeriesDeletedEventType";
        };
        SensorSeriesDeletedEventData: {
            sensorId: components["schemas"]["SensorUUID"];
            valueName: components["schemas"]["ValueName"];
        };
        SensorUpsertedEventType: "SENSOR_UPSERTED" & {
            _type?: "SensorUpsertedEventType";
        };
        UserCreatedEventType: "USER_CREATED" & {
            _type?: "UserCreatedEventType";
        };
        UserCreatedEventData: {
            user: components["schemas"]["UserModel"];
            verifyToken: components["schemas"]["VerifyToken"];
        };
        UserFeedbackUpdatedEventType: "USER_FEEDBACK_UPDATED" & {
            _type?: "UserFeedbackUpdatedEventType";
        };
        UserFeedbackUpdatedEventData: {
            alertId?: components["schemas"]["AlertUUID"];
            eventsIds: components["schemas"]["EventsUUIDS"];
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            userFeedBack: components["schemas"]["userFeedback"];
            beforeDate: components["schemas"]["Date"];
            afterDate: components["schemas"]["Date"];
        };
        UserInvitedInOrganisationEventType: "USER_INVITED_IN_ORGANISATION" & {
            _type?: "UserInvitedInOrganisationEventType";
        };
        UserInvitedInOrganisationEventData: {
            inviterId: components["schemas"]["UserUUID"];
            userId: components["schemas"]["UserUUID"];
            organisationId: components["schemas"]["OrganisationUUID"];
            userName: string;
            userEmail: string;
            organisationName: string;
            organisationRoles: components["schemas"]["UserFactoryRoles"] | components["schemas"]["UserOrganisationRoles"];
            token: string;
        };
        UserUpdatedEventType: "USER_UPDATED" & {
            _type?: "UserUpdatedEventType";
        };
        UserUpdatedEventData: {
            user: components["schemas"]["UserModel"];
            verifyToken?: components["schemas"]["VerifyToken"];
        };
        VirtualSensorComputeRequestedEventType: "VIRTUAL_SENSOR_COMPUTE_REQUESTED" & {
            _type?: "VirtualSensorComputeRequestedEventType";
        };
        VirtualSensorComputeRequestedEventData: {
            sensorId: components["schemas"]["SensorUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            sensorValueName: components["schemas"]["ValueName"];
        };
        SegmentedAlertDetectionPredictEventType: "segmented_anomaly_detection_predict" & {
            _type?: "SegmentedAlertDetectionPredictEventType";
        };
        DataLabels: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId?: string;
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            ancestorsIds: components["schemas"]["AssetsUUIDS"];
            assetsIds: components["schemas"]["AssetsUUIDS"];
            sensorsIds: components["schemas"]["SensorsUUIDS"];
            valuesNames?: components["schemas"]["ValuesNames"];
            labels: components["schemas"]["BaseDataLabels"];
            runId?: components["schemas"]["RunUUID"];
            usersFeedback?: components["schemas"]["usersFeedback"];
        };
        ForecastLearnEventType: "univariate_forecast_learn" & {
            _type?: "ForecastLearnEventType";
        };
        RealtimeAlertEventType: "realtime_alert" & {
            _type?: "RealtimeAlertEventType";
        };
        AlertsTriggersUUIDS: components["schemas"]["AlertTriggerUUID"][];
        I18NString: {
            [pattern: string]: string;
        };
        DriftDetectionEventType: "drift_detection" & {
            _type?: "DriftDetectionEventType";
        };
        ForecastPredictEventType: "univariate_forecast_predict" & {
            _type?: "ForecastPredictEventType";
        };
        DSPADPredictEventType: "dspad_predict" & {
            _type?: "DSPADPredictEventType";
        };
        ProcessEventType: "process" & {
            _type?: "ProcessEventType";
        };
        AnomalyEventType: "anomaly" & {
            _type?: "AnomalyEventType";
        };
        AlertCode: components["schemas"]["StandardAlertCode"] | components["schemas"]["CustomAlertCode"];
        DSPADDataAnalysisEventType: "dspad_data_mvt" & {
            _type?: "DSPADDataAnalysisEventType";
        };
        CycleEventType: "cycle" & {
            _type?: "CycleEventType";
        };
        NanoId: string & {
            _type?: "NanoId";
        };
        PhaseEventType: "phase" & {
            _type?: "PhaseEventType";
        };
        AttachmentScope: ("data-science" | "customer") & {
            _type?: "AttachmentScope";
        };
        ImageScope: ("data-science" | "customer") & {
            _type?: "ImageScope";
        };
        NoAlertDetailsModel: object;
        RealtimeAlertDetailsModel: {
            triggeringValue: number;
            variables: components["schemas"]["SensorVariables"];
            activatedAlertsTriggersIds: components["schemas"]["AlertsTriggersUUIDS"];
        };
        SilentSensorsAlertDetailsModel: {
            totalSilence: boolean;
            sensorsIds: components["schemas"]["SensorsUUIDS"];
        };
        DataTopic: string & {
            _type?: "DataTopic";
        };
        UserCreatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserCreatedEventType"];
            eventData: components["schemas"]["UserCreatedEventData"];
        };
        UserUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserUpdatedEventType"];
            eventData: components["schemas"]["UserUpdatedEventData"];
        };
        AlertNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AlertUpsertedEventType"] | components["schemas"]["AlertDeletedEventType"];
            eventData: components["schemas"]["AlertEventData"];
        };
        AssetNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AssetUpsertedEventType"] | components["schemas"]["AssetDeletedEventType"];
            eventData: components["schemas"]["AssetEventData"];
        };
        ApplicationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ApplicationUpsertedEventType"] | components["schemas"]["ApplicationDeletedEventType"];
            eventData: components["schemas"]["ApplicationEventData"];
        };
        InterventionNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["InterventionUpsertedEventType"] | components["schemas"]["InterventionDeletedEventType"];
            eventData: components["schemas"]["InterventionEventData"];
        };
        ReportNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ReportUpsertedEventType"] | components["schemas"]["ReportDeletedEventType"];
            eventData: components["schemas"]["ReportEventData"];
        };
        SensorNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["SensorUpsertedEventType"] | components["schemas"]["SensorDeletedEventType"];
            eventData: components["schemas"]["SensorEventData"];
        };
        FactoryNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["FactoryUpsertedEventType"] | components["schemas"]["FactoryDeletedEventType"];
            eventData: components["schemas"]["FactoryEventData"];
        };
        ProjectNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ProjectUpsertedEventType"] | components["schemas"]["ProjectDeletedEventType"];
            eventData: components["schemas"]["ProjectEventData"];
        };
        AlgorithmModelUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AlgorithmModelUpdatedEventType"];
            eventData: components["schemas"]["AlgorithmModelEventData"];
        };
        OrganisationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationUpsertedEventType"] | components["schemas"]["OrganisationDeletedEventType"];
            eventData: components["schemas"]["OrganisationEventData"];
        };
        OrganisationUserUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationUserUpdatedEventType"];
            eventData: components["schemas"]["OrganisationUserUpdatedEventData"];
        };
        OrganisationPreferencesUpsertedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationPreferencesUpsertedEventType"];
            eventData: components["schemas"]["OrganisationPreferencesUpsertedEventData"];
        };
        SensorSeriesDeletedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["SensorSeriesDeletedEventType"];
            eventData: components["schemas"]["SensorSeriesDeletedEventData"];
        };
        PasswordChangeRequestedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["PasswordChangeRequestedEventType"];
            eventData: components["schemas"]["PasswordChangeRequestedEventData"];
        };
        EmailStatusUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["EmailStatusUpdatedEventType"];
            eventData: components["schemas"]["EmailStatusUpdatedEventData"];
        };
        UserFeedbackUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserFeedbackUpdatedEventType"];
            eventData: components["schemas"]["UserFeedbackUpdatedEventData"];
        };
        UserInvitedInOrganisationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserInvitedInOrganisationEventType"];
            eventData: components["schemas"]["UserInvitedInOrganisationEventData"];
        };
        MembershipCancelledEventSchema: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["MembershipCancelledEventType"];
            eventData: components["schemas"]["MembershipCancelledEventData"];
        };
        VirtualSensorComputeRequestedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["VirtualSensorComputeRequestedEventType"];
            eventData: components["schemas"]["VirtualSensorComputeRequestedEventData"];
        };
        SensorSerieUnit: string & {
            _type?: "SensorSerieUnit";
        };
        QuantitativeSensorSerie: {
            type: "quantitative";
        };
        QualitativeSensorSerie: {
            type: "qualitative";
            categories?: {
                [pattern: string]: string;
            };
        };
        DataSensorSerieSource: {
            sourceType: "data";
        };
        EventSensorSerieSource: {
            sourceType: "event";
            eventField: components["schemas"]["EventField"];
            eventType: components["schemas"]["EventType"];
            eventHasARange?: boolean;
        };
        AlertTriggerUUID: string & {
            _type?: "AlertTriggerUUID";
        };
        SilenceAlertTrigger: {
            type: "silence";
            duration: number;
        };
        RealtimeAlertTrigger: {
            type: "realtime";
            occurences: number;
            duration?: number;
            resetDelay: number;
            rule: components["schemas"]["RealtimeAlertTriggerRule"];
        };
        LineMachineTree: {
            nodes?: components["schemas"]["AssetUUID"][];
            edges?: {
                source?: components["schemas"]["AssetUUID"];
                target?: components["schemas"]["AssetUUID"];
            }[];
        };
        NonEmptyAlertsUUIDS: [
            components["schemas"]["AlertUUID"],
            ...components["schemas"]["AlertUUID"][]
        ];
        BaseDataLabels: {
            assets?: components["schemas"]["AssetLabels"];
            ancestors?: components["schemas"]["AssetLabels"];
            tags?: components["schemas"]["Tags"];
        };
        RunUUID: string & {
            _type?: "RunUUID";
        };
        StandardAlertCode: ("missing_data" | "bad_data" | "wrong_delta" | "production_drop" | "out_of_bounds" | "abnormal_data" | "data_drift" | "silence_alert" | "realtime_alert") & {
            _type?: "StandardAlertCode";
        };
        CustomAlertCode: string & {
            _type?: "CustomAlertCode";
        };
        CommonNotification: {
            id: components["schemas"]["NotificationUUID"];
            date: components["schemas"]["Date"];
            read: boolean;
            data: {
                organisationId?: components["schemas"]["OrganisationUUID"];
                factoryId?: components["schemas"]["FactoryUUID"];
                ancestorsIds?: components["schemas"]["AssetsUUIDS"];
                assetsIds?: components["schemas"]["AssetsUUIDS"];
                alertsIds?: components["schemas"]["AlertsUUIDS"];
                sensorsIds?: components["schemas"]["SensorsUUIDS"];
            };
        };
        RealtimeAlertTriggerRule: components["schemas"]["RealtimeAlertTriggerLabelTest"] | components["schemas"]["RealtimeAlertTriggerValuedLabelTest"] | components["schemas"]["RealtimeAlertTriggerValueTest"] | components["schemas"]["RealtimeAlertTriggerBranch"];
        AssetLabels: {
            values?: components["schemas"]["ValuedLabels"];
            tags?: components["schemas"]["Tags"];
            configurations?: components["schemas"]["AssetConfigurations"];
            cycles?: components["schemas"]["ManufacturingCycles"];
            phases?: components["schemas"]["ManufacturingPhases"];
        };
        RealtimeAlertTriggerLabelTest: {
            type: "label";
            operator: components["schemas"]["RealtimeAlertLabelsOperator"];
            target: components["schemas"]["RealtimeAlertLabelTarget"];
            name: "phases" | "cycles" | "configurations" | "tags";
            values: string[];
        };
        RealtimeAlertTriggerValuedLabelTest: {
            type: "valued_label";
            operator: components["schemas"]["RealtimeAlertLabelsOperator"];
            target: components["schemas"]["RealtimeAlertLabelTarget"];
            values: {
                [pattern: string]: string;
            };
        };
        RealtimeAlertTriggerValueTest: {
            type: "value";
            operator: "eq" | "gt" | "gte" | "lt" | "lte" | "and" | "xor";
            value: number | components["schemas"]["SensorVariable"];
        };
        RealtimeAlertTriggerBranch: {
            type?: "branch";
            operator: "and" | "or";
            leftNode: components["schemas"]["RealtimeAlertTriggerRule"];
            rightNode: components["schemas"]["RealtimeAlertTriggerRule"];
        };
        ValuedLabels: {
            [pattern: string]: components["schemas"]["LabelValue"];
        };
        RealtimeAlertLabelsOperator: "all" | "any";
        RealtimeAlertLabelTarget: "ancestors" | "assets" | "all";
        SensorVariable: string & {
            _type?: "SensorVariable";
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and generateUnusedSchemas option to true 1`] = `
"export interface paths {
    "/alerts/{alertId}": {
        "delete": operations["deleteAlert"];
    };
    "/applications/{applicationId}": {
        "delete": operations["deleteApplication"];
    };
    "/interventions/{interventionId}": {
        "delete": operations["deleteIntervention"];
    };
    "/projects/{projectId}": {
        "delete": operations["deleteProject"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}": {
        "delete": operations["deleteUserOrganisationAlert"];
        "get": operations["getUserOrganisationAlert"];
        put: operations["putUserOrganisationAlert"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/attachments/{attachmentId}": {
        "delete": operations["deleteUserOrganisationAlertAttachment"];
        put: operations["putUserOrganisationAlertAttachment"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/images/{imageId}": {
        "delete": operations["deleteUserOrganisationAlertImage"];
        put: operations["putUserOrganisationAlertImage"];
    };
    "/users/{userId}/organisations/{organisationId}/applications/{applicationId}": {
        "delete": operations["deleteUserOrganisationApplication"];
        put: operations["putUserOrganisationApplication"];
    };
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}": {
        "delete": operations["deleteUserOrganisationIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/interventions/{interventionId}/images/{imageId}": {
        "delete": operations["deleteUserOrganisationInterventionImage"];
        put: operations["putUserOrganisationInterventionImage"];
    };
    "/users/{userId}/organisations/{organisationId}/memberships/{collaboratorId}": {
        "delete": operations["deleteUserOrganisationMembership"];
    };
    "/users/{userId}/organisations/{organisationId}/projects/{projectId}": {
        "delete": operations["deleteUserOrganisationProject"];
        put: operations["putUserOrganisationProject"];
    };
    "/users/{userId}/organisations/{organisationId}/sensors/{sensorId}/series/{valueName}": {
        "delete": operations["deleteUserOrganisationSensorSeries"];
    };
    "/alerts/stats": {
        "get": operations["getAlertsStats"];
    };
    "/auth/profile": {
        "get": operations["getAuthProfile"];
    };
    "/me": {
        "get": operations["getMySelf"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/organisations/{organisationId}/factories/{factoryId}": {
        "get": operations["getOrganisationFactory"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/alerts/stats": {
        "get": operations["getOrganisationFactoryAlertsStats"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
        "get": operations["getOrganisationFactoryAsset"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/assets": {
        "get": operations["getOrganisationFactoryAssets"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/labels": {
        "get": operations["getOrganisationFactoryDataLabels"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/events": {
        "get": operations["getOrganisationFactoryEvents"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
        "get": operations["getOrganisationFactoryIntervention"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/interventions": {
        "get": operations["getOrganisationFactoryInterventions"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/reports": {
        "get": operations["getOrganisationFactoryReports"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
        "get": operations["getOrganisationFactorySensor"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/sensors": {
        "get": operations["getOrganisationFactorySensors"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/trends": {
        "get": operations["getOrganisationFactoryTrends"];
    };
    "/organisations/{organisationId}/projects/{projectId}": {
        "get": operations["getOrganisationProject"];
    };
    "/organisations/{organisationId}/projects": {
        "get": operations["getOrganisationProjects"];
    };
    "/organisations/{organisationId}/sensors/aggregateData": {
        "get": operations["getOrganisationSensorsAggregateData"];
    };
    "/organisations/{organisationId}/sensors/aggregateEventData": {
        "get": operations["getOrganisationSensorsAggregateEventData"];
    };
    "/organisations/{organisationId}/sensors/aggregateEventRangeData": {
        "get": operations["getOrganisationSensorsAggregateEventRangeData"];
    };
    "/organisations/{organisationId}/sensors/data": {
        "get": operations["getOrganisationSensorsData"];
    };
    "/organisations/{organisationId}/sensors/eventData": {
        "get": operations["getOrganisationSensorsEventData"];
    };
    "/organisations/{organisationId}/sensors/eventRangeDataSchema": {
        "get": operations["getOrganisationSensorsEventRangeData"];
    };
    "/organisations/{organisationId}/search": {
        "get": operations["getOrganisationUniversalSearch"];
    };
    "/reports/{reportId}": {
        put: operations["putReport"];
    };
    "/search": {
        "get": operations["getUniversalSearch"];
    };
    "/users/{userId}": {
        "get": operations["getUser"];
        put: operations["putUser"];
    };
    "/users/{userId}/factories": {
        "get": operations["getUserFactories"];
    };
    "/users/{userId}/notifications": {
        "get": operations["getUserNotifications"];
    };
    "/users/{userId}/organisations/{organisationId}": {
        "get": operations["getUserOrganisation"];
        put: operations["putUserOrganisation"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts": {
        "get": operations["getUserOrganisationAlerts"];
    };
    "/users/{userId}/organisations/{organisationId}/applications": {
        "get": operations["getUserOrganisationApplications"];
        post: operations["postUserOrganisationApplication"];
    };
    "/users/{userId}/organisations/{organisationId}/factories": {
        "get": operations["getUserOrganisationFactories"];
        post: operations["postUserOrganisationFactory"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences": {
        "get": operations["getUserOrganisationFactoryPreferences"];
    };
    "/users/{userId}/organisations/{organisationId}/tasks": {
        "get": operations["getUserOrganisationTasks"];
    };
    "/users/{userId}/organisations/{organisationId}/users": {
        "get": operations["getUserOrganisationUsers"];
    };
    "/users/{userId}/organisations": {
        "get": operations["getUserOrganisations"];
        post: operations["postUserOrganisation"];
    };
    "/users": {
        post: operations["postUser"];
    };
    "/auth/login": {
        post: operations["postAuthLogin"];
    };
    "/auth/logout": {
        post: operations["postAuthLogout"];
    };
    "/auth/changePassword": {
        post: operations["postAuthPasswordChange"];
    };
    "/auth/refresh": {
        post: operations["postAuthRefresh"];
    };
    "/auth/verify": {
        post: operations["postAuthVerify"];
    };
    "/oauth2/token": {
        post: operations["postOAuth2Token"];
    };
    "/organisations/{organisationId}/data/{projectCode}": {
        post: operations["postOrganisationData"];
    };
    "/oauth2/reset": {
        post: operations["postPasswordChangeRequest"];
    };
    "/users/{userId}/invitations/response": {
        post: operations["postUserInvitationResponse"];
    };
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors": {
        post: operations["postUserOrganisationAssetSensor"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets": {
        post: operations["postUserOrganisationFactoryAsset"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions": {
        post: operations["postUserOrganisationFactoryIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors": {
        post: operations["postUserOrganisationFactorySensor"];
    };
    "/users/{userId}/organisations/{organisationId}/invitations": {
        post: operations["postUserOrganisationInvitation"];
    };
    "/users/{userId}/organisations/{organisationId}/invitation/followup": {
        post: operations["postUserOrganisationInvitationFollowup"];
    };
    "/organisations/{organisationId}/users/{userId}/notifications/{notificationId}/read": {
        post: operations["postUserOrganisationNotificationRead"];
    };
    "/users/{userId}/organisations/{organisationId}/projects": {
        post: operations["postUserOrganisationProject"];
    };
    "/attachments/{attachmentId}": {
        put: operations["putAttachment"];
    };
    "/images/{imageId}": {
        put: operations["putImage"];
    };
    "/notifications/{notificationId}": {
        put: operations["putNotificationEvent"];
    };
    "/organisations/{organisationId}/factories/{factoryId}/events/{eventId}": {
        put: operations["putOrganisationFactoryEvent"];
    };
    "/users/{userId}/organisations/{organisationId}/alerts/{alertId}/feedback": {
        put: operations["putUserOrganisationAlertFeedback"];
    };
    "/users/{userId}/organisations/{organisationId}/assets/{assetId}/sensors/{sensorId}": {
        put: operations["putUserOrganisationAssetSensor"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}": {
        put: operations["putUserOrganisationFactory"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/assets/{assetId}": {
        put: operations["putUserOrganisationFactoryAsset"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/interventions/{interventionId}": {
        put: operations["putUserOrganisationFactoryIntervention"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/preferences/{level}": {
        put: operations["putUserOrganisationFactoryPreferences"];
    };
    "/users/{userId}/organisations/{organisationId}/factories/{factoryId}/sensors/{sensorId}": {
        put: operations["putUserOrganisationFactorySensor"];
    };
    "/oauth2/authorize": {
        "get": operations["getOAuth2Authorize"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
export interface operations {
    deleteAlert: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteApplication: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteIntervention: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteProject: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlert: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationAlert: {
        responses: {
            200: components["responses"]["AlertItemResponse"];
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlert: {
        requestBody: components["schemas"]["AlertModel"];
        responses: {
            201: components["responses"]["AlertItemResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlertAttachment: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                attachmentId: components["parameters"]["attachmentId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertAttachment: {
        requestBody: components["requestBodies"]["Attachment"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                attachmentId: components["parameters"]["attachmentId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["AttachmentFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationAlertImage: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                alertId: components["parameters"]["alertId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationApplication: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationApplication: {
        requestBody: components["schemas"]["ApplicationModel"];
        responses: {
            201: {
                body: components["schemas"]["ApplicationItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                applicationId: components["parameters"]["applicationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationIntervention: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationInterventionImage: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationInterventionImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                interventionId: components["parameters"]["interventionId"];
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationMembership: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                collaboratorId: string;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationProject: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationProject: {
        requestBody: components["schemas"]["ProjectModel"];
        responses: {
            201: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    deleteUserOrganisationSensorSeries: {
        responses: {
            204: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                sensorId: components["parameters"]["sensorId"];
                valueName: components["parameters"]["valueName"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getAlertsStats: {
        responses: {
            200: {
                body: components["schemas"]["AlertsStats"];
            };
        };
        parameters: {
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getAuthProfile: {
        responses: {
            200: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            headers: {
                cookie?: components["parameters"]["cookie"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getMySelf: {
        responses: {
            302: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOpenAPI: {
        responses: {
            200: {
                body: object;
            };
        };
        parameters: {
            query: {
                mutedTags?: string[];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactory: {
        responses: {
            200: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAlertsStats: {
        responses: {
            200: {
                body: components["schemas"]["AlertsStat"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAsset: {
        responses: {
            200: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                assetId: components["parameters"]["assetId"];
            };
            query: {
                includeChildrenIds: components["parameters"]["IncludeChildrenIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryAssets: {
        responses: {
            200: {
                body: components["schemas"]["AssetsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAssetsTypes?: components["parameters"]["OptionalWithAssetsTypes"];
                withRootAssetsFirst?: components["parameters"]["OptionalWithRootAssetsFirst"];
                withParentsAssetsIds?: components["parameters"]["OptionalWithParentsAssetsIds"];
                sortBy: components["parameters"]["assetsSortBy"];
                direction: components["parameters"]["direction"];
                includeChildrenIds: components["parameters"]["IncludeChildrenIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryDataLabels: {
        responses: {
            200: {
                body: {
                    key?: string;
                    doc_count?: number;
                }[];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryEvents: {
        responses: {
            200: {
                body: components["schemas"]["EventsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withEventsIds?: components["parameters"]["OptionalWithEventsIds"];
                withEventsTypes?: components["parameters"]["OptionalWithEventType"];
                sensorsIds?: components["parameters"]["OptionalsensorsIds"];
                valuesNames?: components["parameters"]["OptionalvaluesNames"];
                withUsersFeedback?: components["parameters"]["OptionalWithUsersFeedback"];
                since?: components["parameters"]["since"];
                before?: components["parameters"]["before"];
                size?: components["parameters"]["size"];
                beforeDate?: components["parameters"]["beforeDate"];
                afterDate?: components["parameters"]["afterDate"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryIntervention: {
        responses: {
            200: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryInterventions: {
        responses: {
            200: {
                body: components["schemas"]["InterventionsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withInterventionsIds?: components["parameters"]["OptionalWithInterventionsIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                sortBy: components["parameters"]["interventionsSortBy"];
                direction: components["parameters"]["direction"];
                withAttachments: components["parameters"]["WithAttachments"];
                withImages: components["parameters"]["WithImages"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryReports: {
        responses: {
            200: {
                body: components["schemas"]["ReportsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                withReportsIds?: components["parameters"]["OptionalWithReportsIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["reportsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactorySensor: {
        responses: {
            200: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactorySensors: {
        responses: {
            200: {
                body: components["schemas"]["SensorsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                withAlertTriggerTypes?: components["parameters"]["withAlertTriggerTypes"];
                withFactorySensorsOnly: components["parameters"]["withFactorySensorsOnly"];
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withSensorsIds?: components["parameters"]["OptionalWithSensorsIds"];
                sortBy: components["parameters"]["sensorsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationFactoryTrends: {
        responses: {
            200: {
                body: components["schemas"]["TrendItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationProject: {
        responses: {
            200: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                projectId: components["parameters"]["projectId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationProjects: {
        responses: {
            200: {
                body: components["schemas"]["ProjectsItems"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                sortBy: components["parameters"]["projectsSortBy"];
                direction: components["parameters"]["direction"];
                withProjectsIds?: components["parameters"]["OptionalWithProjectsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    valuesNames: components["schemas"]["NonEmptyValuesNames"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                valuesNames: components["parameters"]["valuesNames"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateEventData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsAggregateEventRangeData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    aggregations: components["schemas"]["aggregations"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["measures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                aggregations: components["parameters"]["aggregations"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                withTimeZone?: components["parameters"]["WithTimeZone"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    measures: components["schemas"]["measures"];
                    valuesNames: components["schemas"]["NonEmptyValuesNames"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                valuesNames: components["parameters"]["valuesNames"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsEventData: {
        responses: {
            200: components["responses"]["EventDataResponse"];
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
                includeLabels?: components["parameters"]["includeLabels"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationSensorsEventRangeData: {
        responses: {
            200: {
                body: {
                    from: components["schemas"]["Date"];
                    to: components["schemas"]["Date"];
                    sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
                    eventFields: components["schemas"]["EventFields"];
                    configuration?: components["schemas"]["AssetConfiguration"];
                    phase?: components["schemas"]["ManufacturingPhase"];
                    measures: components["schemas"]["RangeMeasures"];
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                sensorsIds: components["parameters"]["sensorsIds"];
                eventTypes: components["parameters"]["sensorEventTypesQueryParameter"];
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
                eventFields: components["parameters"]["eventFieldsQueryParameter"];
                withDataLabels?: components["parameters"]["OptionalWithDataLabels"];
                withValuedLabelsNames?: components["parameters"]["OptionalWithValuedLabelsNames"];
                withValuedLabelsValues?: components["parameters"]["OptionalWithValuedLabelsValues"];
                withAssetConfigurations?: components["parameters"]["OptionalWithAssetConfigurations"];
                withManufacturingPhases?: components["parameters"]["OptionalWithManufacturingPhases"];
                withManufacturingCycles?: components["parameters"]["OptionalWithManufacturingCycles"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOrganisationUniversalSearch: {
        responses: {
            200: {
                body: {
                    results?: {
                        id: components["schemas"]["UserUUID"] | components["schemas"]["FactoryUUID"] | components["schemas"]["ProjectUUID"] | components["schemas"]["AssetUUID"] | components["schemas"]["ApplicationUUID"] | components["schemas"]["InterventionUUID"] | components["schemas"]["AlertUUID"] | components["schemas"]["ReportUUID"] | components["schemas"]["SensorUUID"] | components["schemas"]["OrganisationUUID"];
                        type: components["schemas"]["SearchType"];
                        snippet?: string;
                    }[][];
                    suggestions?: object[];
                    start?: number;
                    total?: number;
                };
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                searchType?: components["parameters"]["SearchType"];
                searchSentence: components["parameters"]["SearchSentence"];
                withFilterTypes?: components["parameters"]["WithFilterTypes"];
                withFilterIds?: components["parameters"]["WithFilterIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putReport: {
        requestBody: components["requestBodies"]["Report"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                reportId: components["parameters"]["reportId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUniversalSearch: {
        responses: {
            200: {
                body: {
                    results?: {
                        id: components["schemas"]["UserUUID"] | components["schemas"]["FactoryUUID"] | components["schemas"]["ProjectUUID"] | components["schemas"]["AssetUUID"] | components["schemas"]["ApplicationUUID"] | components["schemas"]["InterventionUUID"] | components["schemas"]["AlertUUID"] | components["schemas"]["ReportUUID"] | components["schemas"]["SensorUUID"] | components["schemas"]["OrganisationUUID"];
                        type: components["schemas"]["SearchType"];
                        snippet?: string;
                    }[][];
                    suggestions?: object[];
                    start?: number;
                    total?: number;
                };
            };
        };
        parameters: {
            query: {
                withOrganisationsIds?: components["parameters"]["OptionalWithOrganisationsIds"];
                searchSentence: components["parameters"]["SearchSentence"];
                searchType?: components["parameters"]["SearchType"];
                withFilterTypes?: components["parameters"]["WithFilterTypes"];
                withFilterIds?: components["parameters"]["WithFilterIds"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUser: {
        responses: {
            200: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                withMembershipsStatuses?: components["parameters"]["withMembershipsStatuses"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUser: {
        requestBody: components["schemas"]["UserModel"];
        responses: {
            201: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserFactories: {
        responses: {
            200: {
                body: components["schemas"]["FactoriesItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                sortBy: components["parameters"]["factoriesSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserNotifications: {
        responses: {
            200: {
                body: components["schemas"]["NotificationsItems"];
            };
        };
        parameters: {
            query: {
                withOrganisationsIds?: components["parameters"]["OptionalWithOrganisationsIds"];
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withNotificationTypes?: components["parameters"]["OptionalWithNotificationTypesQueryParameter"];
                includeOrganisationLevelItems?: components["parameters"]["IncludeOrganisationLevelItemsQueryParameter"];
            };
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisation: {
        responses: {
            200: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisation: {
        requestBody: components["schemas"]["OrganisationModel"];
        responses: {
            201: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationAlerts: {
        responses: {
            200: components["responses"]["AlertsCollection"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withSensorsIds?: components["parameters"]["OptionalWithSensorsIds"];
                withAlertsIds?: components["parameters"]["OptionalWithAlertsIds"];
                withStatuses?: components["parameters"]["withAlertsStatuses"];
                withOrphanAlertsOnly?: components["parameters"]["withOrphanAlertsOnly"];
                withAttachments: components["parameters"]["WithAttachments"];
                withImages: components["parameters"]["WithImages"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["alertsSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationApplications: {
        responses: {
            200: {
                body: components["schemas"]["ApplicationsItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                sortBy: components["parameters"]["applicationsSortBy"];
                direction: components["parameters"]["direction"];
                withApplicationsIds?: components["parameters"]["OptionalWithApplicationsIds"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationApplication: {
        requestBody: components["schemas"]["ApplicationModel"];
        responses: {
            201: {
                body: components["schemas"]["ApplicationItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationFactories: {
        responses: {
            200: {
                body: components["schemas"]["FactoriesItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                sortBy: components["parameters"]["factoriesSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactory: {
        requestBody: components["schemas"]["FactoryModel"];
        responses: {
            201: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationFactoryPreferences: {
        responses: {
            200: components["responses"]["AllPreferencesResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationTasks: {
        responses: {
            200: components["responses"]["TasksCollection"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withFactoriesIds?: components["parameters"]["OptionalWithFactoriesIds"];
                withUsersIds?: components["parameters"]["OptionalWithUsersIds"];
                withAssetsIds?: components["parameters"]["OptionalWithAssetsIds"];
                withAncestorsIds?: components["parameters"]["OptionalWithAncestorsIds"];
                withTypes: components["parameters"]["withTasksTypes"];
                withStatuses: components["parameters"]["withTasksStatuses"];
                withPriorities: components["parameters"]["withPriorities"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
                "from"?: components["parameters"]["fromFilter"];
                to?: components["parameters"]["toFilter"];
                sortBy: components["parameters"]["tasksSortBy"];
                direction: components["parameters"]["direction"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisationUsers: {
        responses: {
            200: {
                body: components["schemas"]["UsersItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            query: {
                withUsersIds?: components["parameters"]["OptionalWithUsersIds"];
                withMembershipsStatuses?: components["parameters"]["withMembershipsStatuses"];
                sortBy: components["parameters"]["usersSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getUserOrganisations: {
        responses: {
            200: {
                body: components["schemas"]["OrganisationsItems"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            query: {
                sortBy: components["parameters"]["organisationsSortBy"];
                direction: components["parameters"]["direction"];
                limit: components["parameters"]["limit"];
                start: components["parameters"]["start"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisation: {
        requestBody: components["schemas"]["OrganisationModel"];
        responses: {
            201: {
                body: components["schemas"]["OrganisationItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUser: {
        requestBody: components["schemas"]["UserModel"];
        responses: {
            201: {
                body: components["schemas"]["UserItem"];
            };
        };
        parameters: {
            query: {
                invitationToken?: string;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthLogin: {
        requestBody: {
            username: string;
            password: string;
            scope?: string;
            remember?: boolean;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: string;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthLogout: {
        responses: {
            204: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthPasswordChange: {
        requestBody?: {
            token: string;
            oldPassword?: string;
            newPassword: string;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: number;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthRefresh: {
        requestBody: {
            scope?: string;
            remember?: boolean;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: string;
                    token_type?: string;
                };
            };
        };
        parameters: {
            headers: {
                cookie?: components["parameters"]["cookie"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postAuthVerify: {
        requestBody?: {
            verifyToken: string;
        };
        responses: {
            200: {
                body: {
                    access_token?: string;
                    expiration_date?: string;
                    expires_in?: number;
                    token_type?: string;
                };
                headers: {
                    "set-cookie"?: string[];
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postOAuth2Token: {
        requestBody: components["schemas"]["TokenRequestBody"] | components["schemas"]["TokenRequestBody"];
        responses: {
            200: {
                body: {
                    access_token: string;
                    token_type: Enums.TokenType;
                    expires_in?: number;
                    refresh_token?: string;
                };
            };
            400: {
                body: {
                    error: Enums.Error;
                    error_description?: string;
                    error_uri?: string;
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postOrganisationData: {
        requestBody: components["schemas"]["InputData"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                projectCode: components["parameters"]["projectCode"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postPasswordChangeRequest: {
        requestBody: {
            email: string;
        };
        responses: {
            200: object;
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserInvitationResponse: {
        requestBody: {
            accepted: boolean;
            organisationId: components["schemas"]["OrganisationUUID"];
        };
        responses: {
            200: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationAssetSensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                assetId: components["parameters"]["assetId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactoryAsset: {
        requestBody: components["schemas"]["AssetModel"];
        responses: {
            201: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactoryIntervention: {
        requestBody: components["schemas"]["InterventionModel"];
        responses: {
            201: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationFactorySensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationInvitation: {
        requestBody: components["schemas"]["UserOrganisationInvitation"];
        responses: {
            201: {
                body: {
                    user: components["schemas"]["UserItem"];
                    token: string;
                };
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationInvitationFollowup: {
        requestBody: {
            userId: components["schemas"]["UserUUID"];
        };
        responses: {
            201: object;
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationNotificationRead: {
        responses: {
            201: object;
        };
        parameters: {
            query: {
                "from": components["parameters"]["from"];
                to: components["parameters"]["to"];
            };
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                notificationId: components["parameters"]["notificationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    postUserOrganisationProject: {
        requestBody: components["schemas"]["ProjectModel"];
        responses: {
            201: {
                body: components["schemas"]["ProjectItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putAttachment: {
        requestBody: components["requestBodies"]["Attachment"];
        responses: {
            201: object;
        };
        parameters: {
            path: {
                attachmentId: components["parameters"]["attachmentId"];
            };
            query: {
                withAlertId?: components["parameters"]["withAlertId"];
                withReportId?: components["parameters"]["withReportId"];
                withInterventionId?: components["parameters"]["withInterventionId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["AttachmentFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putImage: {
        requestBody: components["requestBodies"]["Image"];
        responses: {
            201: object;
        };
        parameters: {
            query: {
                withAlertId?: components["parameters"]["withAlertId"];
                withInterventionId?: components["parameters"]["withInterventionId"];
            };
            path: {
                imageId: components["parameters"]["imageId"];
            };
            headers: {
                "x-file-name": components["parameters"]["FileName"];
                "x-file-size": components["parameters"]["FileSize"];
                "x-file-type": components["parameters"]["ImageFileType"];
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putNotificationEvent: {
        requestBody: components["schemas"]["NotificationEvent"];
        responses: {
            204: object;
        };
        parameters: {
            path: {
                notificationId: components["parameters"]["notificationId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putOrganisationFactoryEvent: {
        requestBody: components["schemas"]["EventModel"];
        responses: {
            204: object;
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                eventId: components["parameters"]["eventId"];
            };
            query: {
                hasAttachments?: boolean;
                hasImages?: boolean;
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAlertFeedback: {
        requestBody: {
            userFeedback: components["schemas"]["userFeedback"];
        };
        responses: {
            201: object;
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                alertId: components["parameters"]["alertId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationAssetSensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                assetId: components["parameters"]["assetId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactory: {
        requestBody: components["schemas"]["FactoryModel"];
        responses: {
            201: {
                body: components["schemas"]["FactoryItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryAsset: {
        requestBody: components["schemas"]["AssetModel"];
        responses: {
            201: {
                body: components["schemas"]["AssetItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
                assetId: components["parameters"]["assetId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryIntervention: {
        requestBody: components["schemas"]["InterventionModel"];
        responses: {
            201: {
                body: components["schemas"]["InterventionItem"];
            };
        };
        parameters: {
            path: {
                organisationId: components["parameters"]["organisationId"];
                userId: components["parameters"]["userId"];
                factoryId: components["parameters"]["factoryId"];
                interventionId: components["parameters"]["interventionId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactoryPreferences: {
        requestBody: components["schemas"]["PartialPreferencesModel"];
        responses: {
            201: components["responses"]["PreferencesResponse"];
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                level: components["parameters"]["PreferenceLevel"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    putUserOrganisationFactorySensor: {
        requestBody: components["schemas"]["SensorModel"];
        responses: {
            201: {
                body: components["schemas"]["SensorItem"];
            };
        };
        parameters: {
            path: {
                userId: components["parameters"]["userId"];
                organisationId: components["parameters"]["organisationId"];
                factoryId: components["parameters"]["factoryId"];
                sensorId: components["parameters"]["sensorId"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getOAuth2Authorize: {
        responses: {
            302: object;
        };
        parameters: {
            query: {
                response_type: components["parameters"]["responseType"];
                client_id: components["parameters"]["clientId"];
                redirect_uri?: components["parameters"]["redirectURI"];
                scope?: components["parameters"]["scope"];
                state: components["parameters"]["state"];
            };
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
    getPing: {
        responses: {
            200: {
                body: {
                    pong?: "pong";
                };
            };
        };
        parameters: {
            headers: {
                "X-SDK-Version"?: components["parameters"]["xSdkVersion"];
                "X-Application-Version"?: components["parameters"]["xApplicationVersion"];
                "X-API-Version"?: components["parameters"]["xApiVersion"];
            };
        };
    };
}
export interface components {
    responses: {
        AlertItemResponse: {
            body: components["schemas"]["AlertItem"];
        };
        EventDataResponse: {
            body: components["schemas"]["SensorsEventData"];
        };
        AlertsCollection: {
            body: components["schemas"]["AlertsItems"];
        };
        AllPreferencesResponse: {
            body: components["schemas"]["AllPreferencesModel"];
        };
        TasksCollection: {
            body: {
                total: number;
                stats: {
                    alert?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                    intervention?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                    _all?: {
                        to_assign?: number;
                        to_do?: number;
                        in_progress?: number;
                        done?: number;
                    };
                };
                items: components["schemas"]["TasksModel"];
            };
        };
        PreferencesResponse: {
            body: components["schemas"]["PartialPreferencesModel"];
        };
    };
    parameters: {
        applicationId: components["schemas"]["ApplicationUUID"];
        valueName: components["schemas"]["ValueName"];
        OptionalWithAssetsTypes: components["schemas"]["AssetType"][];
        OptionalWithRootAssetsFirst: boolean;
        OptionalWithParentsAssetsIds: components["schemas"]["AssetsUUIDS"];
        assetsSortBy: [
            components["schemas"]["assetsSortByValue"],
            ...components["schemas"]["assetsSortByValue"][]
        ];
        IncludeChildrenIds: boolean;
        OptionalWithEventsIds: components["schemas"]["EventsUUIDS"];
        OptionalWithEventType: components["schemas"]["EventTypes"];
        OptionalsensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
        OptionalvaluesNames: components["schemas"]["NonEmptyValuesNames"];
        OptionalWithUsersFeedback: boolean;
        since: components["schemas"]["Cursor"];
        before: components["schemas"]["Cursor"];
        size: components["schemas"]["Size"];
        beforeDate: components["schemas"]["Date"];
        afterDate: components["schemas"]["Date"];
        OptionalWithInterventionsIds: components["schemas"]["InterventionsUUIDS"];
        interventionsSortBy: [
            components["schemas"]["interventionsSortByValue"],
            ...components["schemas"]["interventionsSortByValue"][]
        ];
        OptionalWithReportsIds: components["schemas"]["ReportsUUIDS"];
        reportsSortBy: [
            components["schemas"]["reportsSortByValue"],
            ...components["schemas"]["reportsSortByValue"][]
        ];
        withAlertTriggerTypes: components["schemas"]["AlertTriggerTypes"];
        withFactorySensorsOnly: boolean;
        sensorsSortBy: [
            components["schemas"]["sensorsSortByValue"],
            ...components["schemas"]["sensorsSortByValue"][]
        ];
        projectId: components["schemas"]["ProjectUUID"];
        projectsSortBy: [
            components["schemas"]["projectsSortByValue"],
            ...components["schemas"]["projectsSortByValue"][]
        ];
        OptionalWithProjectsIds: components["schemas"]["ProjectsUUIDS"];
        aggregations: components["schemas"]["aggregations"];
        WithTimeZone: components["schemas"]["TimeZone"];
        valuesNames: components["schemas"]["NonEmptyValuesNames"];
        includeLabels: boolean;
        sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
        sensorEventTypesQueryParameter: components["schemas"]["EventTypes"];
        eventFieldsQueryParameter: components["schemas"]["EventFields"];
        OptionalWithDataLabels: components["schemas"]["Tags"];
        OptionalWithValuedLabelsNames: components["schemas"]["ValuedLabelName"][];
        OptionalWithValuedLabelsValues: components["schemas"]["LabelValue"][];
        OptionalWithAssetConfigurations: components["schemas"]["AssetConfigurations"];
        OptionalWithManufacturingPhases: components["schemas"]["ManufacturingPhases"];
        OptionalWithManufacturingCycles: components["schemas"]["ManufacturingCycles"];
        reportId: components["schemas"]["ReportUUID"];
        SearchSentence: string;
        SearchType: components["schemas"]["SearchType"];
        WithFilterTypes: components["schemas"]["SearchFilterType"][];
        WithFilterIds: components["schemas"]["UUID"][];
        OptionalWithOrganisationsIds: components["schemas"]["OrganisationsUUIDS"];
        OptionalWithNotificationTypesQueryParameter: components["schemas"]["NotificationTypes"];
        IncludeOrganisationLevelItemsQueryParameter: boolean;
        OptionalWithSensorsIds: components["schemas"]["SensorsUUIDS"];
        OptionalWithAlertsIds: components["schemas"]["AlertsUUIDS"];
        withAlertsStatuses: components["schemas"]["AlertStatuses"];
        withOrphanAlertsOnly: boolean;
        WithAttachments: boolean;
        WithImages: boolean;
        alertsSortBy: [
            components["schemas"]["alertsSortByValue"],
            ...components["schemas"]["alertsSortByValue"][]
        ];
        applicationsSortBy: [
            components["schemas"]["applicationsSortByValue"],
            ...components["schemas"]["applicationsSortByValue"][]
        ];
        OptionalWithApplicationsIds: components["schemas"]["ApplicationsUUIDS"];
        factoriesSortBy: [
            components["schemas"]["factoriesSortByValue"],
            ...components["schemas"]["factoriesSortByValue"][]
        ];
        OptionalWithFactoriesIds: components["schemas"]["FactoriesUUIDS"];
        OptionalWithAssetsIds: components["schemas"]["AssetsUUIDS"];
        OptionalWithAncestorsIds: components["schemas"]["AssetsUUIDS"];
        withTasksTypes: components["schemas"]["TasksTypes"];
        withTasksStatuses: components["schemas"]["TasksStatuses"];
        withPriorities: components["schemas"]["Priorities"];
        fromFilter: components["schemas"]["Date"];
        toFilter: components["schemas"]["Date"];
        tasksSortBy: [
            components["schemas"]["tasksSortByValue"],
            ...components["schemas"]["tasksSortByValue"][]
        ];
        OptionalWithUsersIds: components["schemas"]["UsersUUIDS"];
        withMembershipsStatuses: components["schemas"]["UserMembershipStatus"][];
        usersSortBy: [
            components["schemas"]["usersSortByValue"],
            ...components["schemas"]["usersSortByValue"][]
        ];
        organisationsSortBy: [
            components["schemas"]["organisationsSortByValue"],
            ...components["schemas"]["organisationsSortByValue"][]
        ];
        direction: [
            components["schemas"]["SortDirection"],
            ...components["schemas"]["SortDirection"][]
        ];
        limit: components["schemas"]["Limit"];
        start: components["schemas"]["Start"];
        cookie: string;
        projectCode: components["schemas"]["ProjectCode"];
        "from": components["schemas"]["Date"];
        to: components["schemas"]["Date"];
        attachmentId: components["schemas"]["AttachmentUUID"];
        withReportId: components["schemas"]["ReportUUID"];
        AttachmentFileType: "application/pdf" | "text/html";
        withAlertId: components["schemas"]["AlertUUID"];
        withInterventionId: components["schemas"]["InterventionUUID"];
        imageId: components["schemas"]["ImageUUID"];
        FileName: string;
        FileSize: number;
        ImageFileType: "image/jpeg" | "image/png";
        notificationId: components["schemas"]["NotificationUUID"];
        eventId: components["schemas"]["EventUUID"];
        alertId: components["schemas"]["AlertUUID"];
        assetId: components["schemas"]["AssetUUID"];
        interventionId: components["schemas"]["InterventionUUID"];
        PreferenceLevel: components["schemas"]["PreferenceLevel"];
        userId: components["schemas"]["UserUUID"];
        organisationId: components["schemas"]["OrganisationUUID"];
        factoryId: components["schemas"]["FactoryUUID"];
        sensorId: components["schemas"]["SensorUUID"];
        responseType: "code" | "token";
        clientId: string;
        redirectURI: string;
        scope: string;
        state: string;
        xSdkVersion: string;
        xApplicationVersion: string;
        xApiVersion: string;
    };
    requestBodies: {
        Report: components["schemas"]["ReportModel"];
        Attachment: components["schemas"]["BinaryModel"] | components["schemas"]["BinaryModel"];
        Image: components["schemas"]["BinaryModel"] | components["schemas"]["BinaryModel"];
    };
    schemas: {
        AlertStatuses: [
            components["schemas"]["AlertStatus"],
            ...components["schemas"]["AlertStatus"][]
        ];
        AlertUUID: string;
        AlertsUUIDS: components["schemas"]["AlertUUID"][];
        SortDirection: Enums.SortDirection;
        ImageUUID: string;
        ImagesUUIDS: components["schemas"]["ImageUUID"][];
        alertsSortByValue: Enums.AlertsSortByValue;
        AlertsStat: {
            organisationId: components["schemas"]["OrganisationUUID"];
            stats: {
                discarded: number;
                fixed: number;
                closed: number;
                open: number;
                total: number;
            };
        };
        AlertsStats: components["schemas"]["AlertsStat"][];
        ApplicationData: {
            name: string;
            description: string;
            allowedScopes: [
                components["schemas"]["Scope"],
                ...components["schemas"]["Scope"][]
            ];
            allowedGrantTypes: [
                components["schemas"]["GrantType"],
                ...components["schemas"]["GrantType"][]
            ];
            callbackUrl: string;
            isActive: boolean;
        };
        ApplicationItem: {
            item: components["schemas"]["ApplicationUUID"];
            applications: components["schemas"]["ApplicationModelHash"];
        };
        ApplicationModel: {
            id?: components["schemas"]["ApplicationUUID"];
            authorId?: components["schemas"]["UserUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            data: components["schemas"]["ApplicationData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            secret?: string;
        };
        ApplicationUUID: string;
        ApplicationModelHash: {
            [pattern: string]: components["schemas"]["ApplicationModel"];
        };
        ApplicationsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ApplicationsUUIDS"];
            applications: components["schemas"]["ApplicationModelHash"];
        };
        ApplicationsUUIDS: components["schemas"]["ApplicationUUID"][];
        GrantType: Enums.GrantType;
        Scope: Enums.Scope;
        applicationsSortByValue: Enums.ApplicationsSortByValue;
        AssetAreaData: {
            type: "area";
        };
        AssetBaseData: {
            name: string;
            tags: components["schemas"]["Tags"];
            parentId?: components["schemas"]["AssetUUID"];
        };
        AssetConfiguration: string;
        AssetData: components["schemas"]["AssetBaseData"] & (components["schemas"]["AssetAreaData"] | components["schemas"]["AssetLineData"] | components["schemas"]["AssetMachineData"] | components["schemas"]["AssetPartData"]);
        AssetItem: {
            item: components["schemas"]["AssetUUID"];
            assets: components["schemas"]["AssetModelHash"];
        };
        AssetLineData: {
            type: "line";
            configurations: {
                [pattern: string]: {
                    machinesTree: components["schemas"]["LineMachineTree"];
                };
            };
        };
        AssetMachineData: {
            type: "machine";
        };
        AssetPartData: {
            type: "part";
        };
        AssetModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["AssetUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            childrenIds?: components["schemas"]["AssetsUUIDS"];
            ancestorsIds?: components["schemas"]["AssetsUUIDS"];
            metrics?: components["schemas"]["LineMetrics"];
            currentConfiguration?: components["schemas"]["AssetConfiguration"];
            currentPhase?: components["schemas"]["ManufacturingPhase"];
            currentCycle?: components["schemas"]["ManufacturingCycle"];
            powerState?: Enums.PowerState;
            operatingState?: Enums.OperatingState;
            healthState?: Enums.HealthState;
            data: components["schemas"]["AssetData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        AssetType: Enums.AssetType;
        AssetUUID: string;
        AssetModelHash: {
            [pattern: string]: components["schemas"]["AssetModel"];
        };
        AssetsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["AssetsUUIDS"];
            assets: components["schemas"]["AssetModelHash"];
        };
        AssetsUUIDS: components["schemas"]["AssetUUID"][];
        LineMachineTree: {
            nodes?: components["schemas"]["AssetUUID"][];
            edges?: {
                source?: components["schemas"]["AssetUUID"];
                target?: components["schemas"]["AssetUUID"];
            }[];
        };
        LineMetrics: {
            cadency?: {
                value: number;
                unit: string;
                status: components["schemas"]["LineMetricsStatus"];
            };
            output?: {
                value: number;
                goal?: number;
                unit: string;
                status: components["schemas"]["LineMetricsStatus"];
            };
        };
        LineMetricsStatus: Enums.LineMetricsStatus;
        ManufacturingCycle: string;
        ManufacturingPhase: string;
        ManufacturingPhases: components["schemas"]["ManufacturingPhase"][];
        assetsSortByValue: Enums.AssetsSortByValue;
        UniqueNonEmptyAssetsUUIDS: components["schemas"]["AssetUUID"][];
        AnomalyEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["AnomalyEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                alertCode: components["schemas"]["AlertCode"];
                customI18NMessage?: components["schemas"]["I18NString"];
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        AnomalyEventType: "anomaly";
        AssetConfigurations: components["schemas"]["AssetConfiguration"][];
        AssetLabels: {
            values?: components["schemas"]["ValuedLabels"];
            tags?: components["schemas"]["Tags"];
            configurations?: components["schemas"]["AssetConfigurations"];
            cycles?: components["schemas"]["ManufacturingCycles"];
            phases?: components["schemas"]["ManufacturingPhases"];
        };
        BaseDataLabels: {
            assets?: components["schemas"]["AssetLabels"];
            ancestors?: components["schemas"]["AssetLabels"];
            tags?: components["schemas"]["Tags"];
        };
        Cursor: string;
        CycleEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["CycleEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                cycleId: components["schemas"]["NanoId"];
                cycleValue?: number;
                [pattern: string]: unknown;
            };
        };
        CycleEventType: "cycle";
        DataLabels: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId?: string;
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            ancestorsIds: components["schemas"]["AssetsUUIDS"];
            assetsIds: components["schemas"]["AssetsUUIDS"];
            sensorsIds: components["schemas"]["SensorsUUIDS"];
            valuesNames?: components["schemas"]["ValuesNames"];
            labels: components["schemas"]["BaseDataLabels"];
            runId?: components["schemas"]["RunUUID"];
            usersFeedback?: components["schemas"]["usersFeedback"];
        };
        DriftDetectionEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DriftDetectionEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        DriftDetectionEventType: "drift_detection";
        DSPADDataAnalysisEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DSPADDataAnalysisEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        DSPADDataAnalysisEventType: "dspad_data_mvt";
        DSPADPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["DSPADPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                runName?: string;
                [pattern: string]: unknown;
            };
        };
        DSPADPredictEventType: "dspad_predict";
        EventModel: components["schemas"]["SegmentedAlertDetectionPredictEventModel"] | components["schemas"]["ForecastLearnEventModel"] | components["schemas"]["RealtimeAlertEventSchemaModel"] | components["schemas"]["DriftDetectionEventModel"] | components["schemas"]["ForecastPredictEventModel"] | components["schemas"]["DSPADPredictEventModel"] | components["schemas"]["ProcessEventSchemaModel"] | components["schemas"]["AnomalyEventModel"] | components["schemas"]["DSPADDataAnalysisEventModel"] | components["schemas"]["CycleEventModel"] | components["schemas"]["PhaseEventModel"];
        EventType: Enums.EventType;
        EventTypes: components["schemas"]["EventType"][];
        EventUUID: string;
        EventModelHash: {
            [pattern: string]: components["schemas"]["EventModel"];
        };
        EventsItems: {
            total: number;
            cursors: {
                before?: components["schemas"]["Cursor"];
                since?: components["schemas"]["Cursor"];
            };
            items: components["schemas"]["EventsUUIDS"];
            events: components["schemas"]["EventModelHash"];
        };
        EventsUUIDS: components["schemas"]["EventUUID"][];
        ForecastLearnEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ForecastLearnEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"];
        };
        ForecastLearnEventType: "univariate_forecast_learn";
        ForecastPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ForecastPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        ForecastPredictEventType: "univariate_forecast_predict";
        ManufacturingCycles: components["schemas"]["ManufacturingCycle"][];
        NanoId: string;
        PhaseEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["PhaseEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                phaseName: string;
                phaseValue?: number;
                [pattern: string]: unknown;
            };
        };
        PhaseEventType: "phase";
        ProcessEventSchemaModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["ProcessEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                triggeringValue?: number;
                stepName: string;
                startDate?: components["schemas"]["Date"];
                endDate?: components["schemas"]["Date"];
            };
        };
        ProcessEventType: "process";
        RealtimeAlertEventSchemaModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["RealtimeAlertEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                triggeringValue: number;
                variables: components["schemas"]["SensorVariables"];
                activatedAlertsTriggersIds: components["schemas"]["AlertsTriggersUUIDS"];
                customI18NMessage?: components["schemas"]["I18NString"];
            };
        };
        RealtimeAlertEventType: "realtime_alert";
        RunUUID: string;
        SegmentedAlertDetectionPredictEventModel: {
            id: components["schemas"]["EventUUID"];
            type: components["schemas"]["SegmentedAlertDetectionPredictEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["DataLabels"] & {
                startDate: components["schemas"]["Date"];
                endDate: components["schemas"]["Date"];
                [pattern: string]: unknown;
            };
        };
        SegmentedAlertDetectionPredictEventType: "segmented_anomaly_detection_predict";
        Size: number;
        userFeedback: number;
        usersFeedback: {
            [pattern: string]: components["schemas"]["userFeedback"];
        };
        ValuedLabelName: string;
        ValuedLabels: {
            [pattern: string]: components["schemas"]["LabelValue"];
        };
        DoSyncMode: Enums.DoSyncMode;
        FactoryModelHash: {
            [pattern: string]: components["schemas"]["FactoryModel"];
        };
        FactoriesItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["FactoriesUUIDS"];
            factories: components["schemas"]["FactoryModelHash"];
        };
        FactoriesUUIDS: components["schemas"]["FactoryUUID"][];
        FactoryData: {
            name: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        FactoryItem: {
            item: components["schemas"]["FactoryUUID"];
            factories: components["schemas"]["FactoryModelHash"];
        };
        FactoryModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["FactoryUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            rootAssetsIds?: components["schemas"]["AssetsUUIDS"];
            linkedOrganisationsIds?: components["schemas"]["OrganisationsUUIDS"];
            data: components["schemas"]["FactoryData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        FactoryUUID: string;
        NoSyncMode: "none";
        factoriesSortByValue: Enums.FactoriesSortByValue;
        SyncMode: components["schemas"]["NoSyncMode"] | components["schemas"]["DoSyncMode"];
        SynchronizableItem: {
            syncMode?: components["schemas"]["NoSyncMode"];
            externalId?: string;
        } | {
            syncMode: components["schemas"]["DoSyncMode"];
            externalId?: string;
        };
        AlertAssignations: {
            id: components["schemas"]["UserUUID"];
            assignedAt: components["schemas"]["Date"];
            viewedAt?: components["schemas"]["Date"];
        }[];
        AlertCode: components["schemas"]["StandardAlertCode"] | components["schemas"]["CustomAlertCode"];
        AlertItem: {
            item: components["schemas"]["AlertUUID"];
            alerts: components["schemas"]["AlertModelHash"];
            interventions?: components["schemas"]["InterventionModelHash"];
            sensors?: components["schemas"]["SensorModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            images?: components["schemas"]["ImageModelHash"];
        };
        AlertModel: components["schemas"]["SynchronizableItem"] & components["schemas"]["BaseAlertModel"];
        AlertStatus: Enums.AlertStatus;
        AlertModelHash: {
            [pattern: string]: components["schemas"]["AlertModel"];
        };
        AlertsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["AlertsUUIDS"];
            alerts: components["schemas"]["AlertModelHash"];
            interventions?: components["schemas"]["InterventionModelHash"];
            sensors?: components["schemas"]["SensorModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            images?: components["schemas"]["ImageModelHash"];
        };
        BaseAlertData: {
            details: components["schemas"]["NoAlertDetailsModel"] | components["schemas"]["RealtimeAlertDetailsModel"] | components["schemas"]["SilentSensorsAlertDetailsModel"];
            code: components["schemas"]["AlertCode"];
            i18nMessage?: components["schemas"]["I18NString"];
            priority: components["schemas"]["Priority"];
            severity: Enums.Severity;
            viewed: boolean;
            assignedUsersIds?: components["schemas"]["UsersUUIDS"];
            comment?: string;
        };
        BaseAlertModel: {
            id?: components["schemas"]["AlertUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            assetId?: components["schemas"]["AssetUUID"];
            assignations?: components["schemas"]["AlertAssignations"];
            interventionId?: components["schemas"]["InterventionUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            sensorsIds?: components["schemas"]["SensorsUUIDS"];
            sensorsValues?: components["schemas"]["ValuesNames"];
            eventsIds?: components["schemas"]["EventsUUIDS"];
            recurringAlertId?: components["schemas"]["AlertUUID"];
            startAt?: components["schemas"]["Date"];
            endAt?: components["schemas"]["Date"];
            taskStatus?: components["schemas"]["TaskStatus"];
            status?: components["schemas"]["AlertStatus"];
            usersFeedback?: components["schemas"]["usersFeedback"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            data?: components["schemas"]["BaseAlertData"];
        };
        CustomAlertCode: string;
        I18NString: {
            [pattern: string]: string;
        };
        ImageModel: {
            id: components["schemas"]["ImageUUID"];
            authorId?: components["schemas"]["UserUUID"];
            scope: components["schemas"]["ImageScope"];
            alert?: components["schemas"]["AlertUUID"];
            intervention?: components["schemas"]["InterventionUUID"];
            urls: {
                original: string;
                large?: string;
                medium?: string;
                thumb?: string;
            };
            stats: {
                name: string;
                size: number;
                type: string;
            };
            resized?: string;
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        };
        ImageScope: Enums.ImageScope;
        ImageModelHash: {
            [pattern: string]: components["schemas"]["ImageModel"];
        };
        InterventionData: {
            assignedUsersIds: components["schemas"]["NonEmptyUsersUUIDS"];
            assetsIds: components["schemas"]["AssetsUUIDS"];
            archived: boolean;
            pauseAlertsTriggers?: boolean;
            type?: components["schemas"]["InterventionType"];
            priority: components["schemas"]["Priority"];
            qualification?: components["schemas"]["InterventionQualification"];
            report?: components["schemas"]["InterventionReport"];
        };
        InterventionItem: {
            item: components["schemas"]["InterventionUUID"];
            interventions: components["schemas"]["InterventionModelHash"];
            alerts?: components["schemas"]["AlertModelHash"];
            images?: components["schemas"]["ImageModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            users?: components["schemas"]["UserModelHash"];
        };
        InterventionQualification: {
            usersFeedback: components["schemas"]["usersFeedback"];
            alertsIds: components["schemas"]["NonEmptyAlertsUUIDS"];
        };
        InterventionReport: {
            rootCauses?: string;
            fixDetails?: string;
            startDate: components["schemas"]["Date"];
            endDate?: components["schemas"]["Date"];
        } | {
            comment: string;
        };
        InterventionModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["InterventionUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            authorId?: components["schemas"]["UserUUID"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            qualifiedAt?: components["schemas"]["Date"];
            reportedAt?: components["schemas"]["Date"];
            archivedAt?: components["schemas"]["Date"];
            taskStatus?: components["schemas"]["TaskStatus"];
            data: components["schemas"]["InterventionData"];
        };
        InterventionType: Enums.InterventionType;
        InterventionUUID: string;
        InterventionModelHash: {
            [pattern: string]: components["schemas"]["InterventionModel"];
        };
        InterventionsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["InterventionsUUIDS"];
            interventions: components["schemas"]["InterventionModelHash"];
            alerts?: components["schemas"]["AlertModelHash"];
            images?: components["schemas"]["ImageModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
            users?: components["schemas"]["UserModelHash"];
        };
        InterventionsUUIDS: components["schemas"]["InterventionUUID"][];
        NoAlertDetailsModel: object;
        NonEmptyAlertsUUIDS: [
            components["schemas"]["AlertUUID"],
            ...components["schemas"]["AlertUUID"][]
        ];
        NonEmptyUsersUUIDS: [
            components["schemas"]["UserUUID"],
            ...components["schemas"]["UserUUID"][]
        ];
        Priority: Enums.Priority;
        RealtimeAlertDetailsModel: {
            triggeringValue: number;
            variables: components["schemas"]["SensorVariables"];
            activatedAlertsTriggersIds: components["schemas"]["AlertsTriggersUUIDS"];
        };
        SilentSensorsAlertDetailsModel: {
            totalSilence: boolean;
            sensorsIds: components["schemas"]["SensorsUUIDS"];
        };
        interventionsSortByValue: Enums.InterventionsSortByValue;
        StandardAlertCode: Enums.StandardAlertCode;
        MockName: string;
        TrendModelHash: {
            [pattern: string]: components["schemas"]["TrendModel"];
        };
        TrendItems: {
            total: number;
            items: components["schemas"]["UUIDS"];
            trends: components["schemas"]["TrendModelHash"];
        };
        TrendModel: {
            id?: components["schemas"]["UUID"];
            sensorId?: components["schemas"]["SensorUUID"];
            intercept?: number;
            slope?: number;
            from?: components["schemas"]["Date"];
            to?: components["schemas"]["Date"];
        };
        NonEmptyValuesNames: [
            components["schemas"]["ValueName"],
            ...components["schemas"]["ValueName"][]
        ];
        OrganisationData: {
            name: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        OrganisationItem: {
            item: components["schemas"]["OrganisationUUID"];
            organisations: components["schemas"]["OrganisationModelHash"];
        };
        OrganisationModel: {
            id?: components["schemas"]["OrganisationUUID"];
            factoriesIds?: components["schemas"]["FactoriesUUIDS"];
            data: components["schemas"]["OrganisationData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        OrganisationUUID: string;
        OrganisationModelHash: {
            [pattern: string]: components["schemas"]["OrganisationModel"];
        };
        OrganisationsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["OrganisationsUUIDS"];
            organisations: components["schemas"]["OrganisationModelHash"];
        };
        OrganisationsUUIDS: components["schemas"]["OrganisationUUID"][];
        organisationsSortByValue: Enums.OrganisationsSortByValue;
        DataTopic: string;
        MLAlgorithms: ("pipelines" | "custom")[];
        ProjectCode: string;
        ProjectData: {
            name: string;
            description: string;
            projectCode: components["schemas"]["ProjectCode"];
            algorithms: components["schemas"]["MLAlgorithms"];
            bridge: {
                type: "push";
            } | {
                type: "pull";
                handler?: string;
                schedule?: string;
            };
            ingestion?: components["schemas"]["ProjectIngestion"];
            indexation?: components["schemas"]["ProjectIndexation"];
        };
        ProjectIndexation: {
            handler: string;
            sourceTopic: components["schemas"]["DataTopic"];
            batchSize: number;
            delay: number;
        };
        ProjectIngestion: {
            handler: string;
            sourceTopic: components["schemas"]["DataTopic"];
            batchSize: number;
            delay: number;
        };
        ProjectItem: {
            item: components["schemas"]["ProjectUUID"];
            projects: components["schemas"]["ProjectModelHash"];
        };
        ProjectModel: {
            id?: components["schemas"]["ProjectUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            author?: components["schemas"]["UserUUID"];
            data: components["schemas"]["ProjectData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        ProjectUUID: string;
        ProjectModelHash: {
            [pattern: string]: components["schemas"]["ProjectModel"];
        };
        ProjectsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ProjectsUUIDS"];
            projects: components["schemas"]["ProjectModelHash"];
        };
        ProjectsUUIDS: components["schemas"]["ProjectUUID"][];
        projectsSortByValue: Enums.ProjectsSortByValue;
        AttachmentModel: components["schemas"]["SynchronizableItem"] & {
            id: components["schemas"]["AttachmentUUID"];
            authorId?: components["schemas"]["UserUUID"];
            alert?: components["schemas"]["AlertUUID"];
            intervention?: components["schemas"]["InterventionUUID"];
            report?: components["schemas"]["ReportUUID"];
            scope: components["schemas"]["AttachmentScope"];
            url?: string;
            stats: {
                name: string;
                size: number;
                type: string;
            };
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
        };
        AttachmentScope: Enums.AttachmentScope;
        AttachmentUUID: string;
        AttachmentModelHash: {
            [pattern: string]: components["schemas"]["AttachmentModel"];
        };
        AttachmentsUUIDS: components["schemas"]["AttachmentUUID"][];
        ReportData: {
            name: string;
            description: string;
        };
        ReportItem: {
            item: components["schemas"]["ReportUUID"];
            reports: components["schemas"]["ReportModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
        };
        ReportModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["ReportUUID"];
            attachmentId?: components["schemas"]["AttachmentUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            authorId: components["schemas"]["UserUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            data: components["schemas"]["ReportData"];
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        };
        ReportUUID: string;
        ReportModelHash: {
            [pattern: string]: components["schemas"]["ReportModel"];
        };
        ReportsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["ReportsUUIDS"];
            reports: components["schemas"]["ReportModelHash"];
            attachments?: components["schemas"]["AttachmentModelHash"];
        };
        ReportsUUIDS: components["schemas"]["ReportUUID"][];
        reportsSortByValue: Enums.ReportsSortByValue;
        AlertTrigger: {
            id: components["schemas"]["AlertTriggerUUID"];
            name: string;
            i18nMessage: components["schemas"]["I18NString"];
        } & (components["schemas"]["SilenceAlertTrigger"] | components["schemas"]["RealtimeAlertTrigger"]);
        AlertTriggerUUID: string;
        AlertType: Enums.AlertType;
        AlertTriggerTypes: components["schemas"]["AlertType"][];
        AlertsTriggersUUIDS: components["schemas"]["AlertTriggerUUID"][];
        DataSensorSerieSource: {
            sourceType: "data";
        };
        EventSensorSerieSource: {
            sourceType: "event";
            eventField: components["schemas"]["EventField"];
            eventType: components["schemas"]["EventType"];
            eventHasARange?: boolean;
        };
        FirstEmission: {
            [pattern: string]: components["schemas"]["Date"];
        };
        SensorInferredType: {
            [pattern: string]: components["schemas"]["SensorDataType"];
        };
        QualitativeSensorSerie: {
            type: "qualitative";
            categories?: {
                [pattern: string]: string;
            };
        };
        QuantitativeSensorSerie: {
            type: "quantitative";
        };
        RealtimeAlertLabelTarget: Enums.TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors;
        RealtimeAlertLabelsOperator: Enums.WetherAllLabelsShouldMatchOrAny;
        RealtimeAlertTriggerBranch: {
            type?: "branch";
            operator: Enums.RealtimeAlertTriggerBranchOperator;
            leftNode: components["schemas"]["RealtimeAlertTriggerRule"];
            rightNode: components["schemas"]["RealtimeAlertTriggerRule"];
        };
        RealtimeAlertTriggerLabelTest: {
            type: "label";
            operator: components["schemas"]["RealtimeAlertLabelsOperator"];
            target: components["schemas"]["RealtimeAlertLabelTarget"];
            name: Enums.NameOfTheLabelToTest;
            values: string[];
        };
        RealtimeAlertTriggerRule: components["schemas"]["RealtimeAlertTriggerLabelTest"] | components["schemas"]["RealtimeAlertTriggerValuedLabelTest"] | components["schemas"]["RealtimeAlertTriggerValueTest"] | components["schemas"]["RealtimeAlertTriggerBranch"];
        RealtimeAlertTrigger: {
            type: "realtime";
            occurences: number;
            duration?: number;
            resetDelay: number;
            rule: components["schemas"]["RealtimeAlertTriggerRule"];
        };
        RealtimeAlertTriggerValueTest: {
            type: "value";
            operator: Enums.RealtimeAlertTriggerValueTestOperator;
            value: number | components["schemas"]["SensorVariable"];
        };
        RealtimeAlertTriggerValuedLabelTest: {
            type: "valued_label";
            operator: components["schemas"]["RealtimeAlertLabelsOperator"];
            target: components["schemas"]["RealtimeAlertLabelTarget"];
            values: {
                [pattern: string]: string;
            };
        };
        SensorData: {
            name: string;
            variables: components["schemas"]["SensorVariables"];
            overridenType?: {
                [pattern: string]: components["schemas"]["SensorDataType"];
            };
            series: [
                components["schemas"]["SensorSerie"],
                ...components["schemas"]["SensorSerie"][]
            ];
            alertsTriggers: {
                [pattern: string]: [
                    components["schemas"]["AlertTrigger"],
                    ...components["schemas"]["AlertTrigger"][]
                ];
            };
        };
        SensorDataType: Enums.SensorType;
        SensorItem: {
            item: components["schemas"]["SensorUUID"];
            sensors: components["schemas"]["SensorModelHash"];
            assets?: components["schemas"]["AssetModelHash"];
        };
        SensorQuery: {
            aggregationType: Enums.AggregationType;
            template: string;
            pace: number;
            timeFrame: {
                unit: Enums.Unit;
                value: number;
            };
            timeZone?: components["schemas"]["TimeZone"];
        };
        SensorModel: components["schemas"]["SynchronizableItem"] & {
            id?: components["schemas"]["SensorUUID"];
            factoryId?: components["schemas"]["FactoryUUID"];
            organisationId?: components["schemas"]["OrganisationUUID"];
            assetId?: components["schemas"]["AssetUUID"];
            data: components["schemas"]["SensorData"];
            stats?: components["schemas"]["SensorStats"];
            inferredType?: components["schemas"]["SensorInferredType"];
            firstEmission?: components["schemas"]["FirstEmission"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            queries?: {
                [pattern: string]: components["schemas"]["SensorQuery"];
            };
        };
        SensorSerie: {
            name: components["schemas"]["ValueName"];
            unit: components["schemas"]["SensorSerieUnit"];
            description?: string;
            displayName?: string;
        } & (components["schemas"]["QuantitativeSensorSerie"] | components["schemas"]["QualitativeSensorSerie"]) & (components["schemas"]["DataSensorSerieSource"] | components["schemas"]["EventSensorSerieSource"]);
        SensorSerieUnit: string;
        SensorStats: {
            [pattern: string]: {
                ever: {
                    cardinality?: number;
                    min: number;
                    max: number;
                    percentiles?: {
                        "1.0"?: number;
                        "5.0"?: number;
                        "25.0"?: number;
                        "50.0"?: number;
                        "75.0"?: number;
                        "95.0"?: number;
                        "99.0"?: number;
                    };
                };
                month?: components["schemas"]["SensorTimeBucketStats"];
                day?: components["schemas"]["SensorTimeBucketStats"];
                hour?: components["schemas"]["SensorTimeBucketStats"];
            };
        };
        SensorTimeBucketStats: {
            cardinality: number;
            volumetry: number;
            maxMin: number;
            minMax: number;
        };
        SensorUUID: string;
        SensorVariable: string;
        SensorVariables: {
            [pattern: string]: (number | string);
        };
        SensorModelHash: {
            [pattern: string]: components["schemas"]["SensorModel"];
        };
        SensorsItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["SensorsUUIDS"];
            sensors: components["schemas"]["SensorModelHash"];
            assets?: components["schemas"]["AssetModelHash"];
        };
        SensorsUUIDS: components["schemas"]["SensorUUID"][];
        SilenceAlertTrigger: {
            type: "silence";
            duration: number;
        };
        sensorsSortByValue: Enums.SensorsSortByValue;
        aggregation: Enums.Aggregation;
        aggregations: components["schemas"]["aggregation"][];
        granularity: Enums.Granularity;
        measures: {
            date: components["schemas"]["Date"];
            values: number[];
            qualities?: number[];
            labels?: string[][];
            labelsCount?: number[][];
        }[];
        NonEmptySensorsUUIDS: [
            components["schemas"]["SensorUUID"],
            ...components["schemas"]["SensorUUID"][]
        ];
        EventField: Enums.EventField;
        EventFields: components["schemas"]["EventField"][];
        SensorsMLData: {
            name?: string;
            labels?: string[];
            timestamp?: string[];
            data?: (string | number | string[])[][];
        }[];
        ValueName: string;
        ValuesNames: components["schemas"]["ValueName"][];
        SensorsEventData: {
            from: components["schemas"]["Date"];
            to: components["schemas"]["Date"];
            sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
            eventFields: components["schemas"]["EventFields"];
            configuration?: components["schemas"]["AssetConfiguration"];
            phase?: components["schemas"]["ManufacturingPhase"];
            measures: components["schemas"]["measures"];
        };
        EventRangeData: {
            from: components["schemas"]["Date"];
            to: components["schemas"]["Date"];
            sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
            eventFields: components["schemas"]["EventFields"];
            configuration?: components["schemas"]["AssetConfiguration"];
            phase?: components["schemas"]["ManufacturingPhase"];
            measures: components["schemas"]["RangeMeasures"];
        };
        RangeMeasures: {
            startDate: components["schemas"]["Date"];
            endDate: components["schemas"]["Date"];
            value: number;
            quality?: number;
            labels?: string[];
        }[][];
        Priorities: [
            components["schemas"]["Priority"],
            ...components["schemas"]["Priority"][]
        ];
        tasksSortByValue: Enums.TasksSortByValue;
        TaskModel: {
            status: components["schemas"]["TaskStatus"];
            priority?: components["schemas"]["Priority"];
            assetsIds?: components["schemas"]["AssetsUUIDS"];
            creation: components["schemas"]["Date"];
            lastModification: components["schemas"]["Date"];
        } & ({
            id: components["schemas"]["AlertUUID"];
            type: "alert";
        } | {
            id: components["schemas"]["InterventionUUID"];
            type: "intervention";
        });
        TaskStatus: Enums.TaskStatus;
        TasksStatuses: [
            components["schemas"]["TaskStatus"],
            ...components["schemas"]["TaskStatus"][]
        ];
        TaskType: Enums.TaskType;
        TasksTypes: [
            components["schemas"]["TaskType"],
            ...components["schemas"]["TaskType"][]
        ];
        TasksModel: components["schemas"]["TaskModel"][];
        SearchFilterType: Enums.SearchFilterType;
        SearchType: Enums.SearchType;
        MembershipCancelledNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["MembershipCancelledEventType"];
            eventData: components["schemas"]["MembershipCancelledEventData"];
        };
        AlertDeletedEventType: "ALERT_DELETED";
        AlertEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            alertId: components["schemas"]["AlertUUID"];
            userId?: components["schemas"]["UserUUID"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
            eventsIds?: components["schemas"]["EventsUUIDS"];
        };
        AlertNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AlertUpsertedEventType"] | components["schemas"]["AlertDeletedEventType"];
            eventData: components["schemas"]["AlertEventData"];
        };
        AlertUpsertedEventType: "ALERT_UPSERTED";
        AlgorithmModelEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            projectId: components["schemas"]["ProjectUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            factoryId?: components["schemas"]["FactoryUUID"];
        };
        AlgorithmModelUpdatedEventType: "ALGORITHM_MODEL_UPDATED";
        AlgorithmModelUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AlgorithmModelUpdatedEventType"];
            eventData: components["schemas"]["AlgorithmModelEventData"];
        };
        ApplicationDeletedEventType: "APPLICATION_DELETED";
        ApplicationEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            applicationId: components["schemas"]["ApplicationUUID"];
        };
        ApplicationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ApplicationUpsertedEventType"] | components["schemas"]["ApplicationDeletedEventType"];
            eventData: components["schemas"]["ApplicationEventData"];
        };
        ApplicationUpsertedEventType: "APPLICATION_UPSERTED";
        AssetDeletedEventType: "ASSET_DELETED";
        AssetEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
            assetId: components["schemas"]["AssetUUID"];
        };
        AssetNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["AssetUpsertedEventType"] | components["schemas"]["AssetDeletedEventType"];
            eventData: components["schemas"]["AssetEventData"];
        };
        AssetUpsertedEventType: "ASSET_UPSERTED";
        CommonNotification: {
            id: components["schemas"]["NotificationUUID"];
            date: components["schemas"]["Date"];
            read: boolean;
            data: {
                organisationId?: components["schemas"]["OrganisationUUID"];
                factoryId?: components["schemas"]["FactoryUUID"];
                ancestorsIds?: components["schemas"]["AssetsUUIDS"];
                assetsIds?: components["schemas"]["AssetsUUIDS"];
                alertsIds?: components["schemas"]["AlertsUUIDS"];
                sensorsIds?: components["schemas"]["SensorsUUIDS"];
            };
        };
        EmailStatusUpdatedEventData: {
            userId: components["schemas"]["UserUUID"];
            email: string;
            name: string;
            status: components["schemas"]["emailStatus"];
        };
        EmailStatusUpdatedEventType: "EMAIL_STATUS_UPDATED";
        EmailStatusUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["EmailStatusUpdatedEventType"];
            eventData: components["schemas"]["EmailStatusUpdatedEventData"];
        };
        FactoryDeletedEventType: "FACTORY_DELETED";
        FactoryEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        FactoryNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["FactoryUpsertedEventType"] | components["schemas"]["FactoryDeletedEventType"];
            eventData: components["schemas"]["FactoryEventData"];
        };
        FactoryUpsertedEventType: "FACTORY_UPSERTED";
        InterventionDeletedEventType: "INTERVENTION_DELETED";
        InterventionEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            userId?: components["schemas"]["UserUUID"];
            interventionId: components["schemas"]["InterventionUUID"];
            alertsEventsIds?: components["schemas"]["EventsUUIDS"];
            userFeedback?: components["schemas"]["userFeedback"];
            imagesIds?: components["schemas"]["ImagesUUIDS"];
            attachmentsIds?: components["schemas"]["AttachmentsUUIDS"];
        };
        InterventionNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["InterventionUpsertedEventType"] | components["schemas"]["InterventionDeletedEventType"];
            eventData: components["schemas"]["InterventionEventData"];
        };
        InterventionUpsertedEventType: "INTERVENTION_UPSERTED";
        MembershipCancelledEventData: {
            userId: components["schemas"]["UserUUID"];
            organisationId: components["schemas"]["OrganisationUUID"];
        };
        MembershipCancelledEventType: "MEMBERSHIP_CANCELLED";
        MembershipCancelledEventSchema: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["MembershipCancelledEventType"];
            eventData: components["schemas"]["MembershipCancelledEventData"];
        };
        NotificationModel: components["schemas"]["UserCreatedNotification"] | components["schemas"]["UserUpdatedNotification"] | components["schemas"]["AlertNotification"] | components["schemas"]["AssetNotification"] | components["schemas"]["ApplicationNotification"] | components["schemas"]["InterventionNotification"] | components["schemas"]["ReportNotification"] | components["schemas"]["SensorNotification"] | components["schemas"]["FactoryNotification"] | components["schemas"]["ProjectNotification"] | components["schemas"]["AlgorithmModelUpdatedNotification"] | components["schemas"]["OrganisationNotification"] | components["schemas"]["OrganisationUserUpdatedNotification"] | components["schemas"]["OrganisationPreferencesUpsertedNotification"] | components["schemas"]["SensorSeriesDeletedNotification"] | components["schemas"]["PasswordChangeRequestedNotification"] | components["schemas"]["EmailStatusUpdatedNotification"] | components["schemas"]["UserFeedbackUpdatedNotification"] | components["schemas"]["UserInvitedInOrganisationNotification"] | components["schemas"]["MembershipCancelledEventSchema"] | components["schemas"]["VirtualSensorComputeRequestedNotification"];
        NotificationType: Enums.NotificationType;
        NotificationTypes: components["schemas"]["NotificationType"][];
        NotificationModelHash: {
            [pattern: string]: components["schemas"]["NotificationModel"];
        };
        NotificationsItems: {
            total: components["schemas"]["Total"];
            items: components["schemas"]["NotificationsUUIDS"];
            notifications: components["schemas"]["NotificationModelHash"];
        };
        OrganisationDeletedEventType: "ORGANISATION_DELETED";
        OrganisationEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        OrganisationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationUpsertedEventType"] | components["schemas"]["OrganisationDeletedEventType"];
            eventData: components["schemas"]["OrganisationEventData"];
        };
        OrganisationPreferencesUpsertedEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            preferences: components["schemas"]["PartialPreferencesModel"];
        };
        OrganisationPreferencesUpsertedEventType: "ORGANISATION_PREFERENCES_UPSERTED";
        OrganisationPreferencesUpsertedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationPreferencesUpsertedEventType"];
            eventData: components["schemas"]["OrganisationPreferencesUpsertedEventData"];
        };
        OrganisationUpsertedEventType: "ORGANISATION_UPSERTED";
        OrganisationUserUpdatedEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            userName: string;
            accepted: boolean;
        };
        OrganisationUserUpdatedEventType: "ORGANISATION_USER_UPDATED";
        OrganisationUserUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["OrganisationUserUpdatedEventType"];
            eventData: components["schemas"]["OrganisationUserUpdatedEventData"];
        };
        PasswordChangeRequestedEventData: {
            token: string;
            email: string;
            userName: string;
            locale: components["schemas"]["Locale"];
        };
        PasswordChangeRequestedEventType: "PASSWORD_CHANGE_REQUESTED";
        PasswordChangeRequestedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["PasswordChangeRequestedEventType"];
            eventData: components["schemas"]["PasswordChangeRequestedEventData"];
        };
        ProjectDeletedEventType: "PROJECT_DELETED";
        ProjectEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            projectId: components["schemas"]["ProjectUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            topicsToAdd: components["schemas"]["DataTopic"][];
            topicsToRemove: components["schemas"]["DataTopic"][];
        };
        ProjectNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ProjectUpsertedEventType"] | components["schemas"]["ProjectDeletedEventType"];
            eventData: components["schemas"]["ProjectEventData"];
        };
        ProjectUpsertedEventType: "PROJECT_UPSERTED";
        ReportDeletedEventType: "REPORT_DELETED";
        ReportEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            reportId: components["schemas"]["ReportUUID"];
        };
        ReportNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["ReportUpsertedEventType"] | components["schemas"]["ReportDeletedEventType"];
            eventData: components["schemas"]["ReportEventData"];
        };
        ReportUpsertedEventType: "REPORT_UPSERTED";
        SensorDeletedEventType: "SENSOR_DELETED";
        SensorEventData: {
            organisationId: components["schemas"]["OrganisationUUID"];
            factoryId: components["schemas"]["FactoryUUID"];
            sensorId: components["schemas"]["SensorUUID"];
            userId?: components["schemas"]["UserUUID"];
        };
        SensorNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["SensorUpsertedEventType"] | components["schemas"]["SensorDeletedEventType"];
            eventData: components["schemas"]["SensorEventData"];
        };
        SensorSeriesDeletedEventData: {
            sensorId: components["schemas"]["SensorUUID"];
            valueName: components["schemas"]["ValueName"];
        };
        SensorSeriesDeletedEventType: "SENSOR_SERIES_DELETED";
        SensorSeriesDeletedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["SensorSeriesDeletedEventType"];
            eventData: components["schemas"]["SensorSeriesDeletedEventData"];
        };
        SensorUpsertedEventType: "SENSOR_UPSERTED";
        UserCreatedEventData: {
            user: components["schemas"]["UserModel"];
            verifyToken: components["schemas"]["VerifyToken"];
        };
        UserCreatedEventType: "USER_CREATED";
        UserCreatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserCreatedEventType"];
            eventData: components["schemas"]["UserCreatedEventData"];
        };
        UserFeedbackUpdatedEventData: {
            alertId?: components["schemas"]["AlertUUID"];
            eventsIds: components["schemas"]["EventsUUIDS"];
            organisationId: components["schemas"]["OrganisationUUID"];
            userId: components["schemas"]["UserUUID"];
            userFeedBack: components["schemas"]["userFeedback"];
            beforeDate: components["schemas"]["Date"];
            afterDate: components["schemas"]["Date"];
        };
        UserFeedbackUpdatedEventType: "USER_FEEDBACK_UPDATED";
        UserFeedbackUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserFeedbackUpdatedEventType"];
            eventData: components["schemas"]["UserFeedbackUpdatedEventData"];
        };
        UserInvitedInOrganisationEventData: {
            inviterId: components["schemas"]["UserUUID"];
            userId: components["schemas"]["UserUUID"];
            organisationId: components["schemas"]["OrganisationUUID"];
            userName: string;
            userEmail: string;
            organisationName: string;
            organisationRoles: components["schemas"]["UserFactoryRoles"] | components["schemas"]["UserOrganisationRoles"];
            token: string;
        };
        UserInvitedInOrganisationEventType: "USER_INVITED_IN_ORGANISATION";
        UserInvitedInOrganisationNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserInvitedInOrganisationEventType"];
            eventData: components["schemas"]["UserInvitedInOrganisationEventData"];
        };
        UserUpdatedEventData: {
            user: components["schemas"]["UserModel"];
            verifyToken?: components["schemas"]["VerifyToken"];
        };
        UserUpdatedEventType: "USER_UPDATED";
        UserUpdatedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["UserUpdatedEventType"];
            eventData: components["schemas"]["UserUpdatedEventData"];
        };
        VirtualSensorComputeRequestedEventData: {
            sensorId: components["schemas"]["SensorUUID"];
            projectCode: components["schemas"]["ProjectCode"];
            sensorValueName: components["schemas"]["ValueName"];
        };
        VirtualSensorComputeRequestedEventType: "VIRTUAL_SENSOR_COMPUTE_REQUESTED";
        VirtualSensorComputeRequestedNotification: components["schemas"]["CommonNotification"] & {
            type: components["schemas"]["VirtualSensorComputeRequestedEventType"];
            eventData: components["schemas"]["VirtualSensorComputeRequestedEventData"];
        };
        AllPreferencesModel: {
            default: components["schemas"]["DefaultPreferencesModel"];
            organisation: components["schemas"]["PartialPreferencesModel"];
            factory?: components["schemas"]["PartialPreferencesModel"];
            user: components["schemas"]["PartialPreferencesModel"];
        };
        DefaultPreferencesModel: {
            displayParentName: boolean;
            sensorDisplayExternalId: boolean;
            sensorDisplaySerie: components["schemas"]["SensorDisplaySerie"];
            useFactoryTimeZone: boolean;
            showGraphLabels: boolean;
            showGraphConfigurations: boolean;
            showGraphCycles: boolean;
            showGraphPhases: boolean;
        };
        PartialPreferencesModel: {
            displayParentName?: boolean;
            sensorDisplayExternalId?: boolean;
            sensorDisplaySerie?: components["schemas"]["SensorDisplaySerie"];
            useFactoryTimeZone?: boolean;
            showGraphLabels?: boolean;
            showGraphConfigurations?: boolean;
            showGraphCycles?: boolean;
            showGraphPhases?: boolean;
        };
        SensorDisplaySerie: Enums.SensorDisplaySerie;
        Date: string;
        emailStatus: Enums.EmailStatus;
        FactoryScopedUserOrganisationMembership: {
            roles: components["schemas"]["UserOrganisationRoles"];
            factories: {
                id: components["schemas"]["FactoryUUID"];
                roles: components["schemas"]["UserFactoryRoles"];
                status?: components["schemas"]["UserMembershipStatus"];
                lastInvitationDate?: components["schemas"]["Date"];
            }[];
        };
        GlobalUserOrganisationMembership: {
            roles: components["schemas"]["UserFactoryRoles"];
        };
        Locale: string;
        Limit: 10 | 50 | 100 | 500 | 1000;
        Start: number;
        Role: Enums.Role;
        usersSortByValue: Enums.UsersSortByValue;
        TimeZone: string;
        Total: number;
        UserData: {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: components["schemas"]["Locale"];
            timeZone: components["schemas"]["TimeZone"];
        };
        UserFactoryRoles: [
            "manager" | "technician",
            ...("manager" | "technician")[]
        ];
        UserItem: {
            item: components["schemas"]["UserUUID"];
            users: components["schemas"]["UserModelHash"];
        };
        UserMembership: (components["schemas"]["FactoryScopedUserOrganisationMembership"] | components["schemas"]["GlobalUserOrganisationMembership"]) & {
            id: components["schemas"]["OrganisationUUID"];
            status: components["schemas"]["UserMembershipStatus"];
            lastInvitationDate: components["schemas"]["Date"];
            canReinvite?: boolean;
        };
        UserMembershipStatus: Enums.UserMembershipStatus;
        UserOrganisationRoles: [
            "member",
            ..."member"[]
        ];
        UserModel: {
            id?: components["schemas"]["UserUUID"];
            roles?: components["schemas"]["Role"][];
            password?: string;
            memberships?: components["schemas"]["UserMembership"][];
            data: components["schemas"]["UserData"];
            creation?: components["schemas"]["Date"];
            lastModification?: components["schemas"]["Date"];
            emailStatus?: components["schemas"]["emailStatus"];
        };
        UserUUID: string;
        UserModelHash: {
            [pattern: string]: components["schemas"]["UserModel"];
        };
        UsersItems: {
            total?: components["schemas"]["Total"];
            items: components["schemas"]["UsersUUIDS"];
            users: components["schemas"]["UserModelHash"];
        };
        UsersUUIDS: components["schemas"]["UserUUID"][];
        UUID: string;
        UUIDS: components["schemas"]["UUID"][];
        AlgorithmRun: {
            projectCode: components["schemas"]["ProjectCode"];
            command: string;
            algorithm?: string;
        };
        IngestionStage: Enums.IngestionStage;
        DspadDataAnalysisParameters: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId: string;
            startDate: components["schemas"]["Date"];
            endDate: components["schemas"]["Date"];
        };
        DspadDataCheckParameters: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId: string;
        };
        DspadStableRegistersDataAnalysisParameters: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId: string;
            direction: components["schemas"]["RegisterDirection"];
            startDate: components["schemas"]["Date"];
            endDate: components["schemas"]["Date"];
        };
        DspadStableRegistersDataCheckParameters: {
            projectCode: components["schemas"]["ProjectCode"];
            mlConfigId: string;
            direction: components["schemas"]["RegisterDirection"];
            startDate: components["schemas"]["Date"];
            endDate: components["schemas"]["Date"];
        };
        RegisterDirection: Enums.RegisterDirection;
        DspadDetectionParameters: {
            name: string;
            description?: string;
            projectCode: components["schemas"]["ProjectCode"];
            modelPath?: string;
            sensorsIds: components["schemas"]["NonEmptySensorsUUIDS"];
            valuesNames: components["schemas"]["NonEmptyValuesNames"];
            mlSettings: {
                anomaly_type: string;
                context: {
                    message: string;
                };
            };
        };
        Timestamp: number;
        PasswordChangeBody: {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        AuthorizationCodeRequestBody: {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        ClientCredentialsRequestBody: {
            grant_type: "client_credentials";
            scope?: string;
        };
        PasswordRequestBody: {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        RefreshTokenRequestBody: {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        TokenRequestBody: components["schemas"]["PasswordRequestBody"] | components["schemas"]["AuthorizationCodeRequestBody"] | components["schemas"]["ClientCredentialsRequestBody"] | components["schemas"]["RefreshTokenRequestBody"] | components["schemas"]["VerifyTokenRequestBody"] | components["schemas"]["PasswordChangeBody"];
        VerifyTokenRequestBody: {
            grant_type: "verify_token";
            verify_token: components["schemas"]["VerifyToken"];
        };
        VerifyToken: string;
        DenormalizedInputData: {
            date: string;
            sensorId: string;
            valueName?: components["schemas"]["ValueName"];
            value: number;
            precision?: components["schemas"]["ValuePrecision"];
            labels?: components["schemas"]["Tags"];
        }[];
        GroupedInputData: {
            date: string;
            values: {
                sensorId: string;
                valueName?: components["schemas"]["ValueName"];
                value: number;
                precision?: components["schemas"]["ValuePrecision"];
                labels?: components["schemas"]["Tags"];
            }[];
        };
        InputData: components["schemas"]["GroupedInputData"] | components["schemas"]["DenormalizedInputData"];
        LabelValue: string;
        Tags: components["schemas"]["LabelValue"][];
        ValuePrecision: number;
        SendGridEventType: Enums.SendGridEventType;
        UserOrganisationInvitation: {
            email: string;
            givenName: string;
            familyName: string;
            membership: components["schemas"]["FactoryScopedUserOrganisationMembership"] | components["schemas"]["GlobalUserOrganisationMembership"];
        };
        BinaryModel: string;
        AnomalyType: Enums.AnomalyType;
        MLContext: {
            [pattern: string]: unknown;
        };
        MLLearnResult: {
            type: "learn";
            learn: boolean;
            n_sample: number;
        };
        MLPredictionResult: {
            type: "forecast_predict";
            timestamp: components["schemas"]["Date"];
            lower: number;
            mean: number;
            upper: number;
        };
        MlResultAttachments: {
            name: string;
        }[];
        MlResultImages: {
            name: string;
        }[];
        MLResult: {
            type: Enums.Type;
            images?: components["schemas"]["MlResultImages"];
            attachments?: components["schemas"]["MlResultAttachments"];
            debug?: {
                code: string;
                stack: string;
            };
            data?: components["schemas"]["SensorsValues"];
            anomalies?: {
                type: components["schemas"]["AnomalyType"];
                startDate?: components["schemas"]["Date"];
                endDate?: components["schemas"]["Date"];
            }[];
            results?: (components["schemas"]["MLPredictionResult"] | components["schemas"]["MLLearnResult"])[];
            context: components["schemas"]["DataLabels"] & {
                runDate: components["schemas"]["Date"];
                runId: components["schemas"]["RunUUID"];
                eventType: components["schemas"]["EventType"];
                runName?: string;
                startDate?: components["schemas"]["Date"];
                endDate?: components["schemas"]["Date"];
            };
            mlContext?: components["schemas"]["MLContext"];
            [pattern: string]: unknown;
        };
        SensorsValues: {
            sensorId: string;
            valueName?: string;
            values?: [
                string,
                number,
                number,
                string[]
            ][];
        }[];
        AlertDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlertDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlertEventData"];
        };
        AlertUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlertUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlertEventData"];
        };
        AlgorithmModelUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AlgorithmModelUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AlgorithmModelEventData"];
        };
        ApplicationDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ApplicationDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ApplicationEventData"];
        };
        ApplicationUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ApplicationUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ApplicationEventData"];
        };
        AssetDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AssetDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AssetEventData"];
        };
        AssetUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["AssetUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["AssetEventData"];
        };
        EmailStatusUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["EmailStatusUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["EmailStatusUpdatedEventData"];
        };
        FactoryDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["FactoryDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["FactoryEventData"];
        };
        FactoryUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["FactoryUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["FactoryEventData"];
        };
        InterventionDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["InterventionDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["InterventionEventData"];
        };
        InterventionUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["InterventionUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["InterventionEventData"];
        };
        MembershipCancelledEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["MembershipCancelledEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["MembershipCancelledEventData"];
        };
        NotificationEvent: components["schemas"]["AlertDeletedEvent"] | components["schemas"]["AlertUpsertedEvent"] | components["schemas"]["AlgorithmModelUpdatedEvent"] | components["schemas"]["ApplicationDeletedEvent"] | components["schemas"]["ApplicationUpsertedEvent"] | components["schemas"]["AssetDeletedEvent"] | components["schemas"]["AssetUpsertedEvent"] | components["schemas"]["EmailStatusUpdatedEvent"] | components["schemas"]["FactoryDeletedEvent"] | components["schemas"]["FactoryUpsertedEvent"] | components["schemas"]["InterventionDeletedEvent"] | components["schemas"]["InterventionUpsertedEvent"] | components["schemas"]["MembershipCancelledEvent"] | components["schemas"]["OrganisationDeletedEvent"] | components["schemas"]["OrganisationPreferencesUpsertedEvent"] | components["schemas"]["OrganisationUpsertedEvent"] | components["schemas"]["OrganisationUserUpdatedEvent"] | components["schemas"]["PasswordChangeRequestedEvent"] | components["schemas"]["ProjectDeletedEvent"] | components["schemas"]["ProjectUpsertedEvent"] | components["schemas"]["ReportDeletedEvent"] | components["schemas"]["ReportUpsertedEvent"] | components["schemas"]["SensorDeletedEvent"] | components["schemas"]["SensorSeriesDeletedEvent"] | components["schemas"]["SensorUpsertedEvent"] | components["schemas"]["UserCreatedEvent"] | components["schemas"]["UserFeedbackUpdatedEvent"] | components["schemas"]["UserInvitedInOrganisationEvent"] | components["schemas"]["UserUpdatedEvent"] | components["schemas"]["VirtualSensorComputeRequestedEvent"];
        NotificationUUID: string;
        NotificationsUUIDS: components["schemas"]["NotificationUUID"][];
        OrganisationDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationEventData"];
        };
        OrganisationPreferencesUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationPreferencesUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationPreferencesUpsertedEventData"];
        };
        OrganisationUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationEventData"];
        };
        OrganisationUserUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["OrganisationUserUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["OrganisationUserUpdatedEventData"];
        };
        PasswordChangeRequestedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["PasswordChangeRequestedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["PasswordChangeRequestedEventData"];
        };
        ProjectDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ProjectDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ProjectEventData"];
        };
        ProjectUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ProjectUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ProjectEventData"];
        };
        ReportDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ReportDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ReportEventData"];
        };
        ReportUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["ReportUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["ReportEventData"];
        };
        SensorDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorEventData"];
        };
        SensorSeriesDeletedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorSeriesDeletedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorSeriesDeletedEventData"];
        };
        SensorUpsertedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["SensorUpsertedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["SensorEventData"];
        };
        UserCreatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserCreatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserCreatedEventData"];
        };
        UserFeedbackUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserFeedbackUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserFeedbackUpdatedEventData"];
        };
        UserInvitedInOrganisationEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserInvitedInOrganisationEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserInvitedInOrganisationEventData"];
        };
        UserUpdatedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["UserUpdatedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["UserUpdatedEventData"];
        };
        VirtualSensorComputeRequestedEvent: {
            id: components["schemas"]["NotificationUUID"];
            type: components["schemas"]["VirtualSensorComputeRequestedEventType"];
            timestamp: components["schemas"]["Timestamp"];
            data: components["schemas"]["VirtualSensorComputeRequestedEventData"];
        };
        PreferenceLevel: Enums.PreferenceLevel;
    };
}
export namespace Enums {
    export enum TokenType {
        Bearer = "bearer",
        Mac = "mac"
    }
    export enum Error {
        InvalidRequest = "invalid_request",
        InvalidClient = "invalid_client",
        InvalidGrant = "invalid_grant",
        UnauthorizedClient = "unauthorized_client",
        UnsupportedGrantType = "unsupported_grant_type",
        InvalidScope = "invalid_scope"
    }
    export enum SortDirection {
        Asc = "asc",
        Desc = "desc"
    }
    export enum AlertsSortByValue {
        Severity = "severity",
        Priority = "priority",
        AssignedAt = "assignedAt",
        StartAt = "startAt",
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum GrantType {
        Code = "code",
        Token = "token",
        Password = "password",
        Refresh = "refresh",
        ClientCredentials = "client_credentials",
        Verify = "verify",
        PasswordChange = "password_change"
    }
    export enum Scope {
        User = "user",
        Admin = "admin",
        Data = "data",
        Webhook = "webhook",
        Oauth2 = "oauth2",
        Ml = "ml"
    }
    export enum ApplicationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum PowerState {
        Unknown = "unknown",
        On = "on",
        Off = "off"
    }
    export enum OperatingState {
        Unknown = "unknown",
        Normal = "normal",
        Stopped = "stopped",
        Idle = "idle"
    }
    export enum HealthState {
        Unknown = "unknown",
        Good = "good",
        Faulty = "faulty",
        Erroring = "erroring"
    }
    export enum AssetType {
        Area = "area",
        Line = "line",
        Machine = "machine",
        Part = "part"
    }
    export enum LineMetricsStatus {
        Good = "good",
        Faulty = "faulty",
        Error = "error"
    }
    export enum AssetsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum EventType {
        SegmentedAnomalyDetectionPredict = "segmented_anomaly_detection_predict",
        UnivariateForecastLearn = "univariate_forecast_learn",
        RealtimeAlert = "realtime_alert",
        DriftDetection = "drift_detection",
        UnivariateForecastPredict = "univariate_forecast_predict",
        DspadPredict = "dspad_predict",
        Process = "process",
        Anomaly = "anomaly",
        DspadDataMvt = "dspad_data_mvt",
        Cycle = "cycle",
        Phase = "phase"
    }
    export enum DoSyncMode {
        OneWayIn = "one-way-in",
        OneWayOut = "one-way-out",
        TwoWays = "two-ways"
    }
    export enum FactoriesSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AlertStatus {
        Open = "open",
        Discarded = "discarded",
        Fixed = "fixed",
        Closed = "closed"
    }
    export enum Severity {
        NotSet = "not_set",
        Critical = "critical",
        Major = "major",
        Moderate = "moderate",
        Minor = "minor",
        Cosmetic = "cosmetic"
    }
    export enum ImageScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum InterventionType {
        Fix = "fix",
        Prevent = "prevent",
        Control = "control"
    }
    export enum Priority {
        NotSet = "not_set",
        Urgent = "urgent",
        Important = "important",
        Secondary = "secondary"
    }
    export enum InterventionsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Priority = "priority"
    }
    export enum StandardAlertCode {
        MissingData = "missing_data",
        BadData = "bad_data",
        WrongDelta = "wrong_delta",
        ProductionDrop = "production_drop",
        OutOfBounds = "out_of_bounds",
        AbnormalData = "abnormal_data",
        DataDrift = "data_drift",
        SilenceAlert = "silence_alert",
        RealtimeAlert = "realtime_alert"
    }
    export enum OrganisationsSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum ProjectsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AttachmentScope {
        DataScience = "data-science",
        Customer = "customer"
    }
    export enum ReportsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum AlertType {
        Realtime = "realtime",
        Silence = "silence"
    }
    export enum TheTargetForLabelTestsLinkedAssetsOrAlsoItsAncestors {
        Ancestors = "ancestors",
        Assets = "assets",
        All = "all"
    }
    export enum WetherAllLabelsShouldMatchOrAny {
        All = "all",
        Any = "any"
    }
    export enum RealtimeAlertTriggerBranchOperator {
        And = "and",
        Or = "or"
    }
    export enum NameOfTheLabelToTest {
        Phases = "phases",
        Cycles = "cycles",
        Configurations = "configurations",
        Tags = "tags"
    }
    export enum RealtimeAlertTriggerValueTestOperator {
        Eq = "eq",
        Gt = "gt",
        Gte = "gte",
        Lt = "lt",
        Lte = "lte",
        And = "and",
        Xor = "xor"
    }
    export enum SensorType {
        Qualitative = "qualitative",
        Quantitative = "quantitative"
    }
    export enum AggregationType {
        Ratio = "ratio",
        Sum = "sum"
    }
    export enum Unit {
        Days = "days",
        Hours = "hours"
    }
    export enum SensorsSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum Aggregation {
        Min = "min",
        Max = "max",
        Avg = "avg",
        Count = "count",
        Sum = "sum",
        P25 = "p25",
        Median = "median",
        P75 = "p75",
        Top1 = "top1",
        Top2 = "top2",
        Top3 = "top3",
        Others = "others"
    }
    export enum Granularity {
        Second = "second",
        Minute = "minute",
        FifteenMinute = "fifteen_minute",
        ThirtyMinute = "thirty_minute",
        Hour = "hour",
        Day = "day",
        Week = "week",
        Month = "month",
        Quarter = "quarter",
        Year = "year"
    }
    export enum EventField {
        AggregatableValue1 = "aggregatableValue1",
        AggregatableValue2 = "aggregatableValue2",
        AggregatableValue3 = "aggregatableValue3"
    }
    export enum TasksSortByValue {
        Creation = "creation",
        LastModification = "lastModification"
    }
    export enum TaskStatus {
        ToAssign = "to_assign",
        ToDo = "to_do",
        InProgress = "in_progress",
        Done = "done"
    }
    export enum TaskType {
        Alert = "alert",
        Intervention = "intervention"
    }
    export enum SearchFilterType {
        Factory = "factory",
        Asset = "asset"
    }
    export enum SearchType {
        User = "user",
        Factory = "factory",
        Project = "project",
        Asset = "asset",
        Application = "application",
        Intervention = "intervention",
        Alert = "alert",
        Report = "report",
        Sensor = "sensor",
        Organisation = "organisation"
    }
    export enum NotificationType {
        USERCREATED = "USER_CREATED",
        USERUPDATED = "USER_UPDATED",
        ALERTUPSERTED = "ALERT_UPSERTED",
        ALERTDELETED = "ALERT_DELETED",
        ASSETUPSERTED = "ASSET_UPSERTED",
        ASSETDELETED = "ASSET_DELETED",
        SENSORUPSERTED = "SENSOR_UPSERTED",
        SENSORDELETED = "SENSOR_DELETED",
        REPORTUPSERTED = "REPORT_UPSERTED",
        REPORTDELETED = "REPORT_DELETED",
        INTERVENTIONUPSERTED = "INTERVENTION_UPSERTED",
        INTERVENTIONDELETED = "INTERVENTION_DELETED",
        ALGORITHMMODELUPDATED = "ALGORITHM_MODEL_UPDATED",
        PROJECTUPSERTED = "PROJECT_UPSERTED",
        PROJECTDELETED = "PROJECT_DELETED",
        FACTORYUPSERTED = "FACTORY_UPSERTED",
        FACTORYDELETED = "FACTORY_DELETED",
        ORGANISATIONUPSERTED = "ORGANISATION_UPSERTED",
        ORGANISATIONDELETED = "ORGANISATION_DELETED",
        ORGANISATIONUSERUPDATED = "ORGANISATION_USER_UPDATED",
        ORGANISATIONPREFERENCESUPSERTED = "ORGANISATION_PREFERENCES_UPSERTED",
        SENSORSERIESDELETED = "SENSOR_SERIES_DELETED",
        PASSWORDCHANGEREQUESTED = "PASSWORD_CHANGE_REQUESTED",
        EMAILSTATUSUPDATED = "EMAIL_STATUS_UPDATED",
        USERFEEDBACKUPDATED = "USER_FEEDBACK_UPDATED",
        USERINVITEDINORGANISATION = "USER_INVITED_IN_ORGANISATION",
        MEMBERSHIPCANCELLED = "MEMBERSHIP_CANCELLED",
        VIRTUALSENSORCOMPUTEREQUESTED = "VIRTUAL_SENSOR_COMPUTE_REQUESTED"
    }
    export enum SensorDisplaySerie {
        Always = "always",
        Never = "never",
        IfExists = "ifExists"
    }
    export enum EmailStatus {
        Bouncing = "bouncing",
        Reachable = "reachable",
        Dropped = "dropped",
        Unknown = "unknown"
    }
    export enum Role {
        Admin = "admin",
        User = "user",
        Candidate = "candidate",
        Third = "third"
    }
    export enum UsersSortByValue {
        Creation = "creation",
        LastModification = "lastModification",
        Name = "name"
    }
    export enum UserMembershipStatus {
        Member = "member",
        Pending = "pending",
        Declined = "declined",
        Cancelled = "cancelled"
    }
    export enum IngestionStage {
        Raw = "raw",
        Enriched = "enriched"
    }
    export enum RegisterDirection {
        Ascent = "ascent",
        Descent = "descent"
    }
    export enum SendGridEventType {
        Processed = "processed",
        Dropped = "dropped",
        Delivered = "delivered",
        Deferred = "deferred",
        Bounce = "bounce",
        Blocked = "blocked",
        Open = "open",
        Click = "click",
        Spamreport = "spamreport",
        Unsubscribe = "unsubscribe",
        GroupUnsubscribe = "group_unsubscribe",
        GroupResubscribe = "group_resubscribe"
    }
    export enum AnomalyType {
        AbnormalMachineBehavior = "abnormal_machine_behavior",
        AbnormalSensorBehavior = "abnormal_sensor_behavior",
        MissingData = "missing_data"
    }
    export enum Type {
        Succeeded = "succeeded",
        Errored = "errored",
        Discarded = "discarded"
    }
    export enum PreferenceLevel {
        Organisation = "organisation",
        Factory = "factory",
        User = "user"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with parameters_aliasing.json 1`] = `
"declare interface components {
    parameters: {
        durationUnit: "s" | "m" | "h";
        durationTime: number;
    };
}
declare interface paths {
    "/delay": {
        parameters: {
            query: {
                unit: components["parameters"]["durationUnit"];
            };
        };
        "get": operations["getDelay"];
    };
}
declare interface operations {
    getDelay: {
        responses: {
            204: object;
        };
        parameters: {
            query: {
                duration: components["parameters"]["durationTime"];
            };
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with parameters_aliasing.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface components {
    parameters: {
        durationUnit: "s" | "m" | "h";
        durationTime: number;
    };
}
declare interface paths {
    "/delay": {
        parameters: {
            query: {
                unit: components["parameters"]["durationUnit"];
            };
        };
        "get": operations["getDelay"];
    };
}
declare interface operations {
    getDelay: {
        parameters: {
            query: {
                duration: components["parameters"]["durationTime"];
            };
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with parameters_aliasing.json and generateUnusedSchemas option to true 1`] = `
"export interface components {
    parameters: {
        durationUnit: "s" | "m" | "h";
        durationTime: number;
    };
}
export interface paths {
    "/delay": {
        parameters: {
            query: {
                unit: components["parameters"]["durationUnit"];
            };
        };
        "get": operations["getDelay"];
    };
}
export interface operations {
    getDelay: {
        responses: {
            204: object;
        };
        parameters: {
            query: {
                duration: components["parameters"]["durationTime"];
            };
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json 1`] = `
"declare interface paths {
    "/pet": {
        put: operations["updatePet"];
        post: operations["addPet"];
    };
    "/pet/findByStatus": {
        "get": operations["findPetsByStatus"];
    };
    "/pet/findByTags": {
        "get": operations["findPetsByTags"];
    };
    "/pet/{petId}": {
        "get": operations["getPetById"];
        post: operations["updatePetWithForm"];
        "delete": operations["deletePet"];
    };
    "/pet/{petId}/uploadImage": {
        post: operations["uploadFile"];
    };
    "/store/inventory": {
        "get": operations["getInventory"];
    };
    "/store/order": {
        post: operations["placeOrder"];
    };
    "/store/order/{orderId}": {
        "get": operations["getOrderById"];
        "delete": operations["deleteOrder"];
    };
    "/user": {
        post: operations["createUser"];
    };
    "/user/createWithArray": {
        post: operations["createUsersWithArrayInput"];
    };
    "/user/createWithList": {
        post: operations["createUsersWithListInput"];
    };
    "/user/login": {
        "get": operations["loginUser"];
    };
    "/user/logout": {
        "get": operations["logoutUser"];
    };
    "/user/{username}": {
        "get": operations["getUserByName"];
        put: operations["updateUser"];
        "delete": operations["deleteUser"];
    };
}
declare interface operations {
    updatePet: {
        requestBody: components["requestBodies"]["Pet"];
        responses: {
            400: object;
            404: object;
            405: object;
        };
    };
    addPet: {
        requestBody: components["requestBodies"]["Pet"];
        responses: {
            405: object;
        };
    };
    findPetsByStatus: {
        responses: {
            200: {
                body: components["schemas"]["Pet"][] | components["schemas"]["Pet"][];
            };
            400: object;
        };
        parameters: {
            query: {
                status: ("available" | "pending" | "sold")[];
            };
        };
    };
    findPetsByTags: {
        responses: {
            200: {
                body: components["schemas"]["Pet"][] | components["schemas"]["Pet"][];
            };
            400: object;
        };
        parameters: {
            query: {
                tags: string[];
            };
        };
    };
    getPetById: {
        responses: {
            200: {
                body: components["schemas"]["Pet"] | components["schemas"]["Pet"];
            };
            400: object;
            404: object;
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    updatePetWithForm: {
        requestBody?: components["schemas"]["body"];
        responses: {
            405: object;
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    deletePet: {
        responses: {
            400: object;
        };
        parameters: {
            headers: {
                api_key?: string;
            };
            path: {
                petId: number;
            };
        };
    };
    uploadFile: {
        requestBody?: components["schemas"]["body_1"];
        responses: {
            200: {
                body: components["schemas"]["ApiResponse"];
            };
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    getInventory: {
        responses: {
            200: {
                body: {
                    [pattern: string]: unknown;
                };
            };
        };
    };
    placeOrder: {
        requestBody: components["schemas"]["Order"];
        responses: {
            200: {
                body: components["schemas"]["Order"] | components["schemas"]["Order"];
            };
            400: object;
        };
    };
    getOrderById: {
        responses: {
            200: {
                body: components["schemas"]["Order"] | components["schemas"]["Order"];
            };
            400: object;
            404: object;
        };
        parameters: {
            path: {
                orderId: number;
            };
        };
    };
    deleteOrder: {
        responses: {
            400: object;
            404: object;
        };
        parameters: {
            path: {
                orderId: string;
            };
        };
    };
    createUser: {
        requestBody: components["schemas"]["User"];
        responses: {
            "default": object;
        };
    };
    createUsersWithArrayInput: {
        requestBody: components["requestBodies"]["UserArray"];
        responses: {
            "default": object;
        };
    };
    createUsersWithListInput: {
        requestBody: components["requestBodies"]["UserArray"];
        responses: {
            "default": object;
        };
    };
    loginUser: {
        responses: {
            200: {
                body: string | string;
                headers: {
                    "X-Rate-Limit": number;
                    "X-Expires-After"?: string;
                };
            };
            400: object;
        };
        parameters: {
            query: {
                username: string;
                password: string;
            };
        };
    };
    logoutUser: {
        responses: {
            "default": object;
        };
    };
    getUserByName: {
        responses: {
            200: {
                body: components["schemas"]["User"] | components["schemas"]["User"];
            };
            400: object;
            404: object;
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
    updateUser: {
        requestBody: components["schemas"]["User"];
        responses: {
            400: object;
            404: object;
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
    deleteUser: {
        responses: {
            400: object;
            404: object;
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
}
declare interface components {
    requestBodies: {
        Pet: components["schemas"]["Pet"] | components["schemas"]["Pet"];
        UserArray: components["schemas"]["User"][];
    };
    schemas: {
        Pet: {
            id?: number;
            category?: components["schemas"]["Category"];
            name: string;
            photoUrls: string[];
            tags?: components["schemas"]["Tag"][];
            status?: Enums.PetStatusInTheStore;
        };
        body: {
            name?: string;
            status?: string;
        };
        body_1: {
            additionalMetadata?: string;
            file?: string;
        };
        ApiResponse: {
            code?: number;
            type?: string;
            message?: string;
        };
        Order: {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: Enums.OrderStatus;
            complete?: boolean;
        };
        User: {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        Category: {
            id?: number;
            name?: string;
        };
        Tag: {
            id?: number;
            name?: string;
        };
    };
}
declare namespace Enums {
    export enum PetStatusInTheStore {
        Available = "available",
        Pending = "pending",
        Sold = "sold"
    }
    export enum OrderStatus {
        Placed = "placed",
        Approved = "approved",
        Delivered = "delivered"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface paths {
    "/pet": {
        put: operations["updatePet"];
        post: operations["addPet"];
    };
    "/pet/findByStatus": {
        "get": operations["findPetsByStatus"];
    };
    "/pet/findByTags": {
        "get": operations["findPetsByTags"];
    };
    "/pet/{petId}": {
        "get": operations["getPetById"];
        post: operations["updatePetWithForm"];
        "delete": operations["deletePet"];
    };
    "/pet/{petId}/uploadImage": {
        post: operations["uploadFile"];
    };
    "/store/inventory": {
        "get": operations["getInventory"];
    };
    "/store/order": {
        post: operations["placeOrder"];
    };
    "/store/order/{orderId}": {
        "get": operations["getOrderById"];
        "delete": operations["deleteOrder"];
    };
    "/user": {
        post: operations["createUser"];
    };
    "/user/createWithArray": {
        post: operations["createUsersWithArrayInput"];
    };
    "/user/createWithList": {
        post: operations["createUsersWithListInput"];
    };
    "/user/login": {
        "get": operations["loginUser"];
    };
    "/user/logout": {
        "get": operations["logoutUser"];
    };
    "/user/{username}": {
        "get": operations["getUserByName"];
        put: operations["updateUser"];
        "delete": operations["deleteUser"];
    };
}
declare interface operations {
    updatePet: {
        requestBody: components["requestBodies"]["Pet"];
    };
    addPet: {
        requestBody: components["requestBodies"]["Pet"];
    };
    findPetsByStatus: {
        responses: {
            200: {
                body: components["schemas"]["Pet"][] | components["schemas"]["Pet"][];
            };
        };
        parameters: {
            query: {
                status: ("available" | "pending" | "sold")[];
            };
        };
    };
    findPetsByTags: {
        responses: {
            200: {
                body: components["schemas"]["Pet"][] | components["schemas"]["Pet"][];
            };
        };
        parameters: {
            query: {
                tags: string[];
            };
        };
    };
    getPetById: {
        responses: {
            200: {
                body: components["schemas"]["Pet"] | components["schemas"]["Pet"];
            };
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    updatePetWithForm: {
        requestBody?: components["schemas"]["body"];
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    deletePet: {
        parameters: {
            headers: {
                api_key?: string;
            };
            path: {
                petId: number;
            };
        };
    };
    uploadFile: {
        requestBody?: components["schemas"]["body_1"];
        responses: {
            200: {
                body: components["schemas"]["ApiResponse"];
            };
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    getInventory: {
        responses: {
            200: {
                body: {
                    [pattern: string]: unknown;
                };
            };
        };
    };
    placeOrder: {
        requestBody: components["schemas"]["Order"];
        responses: {
            200: {
                body: components["schemas"]["Order"] | components["schemas"]["Order"];
            };
        };
    };
    getOrderById: {
        responses: {
            200: {
                body: components["schemas"]["Order"] | components["schemas"]["Order"];
            };
        };
        parameters: {
            path: {
                orderId: number;
            };
        };
    };
    deleteOrder: {
        parameters: {
            path: {
                orderId: string;
            };
        };
    };
    createUser: {
        requestBody: components["schemas"]["User"];
    };
    createUsersWithArrayInput: {
        requestBody: components["requestBodies"]["UserArray"];
    };
    createUsersWithListInput: {
        requestBody: components["requestBodies"]["UserArray"];
    };
    loginUser: {
        responses: {
            200: {
                body: string | string;
                headers: {
                    "X-Rate-Limit": number;
                    "X-Expires-After"?: string;
                };
            };
        };
        parameters: {
            query: {
                username: string;
                password: string;
            };
        };
    };
    getUserByName: {
        responses: {
            200: {
                body: components["schemas"]["User"] | components["schemas"]["User"];
            };
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
    updateUser: {
        requestBody: components["schemas"]["User"];
        parameters: {
            path: {
                username: string;
            };
        };
    };
    deleteUser: {
        parameters: {
            path: {
                username: string;
            };
        };
    };
}
declare interface components {
    requestBodies: {
        Pet: components["schemas"]["Pet"] | components["schemas"]["Pet"];
        UserArray: components["schemas"]["User"][];
    };
    schemas: {
        Pet: {
            id?: number;
            category?: components["schemas"]["Category"];
            name: string;
            photoUrls: string[];
            tags?: components["schemas"]["Tag"][];
            status?: "available" | "pending" | "sold";
        };
        body: {
            name?: string;
            status?: string;
        };
        body_1: {
            additionalMetadata?: string;
            file?: string;
        };
        ApiResponse: {
            code?: number;
            type?: string;
            message?: string;
        };
        Order: {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: "placed" | "approved" | "delivered";
            complete?: boolean;
        };
        User: {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        Category: {
            id?: number;
            name?: string;
        };
        Tag: {
            id?: number;
            name?: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and generateUnusedSchemas option to true 1`] = `
"export interface paths {
    "/pet": {
        put: operations["updatePet"];
        post: operations["addPet"];
    };
    "/pet/findByStatus": {
        "get": operations["findPetsByStatus"];
    };
    "/pet/findByTags": {
        "get": operations["findPetsByTags"];
    };
    "/pet/{petId}": {
        "get": operations["getPetById"];
        post: operations["updatePetWithForm"];
        "delete": operations["deletePet"];
    };
    "/pet/{petId}/uploadImage": {
        post: operations["uploadFile"];
    };
    "/store/inventory": {
        "get": operations["getInventory"];
    };
    "/store/order": {
        post: operations["placeOrder"];
    };
    "/store/order/{orderId}": {
        "get": operations["getOrderById"];
        "delete": operations["deleteOrder"];
    };
    "/user": {
        post: operations["createUser"];
    };
    "/user/createWithArray": {
        post: operations["createUsersWithArrayInput"];
    };
    "/user/createWithList": {
        post: operations["createUsersWithListInput"];
    };
    "/user/login": {
        "get": operations["loginUser"];
    };
    "/user/logout": {
        "get": operations["logoutUser"];
    };
    "/user/{username}": {
        "get": operations["getUserByName"];
        put: operations["updateUser"];
        "delete": operations["deleteUser"];
    };
}
export interface operations {
    updatePet: {
        requestBody: components["requestBodies"]["Pet"];
        responses: {
            400: object;
            404: object;
            405: object;
        };
    };
    addPet: {
        requestBody: components["requestBodies"]["Pet"];
        responses: {
            405: object;
        };
    };
    findPetsByStatus: {
        responses: {
            200: {
                body: components["schemas"]["Pet"][] | components["schemas"]["Pet"][];
            };
            400: object;
        };
        parameters: {
            query: {
                status: ("available" | "pending" | "sold")[];
            };
        };
    };
    findPetsByTags: {
        responses: {
            200: {
                body: components["schemas"]["Pet"][] | components["schemas"]["Pet"][];
            };
            400: object;
        };
        parameters: {
            query: {
                tags: string[];
            };
        };
    };
    getPetById: {
        responses: {
            200: {
                body: components["schemas"]["Pet"] | components["schemas"]["Pet"];
            };
            400: object;
            404: object;
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    updatePetWithForm: {
        requestBody?: components["schemas"]["body"];
        responses: {
            405: object;
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    deletePet: {
        responses: {
            400: object;
        };
        parameters: {
            headers: {
                api_key?: string;
            };
            path: {
                petId: number;
            };
        };
    };
    uploadFile: {
        requestBody?: components["schemas"]["body_1"];
        responses: {
            200: {
                body: components["schemas"]["ApiResponse"];
            };
        };
        parameters: {
            path: {
                petId: number;
            };
        };
    };
    getInventory: {
        responses: {
            200: {
                body: {
                    [pattern: string]: unknown;
                };
            };
        };
    };
    placeOrder: {
        requestBody: components["schemas"]["Order"];
        responses: {
            200: {
                body: components["schemas"]["Order"] | components["schemas"]["Order"];
            };
            400: object;
        };
    };
    getOrderById: {
        responses: {
            200: {
                body: components["schemas"]["Order"] | components["schemas"]["Order"];
            };
            400: object;
            404: object;
        };
        parameters: {
            path: {
                orderId: number;
            };
        };
    };
    deleteOrder: {
        responses: {
            400: object;
            404: object;
        };
        parameters: {
            path: {
                orderId: string;
            };
        };
    };
    createUser: {
        requestBody: components["schemas"]["User"];
        responses: {
            "default": object;
        };
    };
    createUsersWithArrayInput: {
        requestBody: components["requestBodies"]["UserArray"];
        responses: {
            "default": object;
        };
    };
    createUsersWithListInput: {
        requestBody: components["requestBodies"]["UserArray"];
        responses: {
            "default": object;
        };
    };
    loginUser: {
        responses: {
            200: {
                body: string | string;
                headers: {
                    "X-Rate-Limit": number;
                    "X-Expires-After"?: string;
                };
            };
            400: object;
        };
        parameters: {
            query: {
                username: string;
                password: string;
            };
        };
    };
    logoutUser: {
        responses: {
            "default": object;
        };
    };
    getUserByName: {
        responses: {
            200: {
                body: components["schemas"]["User"] | components["schemas"]["User"];
            };
            400: object;
            404: object;
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
    updateUser: {
        requestBody: components["schemas"]["User"];
        responses: {
            400: object;
            404: object;
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
    deleteUser: {
        responses: {
            400: object;
            404: object;
        };
        parameters: {
            path: {
                username: string;
            };
        };
    };
}
export interface components {
    requestBodies: {
        Pet: components["schemas"]["Pet"] | components["schemas"]["Pet"];
        UserArray: components["schemas"]["User"][];
    };
    schemas: {
        Order: {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: Enums.OrderStatus;
            complete?: boolean;
        };
        Category: {
            id?: number;
            name?: string;
        };
        User: {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        Tag: {
            id?: number;
            name?: string;
        };
        Pet: {
            id?: number;
            category?: components["schemas"]["Category"];
            name: string;
            photoUrls: string[];
            tags?: components["schemas"]["Tag"][];
            status?: Enums.PetStatusInTheStore;
        };
        ApiResponse: {
            code?: number;
            type?: string;
            message?: string;
        };
        body: {
            name?: string;
            status?: string;
        };
        body_1: {
            additionalMetadata?: string;
            file?: string;
        };
    };
}
export namespace Enums {
    export enum OrderStatus {
        Placed = "placed",
        Approved = "approved",
        Delivered = "delivered"
    }
    export enum PetStatusInTheStore {
        Available = "available",
        Pending = "pending",
        Sold = "sold"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json 1`] = `
"declare interface webhooks {
    newPet: {
        post: operations["WebhooksNewPet"];
    };
}
declare interface operations {
    WebhooksNewPet: {
        requestBody?: components["schemas"]["Pet"];
        responses: {
            200: object;
        };
    };
}
declare interface components {
    schemas: {
        Pet: {
            id: number;
            name: string;
            tag?: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface webhooks {
    newPet: {
        post: operations["WebhooksNewPet"];
    };
}
declare interface operations {
    WebhooksNewPet: {
        requestBody?: components["schemas"]["Pet"];
        responses: {
            200: object;
        };
    };
}
declare interface components {
    schemas: {
        Pet: {
            id: number;
            name: string;
            tag?: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json and generateUnusedSchemas option to true 1`] = `
"export interface webhooks {
    newPet: {
        post: operations["WebhooksNewPet"];
    };
}
export interface operations {
    WebhooksNewPet: {
        requestBody?: components["schemas"]["Pet"];
        responses: {
            200: object;
        };
    };
}
export interface components {
    schemas: {
        Pet: {
            id: number;
            name: string;
            tag?: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json 1`] = `
"declare interface paths {
    "/delay": {
        "get": operations["getDelay"];
    };
    "/diagnostic": {
        "get": operations["getDiagnostic"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/{pathParam1}/{pathParam2}": {
        "get": operations["getParameters"];
    };
    "/time": {
        "get": operations["getTime"];
    };
    "/echo": {
        put: operations["putEcho"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
declare interface operations {
    getDelay: {
        responses: {
            200: object;
            204: object;
        };
        parameters: {
            query: {
                duration: components["parameters"]["duration"];
            };
        };
    };
    getDiagnostic: {
        responses: {
            200: components["responses"]["Diagnostic"];
            204: components["responses"]["Diagnostic"];
        };
    };
    getOpenAPI: {
        responses: {
            200: {
                body: object;
            };
        };
    };
    getParameters: {
        responses: {
            200: {
                body: {
                    aHeader?: boolean;
                    aMultiHeader?: number[];
                    pathParam1?: number;
                    pathParam2?: string;
                    queryParam?: string[];
                };
            };
        };
        parameters: {
            path: {
                pathParam1: components["parameters"]["pathParam1"];
                pathParam2: components["parameters"]["pathParam2"];
            };
            query: {
                queryParam: components["parameters"]["queryParam"];
            };
            headers: {
                aHeader?: boolean;
                aMultiHeader?: number[];
            };
        };
    };
    getTime: {
        responses: {
            200: {
                body: components["schemas"]["TimeSchema"];
            };
        };
    };
    putEcho: {
        requestBody: components["requestBodies"]["Echo"];
        responses: {
            200: components["responses"]["Echo"];
        };
    };
    getPing: {
        requestBody: components["schemas"]["Echo"];
        responses: {
            200: {
                body: {
                    pong?: "pong";
                };
            };
        };
    };
}
declare interface components {
    parameters: {
        duration: number;
        pathParam1: number;
        pathParam2: string;
        queryParam: string[];
    };
    responses: {
        Diagnostic: {
            body: {
                transactions: {
                    [pattern: string]: unknown;
                };
            };
        };
        Echo: {
            body: components["schemas"]["Echo"];
        };
    };
    requestBodies: {
        Echo: components["schemas"]["Echo"];
    };
    schemas: {
        TimeSchema: {
            currentDate?: string;
        };
        Echo: {
            echo: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface paths {
    "/delay": {
        "get": operations["getDelay"];
    };
    "/diagnostic": {
        "get": operations["getDiagnostic"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/{pathParam1}/{pathParam2}": {
        "get": operations["getParameters"];
    };
    "/time": {
        "get": operations["getTime"];
    };
    "/echo": {
        put: operations["putEcho"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
declare interface operations {
    getDelay: {
        responses: {
            200: object;
        };
        parameters: {
            query: {
                duration: components["parameters"]["duration"];
            };
        };
    };
    getDiagnostic: {
        responses: {
            200: components["responses"]["Diagnostic"];
        };
    };
    getOpenAPI: {
        responses: {
            200: {
                body: object;
            };
        };
    };
    getParameters: {
        responses: {
            200: {
                body: {
                    aHeader?: boolean;
                    aMultiHeader?: number[];
                    pathParam1?: number;
                    pathParam2?: string;
                    queryParam?: string[];
                };
            };
        };
        parameters: {
            path: {
                pathParam1: components["parameters"]["pathParam1"];
                pathParam2: components["parameters"]["pathParam2"];
            };
            query: {
                queryParam: components["parameters"]["queryParam"];
            };
            headers: {
                aHeader?: boolean;
                aMultiHeader?: number[];
            };
        };
    };
    getTime: {
        responses: {
            200: {
                body: components["schemas"]["TimeSchema"];
            };
        };
    };
    putEcho: {
        requestBody: components["requestBodies"]["Echo"];
        responses: {
            200: components["responses"]["Echo"];
        };
    };
    getPing: {
        requestBody: components["schemas"]["Echo"];
        responses: {
            200: {
                body: {
                    pong?: "pong";
                };
            };
        };
    };
}
declare interface components {
    parameters: {
        duration: number;
        pathParam1: number;
        pathParam2: string;
        queryParam: string[];
    };
    responses: {
        Diagnostic: {
            body: {
                transactions: {
                    [pattern: string]: unknown;
                };
            };
        };
        Echo: {
            body: components["schemas"]["Echo"];
        };
    };
    requestBodies: {
        Echo: components["schemas"]["Echo"];
    };
    schemas: {
        TimeSchema: {
            currentDate?: string;
        };
        Echo: {
            echo: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and generateUnusedSchemas option to true 1`] = `
"export interface paths {
    "/delay": {
        "get": operations["getDelay"];
    };
    "/diagnostic": {
        "get": operations["getDiagnostic"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/{pathParam1}/{pathParam2}": {
        "get": operations["getParameters"];
    };
    "/time": {
        "get": operations["getTime"];
    };
    "/echo": {
        put: operations["putEcho"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
export interface operations {
    getDelay: {
        responses: {
            200: object;
            204: object;
        };
        parameters: {
            query: {
                duration: components["parameters"]["duration"];
            };
        };
    };
    getDiagnostic: {
        responses: {
            200: components["responses"]["Diagnostic"];
            204: components["responses"]["Diagnostic"];
        };
    };
    getOpenAPI: {
        responses: {
            200: {
                body: object;
            };
        };
    };
    getParameters: {
        responses: {
            200: {
                body: {
                    aHeader?: boolean;
                    aMultiHeader?: number[];
                    pathParam1?: number;
                    pathParam2?: string;
                    queryParam?: string[];
                };
            };
        };
        parameters: {
            path: {
                pathParam1: components["parameters"]["pathParam1"];
                pathParam2: components["parameters"]["pathParam2"];
            };
            query: {
                queryParam: components["parameters"]["queryParam"];
            };
            headers: {
                aHeader?: boolean;
                aMultiHeader?: number[];
            };
        };
    };
    getTime: {
        responses: {
            200: {
                body: components["schemas"]["TimeSchema"];
            };
        };
    };
    putEcho: {
        requestBody: components["requestBodies"]["Echo"];
        responses: {
            200: components["responses"]["Echo"];
        };
    };
    getPing: {
        requestBody: components["schemas"]["Echo"];
        responses: {
            200: {
                body: {
                    pong?: "pong";
                };
            };
        };
    };
}
export interface components {
    parameters: {
        duration: number;
        pathParam1: number;
        pathParam2: string;
        queryParam: string[];
    };
    responses: {
        Diagnostic: {
            body: {
                transactions: {
                    [pattern: string]: unknown;
                };
            };
        };
        Echo: {
            body: components["schemas"]["Echo"];
        };
    };
    requestBodies: {
        Echo: components["schemas"]["Echo"];
    };
    schemas: {
        TimeSchema: {
            currentDate?: string;
        };
        Echo: {
            echo: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json 1`] = `
"declare interface paths {
    "/delay": {
        "get": operations["getDelay"];
    };
    "/diag": {
        "get": operations["getDiagnostic"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/{pathParam1}/{pathParam2}": {
        "get": operations["getParameters"];
    };
    "/time": {
        "get": operations["getTime"];
    };
    "/echo": {
        put: operations["putEcho"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
declare interface operations {
    getDelay: {
        responses: {
            204: components["responses"]["Delay204"];
        };
        parameters: {
            query: {
                duration: components["parameters"]["durationClone"];
            };
        };
    };
    getDiagnostic: {
        responses: {
            200: components["responses"]["Diagnostic200"];
        };
    };
    getOpenAPI: {
        responses: {
            200: components["responses"]["OpenAPI200"];
        };
    };
    getParameters: {
        responses: {
            204: components["responses"]["Params204"];
        };
        parameters: {
            path: {
                pathParam1: components["parameters"]["pathParam1"];
                pathParam2: components["parameters"]["pathParam2"];
            };
            headers: {
                aHeader?: boolean;
            };
        };
    };
    getTime: {
        responses: {
            200: components["responses"]["Time200"];
        };
    };
    putEcho: {
        requestBody: components["requestBodies"]["EchoBody"];
        responses: {
            200: components["responses"]["Echo200"];
        };
    };
    getPing: {
        responses: {
            200: components["responses"]["Ping200"];
        };
    };
}
declare interface components {
    responses: {
        Delay204: object;
        Diagnostic200: {
            body: {
                transactions: {
                    [pattern: string]: unknown;
                };
            };
        };
        OpenAPI200: {
            body: object;
        };
        Params204: {
            body: {
                aHeader?: boolean;
                pathParam1?: number;
                pathParam2?: string[];
            };
            headers: {
                "x-delay-precision"?: components["headers"]["x-delay-precision"];
            };
        };
        Time200: {
            body: components["schemas"]["TimeSchema"];
        };
        Echo200: {
            body: components["schemas"]["Echo"];
        };
        Ping200: {
            body: {
                pong?: "pong";
            };
        };
    };
    parameters: {
        duration: number;
        durationClone: components["parameters"]["duration"];
        pathParam1: number;
        pathParam2: components["schemas"]["strings"];
    };
    headers: {
        "x-delay-precision": "ns" | "ms" | "s";
    };
    requestBodies: {
        EchoBody: components["schemas"]["Echo"];
    };
    schemas: {
        strings: string[];
        TimeSchema: {
            currentDate?: string;
        };
        Echo: {
            echo: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare interface paths {
    "/delay": {
        "get": operations["getDelay"];
    };
    "/diag": {
        "get": operations["getDiagnostic"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/{pathParam1}/{pathParam2}": {
        "get": operations["getParameters"];
    };
    "/time": {
        "get": operations["getTime"];
    };
    "/echo": {
        put: operations["putEcho"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
declare interface operations {
    getDelay: {
        parameters: {
            query: {
                duration: components["parameters"]["durationClone"];
            };
        };
    };
    getDiagnostic: {
        responses: {
            200: components["responses"]["Diagnostic200"];
        };
    };
    getOpenAPI: {
        responses: {
            200: components["responses"]["OpenAPI200"];
        };
    };
    getParameters: {
        parameters: {
            path: {
                pathParam1: components["parameters"]["pathParam1"];
                pathParam2: components["parameters"]["pathParam2"];
            };
            headers: {
                aHeader?: boolean;
            };
        };
    };
    getTime: {
        responses: {
            200: components["responses"]["Time200"];
        };
    };
    putEcho: {
        requestBody: components["requestBodies"]["EchoBody"];
        responses: {
            200: components["responses"]["Echo200"];
        };
    };
    getPing: {
        responses: {
            200: components["responses"]["Ping200"];
        };
    };
}
declare interface components {
    parameters: {
        duration: number;
        durationClone: components["parameters"]["duration"];
        pathParam1: number;
        pathParam2: components["schemas"]["strings"];
    };
    responses: {
        Diagnostic200: {
            body: {
                transactions: {
                    [pattern: string]: unknown;
                };
            };
        };
        OpenAPI200: {
            body: object;
        };
        Time200: {
            body: components["schemas"]["TimeSchema"];
        };
        Echo200: {
            body: components["schemas"]["Echo"];
        };
        Ping200: {
            body: {
                pong?: "pong";
            };
        };
    };
    requestBodies: {
        EchoBody: components["schemas"]["Echo"];
    };
    schemas: {
        strings: string[];
        TimeSchema: {
            currentDate?: string;
        };
        Echo: {
            echo: string;
        };
    };
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and generateUnusedSchemas option to true 1`] = `
"export interface paths {
    "/delay": {
        "get": operations["getDelay"];
    };
    "/diag": {
        "get": operations["getDiagnostic"];
    };
    "/openAPI": {
        "get": operations["getOpenAPI"];
    };
    "/{pathParam1}/{pathParam2}": {
        "get": operations["getParameters"];
    };
    "/time": {
        "get": operations["getTime"];
    };
    "/echo": {
        put: operations["putEcho"];
    };
    "/ping": {
        "get": operations["getPing"];
    };
}
export interface operations {
    getDelay: {
        responses: {
            204: components["responses"]["Delay204"];
        };
        parameters: {
            query: {
                duration: components["parameters"]["durationClone"];
            };
        };
    };
    getDiagnostic: {
        responses: {
            200: components["responses"]["Diagnostic200"];
        };
    };
    getOpenAPI: {
        responses: {
            200: components["responses"]["OpenAPI200"];
        };
    };
    getParameters: {
        responses: {
            204: components["responses"]["Params204"];
        };
        parameters: {
            path: {
                pathParam1: components["parameters"]["pathParam1"];
                pathParam2: components["parameters"]["pathParam2"];
            };
            headers: {
                aHeader?: boolean;
            };
        };
    };
    getTime: {
        responses: {
            200: components["responses"]["Time200"];
        };
    };
    putEcho: {
        requestBody: components["requestBodies"]["EchoBody"];
        responses: {
            200: components["responses"]["Echo200"];
        };
    };
    getPing: {
        responses: {
            200: components["responses"]["Ping200"];
        };
    };
}
export interface components {
    responses: {
        Delay204: object;
        Diagnostic200: {
            body: {
                transactions: {
                    [pattern: string]: unknown;
                };
            };
        };
        OpenAPI200: {
            body: object;
        };
        Params204: {
            body: {
                aHeader?: boolean;
                pathParam1?: number;
                pathParam2?: string[];
            };
            headers: {
                "x-delay-precision"?: components["headers"]["x-delay-precision"];
            };
        };
        Time200: {
            body: components["schemas"]["TimeSchema"];
        };
        Echo200: {
            body: components["schemas"]["Echo"];
        };
        Ping200: {
            body: {
                pong?: "pong";
            };
        };
    };
    parameters: {
        duration: number;
        durationClone: components["parameters"]["duration"];
        pathParam1: number;
        pathParam2: components["schemas"]["strings"];
    };
    headers: {
        "x-delay-precision": "ns" | "ms" | "s";
    };
    requestBodies: {
        EchoBody: components["schemas"]["Echo"];
    };
    schemas: {
        TimeSchema: {
            currentDate?: string;
        };
        Echo: {
            echo: string;
        };
        strings: string[];
    };
}"
`;
