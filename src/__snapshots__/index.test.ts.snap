// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with array_of_things.json 1`] = `
"declare type Main = {
    fruits?: string[];
    vegetables?: Definitions.Veggie[];
};
declare namespace Definitions {
    export type Veggie = {
        veggieName: string;
        veggieLike: boolean;
    };
}"
`;

exports[`generateJSONSchemaTypes() with JSONSchema samples should work with wierd_schema.json 1`] = `"declare type Main = {} | null;"`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json 1`] = `
"declare namespace API {
    export namespace GetAnomaly {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly anomalyId: Parameters.AnomalyId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getAnomalyResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type AnomalyId = Components.Parameters.AnomalyId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetFactory {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly factoryId: Parameters.FactoryId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getFactoryResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type FactoryId = Components.Parameters.FactoryId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetLine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly lineId: Parameters.LineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getLineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type LineId = Components.Parameters.LineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMachine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly machineId: Parameters.MachineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getMachineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type MachineId = Components.Parameters.MachineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMySelf {
        export type Output = Responses.$302;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getMySelfResponse302<302>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOrganisation {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrganisationResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPredictionDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPredictionDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSensor {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sensorId: Parameters.SensorId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSensorResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SensorId = Components.Parameters.SensorId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSource {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sourceId: Parameters.SourceId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSourceResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SourceId = Components.Parameters.SourceId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetTrainingDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getTrainingDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserResponse200<200>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutUser {
        export type Body = Components.RequestBodies.PutUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putUserResponse201<201>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostOAuth2Token {
        export type Body = Components.RequestBodies.PostOAuth2TokenRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postOAuth2TokenResponse200<200>;
            export type $400 = Components.Responses.postOAuth2TokenResponse400<400>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostPasswordChangeRequest {
        export type Body = Components.RequestBodies.PostPasswordChangeRequestRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postPasswordChangeRequestResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostUser {
        export type Body = Components.RequestBodies.PostUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.postUserResponse201<201>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutPredictionsData {
        export type Body = Components.RequestBodies.PutPredictionsDataRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putPredictionsDataResponse201<201>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOAuth2Authorize {
        export type Output = Responses.$302;
        export type Input = {
            readonly responseType: Parameters.ResponseType;
            readonly clientId: Parameters.ClientId;
            readonly redirectUri?: Parameters.RedirectUri;
            readonly scope?: Parameters.Scope;
            readonly state: Parameters.State;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getOAuth2AuthorizeResponse302<302>;
        }
        export namespace Parameters {
            export type ResponseType = Components.Parameters.ResponseType;
            export type ClientId = Components.Parameters.ClientId;
            export type RedirectUri = Components.Parameters.RedirectURI;
            export type Scope = Components.Parameters.Scope;
            export type State = Components.Parameters.State;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutUserRequestBody = Components.Schemas.UserModel;
        export type PostOAuth2TokenRequestBody = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostPasswordChangeRequestRequestBody = Components.Schemas.RequestBodiespostPasswordChangeRequestRequestBodyBody0;
        export type PostUserRequestBody = Components.Schemas.UserModel;
        export type PutPredictionsDataRequestBody = Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody0 | Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody1;
    }
    export namespace Parameters {
        export type MlProject = "dalkia";
        export type ResponseType = Enums.ResponseType;
        export type AnomalyId = Components.Schemas.UUID;
        export type FactoryId = Components.Schemas.UUID;
        export type LineId = Components.Schemas.UUID;
        export type MachineId = Components.Schemas.UUID;
        export type OrganisationId = Components.Schemas.UUID;
        export type SensorId = Components.Schemas.UUID;
        export type SourceId = Components.Schemas.UUID;
        export type UserId = Components.Schemas.UUID;
        export type ClientId = string;
        export type RedirectURI = string;
        export type Scope = string;
        export type State = string;
        export type XSdkVersion = string;
        export type XApplicationVersion = string;
    }
    export namespace Responses {
        export type getMySelfResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type postPasswordChangeRequestResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type putPredictionsDataResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getOAuth2AuthorizeResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getAnomalyResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AnomalyItem;
        };
        export type getFactoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type getLineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.LineItem;
        };
        export type getMachineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.MachineItem;
        };
        export type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        export type getOrganisationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type getPredictionDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPredictionDatasetResponse200Body0;
        };
        export type getSensorResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type getSourceResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SourceItem;
        };
        export type getTrainingDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetTrainingDatasetResponse200Body0;
        };
        export type getUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type putUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type postOAuth2TokenResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse200Body0;
        };
        export type postOAuth2TokenResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse400Body0;
        };
        export type postUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type UserModel = {
            id?: Components.Schemas.UUID;
            roles?: Components.Schemas.Role[];
            password?: string;
            organisationsIds?: Components.Schemas.UUID[];
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type RequestBodiespostPasswordChangeRequestRequestBodyBody0 = {
            email: string;
        };
        export type RequestBodiesputPredictionsDataRequestBodyBody0 = {
            [pattern: string]: unknown;
        };
        export type RequestBodiesputPredictionsDataRequestBodyBody1 = string;
        export type UUID = string;
        export type AnomalyItem = {
            item: Components.Schemas.UUID;
            anomalies: Components.Schemas.AnomalyModelHash;
        };
        export type FactoryItem = {
            item: Components.Schemas.UUID;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type LineItem = {
            item: Components.Schemas.UUID;
            lines: Components.Schemas.LineModelHash;
        };
        export type MachineItem = {
            item: Components.Schemas.UUID;
            machines: Components.Schemas.MachineModelHash;
        };
        export type ResponsesgetOpenAPIResponse200Body0 = {};
        export type OrganisationItem = {
            item: Components.Schemas.UUID;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type ResponsesgetPredictionDatasetResponse200Body0 = string;
        export type SensorItem = {
            item: Components.Schemas.UUID;
            sensors: Components.Schemas.SensorModelHash;
        };
        export type SourceItem = {
            item: Components.Schemas.UUID;
            sources: Components.Schemas.SourceModelHash;
        };
        export type ResponsesgetTrainingDatasetResponse200Body0 = string;
        export type UserItem = {
            item: Components.Schemas.UUID;
            users: Components.Schemas.UserModelHash;
        };
        export type ResponsespostOAuth2TokenResponse200Body0 = {
            access_token: string;
            token_type: Enums.TokenType;
            expires_in?: number;
            refresh_token?: string;
        };
        export type ResponsespostOAuth2TokenResponse400Body0 = {
            error: Enums.Error;
            error_description?: string;
            error_uri?: string;
        };
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
        export type Role = Enums.Role;
        export type UserData = {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type Date = string;
        export type PasswordRequestBody = {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        export type AuthorizationCodeRequestBody = {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        export type ClientCredentialsRequestBody = {
            grant_type: "client_credentials";
            scope?: string;
        };
        export type RefreshTokenRequestBody = {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        export type VerifyTokenRequestBody = {
            grant_type: "verify_token";
            verify_token: string;
        };
        export type PasswordChangeBody = {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        export type AnomalyModelHash = {
            [pattern: string]: Components.Schemas.AnomalyModel;
        };
        export type FactoryModelHash = {
            [pattern: string]: Components.Schemas.FactoryModel;
        };
        export type LineModelHash = {
            [pattern: string]: Components.Schemas.LineModel;
        };
        export type MachineModelHash = {
            [pattern: string]: Components.Schemas.MachineModel;
        };
        export type OrganisationModelHash = {
            [pattern: string]: Components.Schemas.OrganisationModel;
        };
        export type SensorModelHash = {
            [pattern: string]: Components.Schemas.SensorModel;
        };
        export type SourceModelHash = {
            [pattern: string]: Components.Schemas.SourceModel;
        };
        export type UserModelHash = {
            [pattern: string]: Components.Schemas.UserModel;
        };
        export type Locale = string;
        export type TimeZone = string;
        export type AnomalyModel = {
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            linesIds?: Components.Schemas.UUID[];
            machinesIds?: Components.Schemas.UUID[];
            sensorsIds?: Components.Schemas.UUID[];
            data: Components.Schemas.AnomalyData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
        };
        export type FactoryModel = {
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type LineModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.LineData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type MachineModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.MachineData;
            powerState: Enums.PowerState;
            operatingState: Enums.OperatingState;
            healthState: Enums.HealthState;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type OrganisationModel = {
            id?: Components.Schemas.UUID;
            factoriesIds?: Components.Schemas.UUID[];
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type SensorModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SensorData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type SourceModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SourceData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type AnomalyData = {
            assignedUser?: Components.Schemas.UUID;
            status: Enums.Status;
            archived: boolean;
            priority: Enums.Priority;
            severity: Enums.Severity;
        };
        export type FactoryData = {
            externalId?: string;
            name: string;
        };
        export type LineData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
            machinesIds?: Components.Schemas.UUID[];
            machinesTree?: {};
            machineId: unknown;
            settings: unknown;
        };
        export type MachineData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
        };
        export type OrganisationData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type SensorData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
            machineId: Components.Schemas.UUID;
            settings: {
                type?: "opc-ua";
                uri?: string;
            };
        };
        export type SourceData = {
            name: string;
            externalId?: string;
            settings: {
                type?: "opc-ua";
                uri?: string;
            };
        };
    }
}
declare namespace Enums {
    export enum ResponseType {
        Code = "code",
        Token = "token"
    }
    export enum TokenType {
        Bearer = "bearer",
        Mac = "mac",
        Unknown = "\\uD83D\\uDC95-\\u2705"
    }
    export enum Error {
        InvalidRequest = "invalid_request",
        InvalidClient = "invalid_client",
        InvalidGrant = "invalid_grant",
        UnauthorizedClient = "unauthorized_client",
        UnsupportedGrantType = "unsupported_grant_type",
        InvalidScope = "invalid_scope"
    }
    export enum Role {
        Admin = "admin",
        User = "user",
        Candidate = "candidate"
    }
    export enum PowerState {
        Unknown = "unknown",
        On = "on",
        Off = "off"
    }
    export enum OperatingState {
        Unknown = "unknown",
        Normal = "normal",
        Stopped = "stopped",
        Idle = "idle"
    }
    export enum HealthState {
        Unknown = "unknown",
        Good = "good",
        Faulty = "faulty",
        Erroring = "erroring"
    }
    export enum Status {
        Open = "open",
        Discarded = "discarded",
        Assigned = "assigned",
        Fixed = "fixed",
        Closed = "closed"
    }
    export enum Priority {
        NotSet = "not_set",
        Urgent = "urgent",
        Important = "important",
        Secondary = "secondary"
    }
    export enum Severity {
        NotSet = "not_set",
        Critical = "critical",
        Major = "major",
        Moderate = "moderate",
        Minor = "minor",
        Cosmetic = "cosmetic"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace GetAnomaly {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly anomalyId: Parameters.AnomalyId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getAnomalyResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type AnomalyId = Components.Parameters.AnomalyId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetFactory {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly factoryId: Parameters.FactoryId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getFactoryResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type FactoryId = Components.Parameters.FactoryId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetLine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly lineId: Parameters.LineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getLineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type LineId = Components.Parameters.LineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMachine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly machineId: Parameters.MachineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getMachineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type MachineId = Components.Parameters.MachineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMySelf {
        export type Output = unknown;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOrganisation {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrganisationResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPredictionDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPredictionDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSensor {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sensorId: Parameters.SensorId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSensorResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SensorId = Components.Parameters.SensorId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSource {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sourceId: Parameters.SourceId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSourceResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SourceId = Components.Parameters.SourceId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetTrainingDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getTrainingDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserResponse200<200>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutUser {
        export type Body = Components.RequestBodies.PutUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putUserResponse201<201>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostOAuth2Token {
        export type Body = Components.RequestBodies.PostOAuth2TokenRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postOAuth2TokenResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostPasswordChangeRequest {
        export type Body = Components.RequestBodies.PostPasswordChangeRequestRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postPasswordChangeRequestResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostUser {
        export type Body = Components.RequestBodies.PostUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.postUserResponse201<201>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutPredictionsData {
        export type Body = Components.RequestBodies.PutPredictionsDataRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putPredictionsDataResponse201<201>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOAuth2Authorize {
        export type Output = unknown;
        export type Input = {
            readonly responseType: Parameters.ResponseType;
            readonly clientId: Parameters.ClientId;
            readonly redirectUri?: Parameters.RedirectUri;
            readonly scope?: Parameters.Scope;
            readonly state: Parameters.State;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Parameters {
            export type ResponseType = Components.Parameters.ResponseType;
            export type ClientId = Components.Parameters.ClientId;
            export type RedirectUri = Components.Parameters.RedirectURI;
            export type Scope = Components.Parameters.Scope;
            export type State = Components.Parameters.State;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutUserRequestBody = Components.Schemas.UserModel;
        export type PostOAuth2TokenRequestBody = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostPasswordChangeRequestRequestBody = Components.Schemas.RequestBodiespostPasswordChangeRequestRequestBodyBody0;
        export type PostUserRequestBody = Components.Schemas.UserModel;
        export type PutPredictionsDataRequestBody = Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody0 | Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody1;
    }
    export namespace Parameters {
        export type MlProject = "dalkia";
        export type ResponseType = "code" | "token";
        export type AnomalyId = Components.Schemas.UUID;
        export type FactoryId = Components.Schemas.UUID;
        export type LineId = Components.Schemas.UUID;
        export type MachineId = Components.Schemas.UUID;
        export type OrganisationId = Components.Schemas.UUID;
        export type SensorId = Components.Schemas.UUID;
        export type SourceId = Components.Schemas.UUID;
        export type UserId = Components.Schemas.UUID;
        export type ClientId = string;
        export type RedirectURI = string;
        export type Scope = string;
        export type State = string;
        export type XSdkVersion = string;
        export type XApplicationVersion = string;
    }
    export namespace Responses {
        export type postPasswordChangeRequestResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type putPredictionsDataResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getAnomalyResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AnomalyItem;
        };
        export type getFactoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type getLineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.LineItem;
        };
        export type getMachineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.MachineItem;
        };
        export type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        export type getOrganisationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type getPredictionDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPredictionDatasetResponse200Body0;
        };
        export type getSensorResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type getSourceResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SourceItem;
        };
        export type getTrainingDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetTrainingDatasetResponse200Body0;
        };
        export type getUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type putUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type postOAuth2TokenResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse200Body0;
        };
        export type postUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type UserModel = {
            id?: Components.Schemas.UUID;
            roles?: Components.Schemas.Role[];
            password?: string;
            organisationsIds?: Components.Schemas.UUID[];
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type RequestBodiespostPasswordChangeRequestRequestBodyBody0 = {
            email: string;
        };
        export type RequestBodiesputPredictionsDataRequestBodyBody0 = {
            [pattern: string]: unknown;
        };
        export type RequestBodiesputPredictionsDataRequestBodyBody1 = string;
        export type UUID = string & {
            _type?: "UUID";
        };
        export type AnomalyItem = {
            item: Components.Schemas.UUID;
            anomalies: Components.Schemas.AnomalyModelHash;
        };
        export type FactoryItem = {
            item: Components.Schemas.UUID;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type LineItem = {
            item: Components.Schemas.UUID;
            lines: Components.Schemas.LineModelHash;
        };
        export type MachineItem = {
            item: Components.Schemas.UUID;
            machines: Components.Schemas.MachineModelHash;
        };
        export type ResponsesgetOpenAPIResponse200Body0 = {};
        export type OrganisationItem = {
            item: Components.Schemas.UUID;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type ResponsesgetPredictionDatasetResponse200Body0 = string;
        export type SensorItem = {
            item: Components.Schemas.UUID;
            sensors: Components.Schemas.SensorModelHash;
        };
        export type SourceItem = {
            item: Components.Schemas.UUID;
            sources: Components.Schemas.SourceModelHash;
        };
        export type ResponsesgetTrainingDatasetResponse200Body0 = string;
        export type UserItem = {
            item: Components.Schemas.UUID;
            users: Components.Schemas.UserModelHash;
        };
        export type ResponsespostOAuth2TokenResponse200Body0 = {
            access_token: string;
            token_type: "bearer" | "mac" | "\\uD83D\\uDC95-\\u2705";
            expires_in?: number;
            refresh_token?: string;
        };
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
        export type Role = ("admin" | "user" | "candidate") & {
            _type?: "Role";
        };
        export type UserData = {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type Date = string & {
            _type?: "Date";
        };
        export type PasswordRequestBody = {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        export type AuthorizationCodeRequestBody = {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        export type ClientCredentialsRequestBody = {
            grant_type: "client_credentials";
            scope?: string;
        };
        export type RefreshTokenRequestBody = {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        export type VerifyTokenRequestBody = {
            grant_type: "verify_token";
            verify_token: string;
        };
        export type PasswordChangeBody = {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        export type AnomalyModelHash = {
            [pattern: string]: Components.Schemas.AnomalyModel;
        };
        export type FactoryModelHash = {
            [pattern: string]: Components.Schemas.FactoryModel;
        };
        export type LineModelHash = {
            [pattern: string]: Components.Schemas.LineModel;
        };
        export type MachineModelHash = {
            [pattern: string]: Components.Schemas.MachineModel;
        };
        export type OrganisationModelHash = {
            [pattern: string]: Components.Schemas.OrganisationModel;
        };
        export type SensorModelHash = {
            [pattern: string]: Components.Schemas.SensorModel;
        };
        export type SourceModelHash = {
            [pattern: string]: Components.Schemas.SourceModel;
        };
        export type UserModelHash = {
            [pattern: string]: Components.Schemas.UserModel;
        };
        export type Locale = string & {
            _type?: "Locale";
        };
        export type TimeZone = string & {
            _type?: "TimeZone";
        };
        export type AnomalyModel = {
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            linesIds?: Components.Schemas.UUID[];
            machinesIds?: Components.Schemas.UUID[];
            sensorsIds?: Components.Schemas.UUID[];
            data: Components.Schemas.AnomalyData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
        };
        export type FactoryModel = {
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type LineModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.LineData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type MachineModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.MachineData;
            powerState: "unknown" | "on" | "off";
            operatingState: "unknown" | "normal" | "stopped" | "idle";
            healthState: "unknown" | "good" | "faulty" | "erroring";
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type OrganisationModel = {
            id?: Components.Schemas.UUID;
            factoriesIds?: Components.Schemas.UUID[];
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type SensorModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SensorData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type SourceModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SourceData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type AnomalyData = {
            assignedUser?: Components.Schemas.UUID;
            status: "open" | "discarded" | "assigned" | "fixed" | "closed";
            archived: boolean;
            priority: "not_set" | "urgent" | "important" | "secondary";
            severity: "not_set" | "critical" | "major" | "moderate" | "minor" | "cosmetic";
        };
        export type FactoryData = {
            externalId?: string;
            name: string;
        };
        export type LineData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
            machinesIds?: Components.Schemas.UUID[];
            machinesTree?: {};
            machineId: unknown;
            settings: unknown;
        };
        export type MachineData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
        };
        export type OrganisationData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type SensorData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
            machineId: Components.Schemas.UUID;
            settings: {
                type?: "opc-ua";
                uri?: string;
            };
        };
        export type SourceData = {
            name: string;
            externalId?: string;
            settings: {
                type?: "opc-ua";
                uri?: string;
            };
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with diagrams.json and generateUnusedSchemas option to true 1`] = `
"export namespace AnotherAPI {
    export namespace GetAnomaly {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly anomalyId: Parameters.AnomalyId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getAnomalyResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type AnomalyId = Components.Parameters.AnomalyId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetFactory {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly factoryId: Parameters.FactoryId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getFactoryResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type FactoryId = Components.Parameters.FactoryId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetLine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly lineId: Parameters.LineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getLineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type LineId = Components.Parameters.LineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMachine {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly machineId: Parameters.MachineId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getMachineResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type MachineId = Components.Parameters.MachineId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetMySelf {
        export type Output = Responses.$302;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getMySelfResponse302<302>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOrganisation {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrganisationResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPredictionDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPredictionDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSensor {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sensorId: Parameters.SensorId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSensorResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SensorId = Components.Parameters.SensorId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetSource {
        export type Output = Responses.$200;
        export type Input = {
            readonly organisationId: Parameters.OrganisationId;
            readonly sourceId: Parameters.SourceId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getSourceResponse200<200>;
        }
        export namespace Parameters {
            export type OrganisationId = Components.Parameters.OrganisationId;
            export type SourceId = Components.Parameters.SourceId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetTrainingDataset {
        export type Output = Responses.$200;
        export type Input = {
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getTrainingDatasetResponse200<200>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserResponse200<200>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutUser {
        export type Body = Components.RequestBodies.PutUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly userId: Parameters.UserId;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putUserResponse201<201>;
        }
        export namespace Parameters {
            export type UserId = Components.Parameters.UserId;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostOAuth2Token {
        export type Body = Components.RequestBodies.PostOAuth2TokenRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postOAuth2TokenResponse200<200>;
            export type $400 = Components.Responses.postOAuth2TokenResponse400<400>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostPasswordChangeRequest {
        export type Body = Components.RequestBodies.PostPasswordChangeRequestRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.postPasswordChangeRequestResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PostUser {
        export type Body = Components.RequestBodies.PostUserRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.postUserResponse201<201>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace PutPredictionsData {
        export type Body = Components.RequestBodies.PutPredictionsDataRequestBody;
        export type Output = Responses.$201;
        export type Input = {
            readonly body: Body;
            readonly mlProject: Parameters.MlProject;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $201 = Components.Responses.putPredictionsDataResponse201<201>;
        }
        export namespace Parameters {
            export type MlProject = Components.Parameters.MlProject;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetOAuth2Authorize {
        export type Output = Responses.$302;
        export type Input = {
            readonly responseType: Parameters.ResponseType;
            readonly clientId: Parameters.ClientId;
            readonly redirectUri?: Parameters.RedirectUri;
            readonly scope?: Parameters.Scope;
            readonly state: Parameters.State;
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $302 = Components.Responses.getOAuth2AuthorizeResponse302<302>;
        }
        export namespace Parameters {
            export type ResponseType = Components.Parameters.ResponseType;
            export type ClientId = Components.Parameters.ClientId;
            export type RedirectUri = Components.Parameters.RedirectURI;
            export type Scope = Components.Parameters.Scope;
            export type State = Components.Parameters.State;
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {
            readonly xSdkVersion?: Parameters.XSDKVersion;
            readonly xApplicationVersion?: Parameters.XApplicationVersion;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
        export namespace Parameters {
            export type XSDKVersion = Components.Parameters.XSdkVersion;
            export type XApplicationVersion = Components.Parameters.XApplicationVersion;
        }
    }
}
export namespace Components {
    export namespace RequestBodies {
        export type PutUserRequestBody = Components.Schemas.UserModel;
        export type PostOAuth2TokenRequestBody = Components.Schemas.TokenRequestBody | Components.Schemas.TokenRequestBody;
        export type PostPasswordChangeRequestRequestBody = Components.Schemas.RequestBodiespostPasswordChangeRequestRequestBodyBody0;
        export type PostUserRequestBody = Components.Schemas.UserModel;
        export type PutPredictionsDataRequestBody = Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody0 | Components.Schemas.RequestBodiesputPredictionsDataRequestBodyBody1;
    }
    export namespace Parameters {
        export type MlProject = "dalkia";
        export type ResponseType = Enums.ResponseType;
        export type AnomalyId = Components.Schemas.UUID;
        export type FactoryId = Components.Schemas.UUID;
        export type LineId = Components.Schemas.UUID;
        export type MachineId = Components.Schemas.UUID;
        export type OrganisationId = Components.Schemas.UUID;
        export type SensorId = Components.Schemas.UUID;
        export type SourceId = Components.Schemas.UUID;
        export type UserId = Components.Schemas.UUID;
        export type ClientId = string;
        export type RedirectURI = string;
        export type Scope = string;
        export type State = string;
        export type XSdkVersion = string;
        export type XApplicationVersion = string;
    }
    export namespace Responses {
        export type getMySelfResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type postPasswordChangeRequestResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type putPredictionsDataResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getOAuth2AuthorizeResponse302<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getAnomalyResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.AnomalyItem;
        };
        export type getFactoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.FactoryItem;
        };
        export type getLineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.LineItem;
        };
        export type getMachineResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.MachineItem;
        };
        export type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        export type getOrganisationResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.OrganisationItem;
        };
        export type getPredictionDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPredictionDatasetResponse200Body0;
        };
        export type getSensorResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SensorItem;
        };
        export type getSourceResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.SourceItem;
        };
        export type getTrainingDatasetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetTrainingDatasetResponse200Body0;
        };
        export type getUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type putUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type postOAuth2TokenResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse200Body0;
        };
        export type postOAuth2TokenResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsespostOAuth2TokenResponse400Body0;
        };
        export type postUserResponse201<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.UserItem;
        };
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type AnomalyData = {
            assignedUser?: Components.Schemas.UUID;
            status: Enums.Status;
            archived: boolean;
            priority: Enums.Priority;
            severity: Enums.Severity;
        };
        export type AnomalyModel = {
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            linesIds?: Components.Schemas.UUID[];
            machinesIds?: Components.Schemas.UUID[];
            sensorsIds?: Components.Schemas.UUID[];
            data: Components.Schemas.AnomalyData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
            archivedAt?: Components.Schemas.Date;
        };
        export type AnomalyModelHash = {
            [pattern: string]: Components.Schemas.AnomalyModel;
        };
        export type AnomalyItem = {
            item: Components.Schemas.UUID;
            anomalies: Components.Schemas.AnomalyModelHash;
        };
        export type AnomaliesItems = {
            items: Components.Schemas.UUID[];
            anomalies: Components.Schemas.AnomalyModelHash;
        };
        export type FactoryData = {
            externalId?: string;
            name: string;
        };
        export type FactoryModel = {
            id?: Components.Schemas.UUID;
            organisationId?: Components.Schemas.UUID;
            data: Components.Schemas.FactoryData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type FactoryModelHash = {
            [pattern: string]: Components.Schemas.FactoryModel;
        };
        export type FactoryItem = {
            item: Components.Schemas.UUID;
            factories: Components.Schemas.FactoryModelHash;
        };
        export type FactoriesItems = {
            items: Components.Schemas.UUID[];
            factories: Components.Schemas.FactoryModelHash;
        };
        export type LineData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
            machinesIds?: Components.Schemas.UUID[];
            machinesTree?: {};
            machineId: unknown;
            settings: unknown;
        };
        export type LineModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.LineData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type LineModelHash = {
            [pattern: string]: Components.Schemas.LineModel;
        };
        export type LineItem = {
            item: Components.Schemas.UUID;
            lines: Components.Schemas.LineModelHash;
        };
        export type LinesItems = {
            items: Components.Schemas.UUID[];
            lines: Components.Schemas.LineModelHash;
        };
        export type MachineData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
        };
        export type MachineModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.MachineData;
            powerState: Enums.PowerState;
            operatingState: Enums.OperatingState;
            healthState: Enums.HealthState;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type MachineModelHash = {
            [pattern: string]: Components.Schemas.MachineModel;
        };
        export type MachineItem = {
            item: Components.Schemas.UUID;
            machines: Components.Schemas.MachineModelHash;
        };
        export type MachinesItems = {
            items: Components.Schemas.UUID[];
            machines: Components.Schemas.MachineModelHash;
        };
        export type OrganisationData = {
            name: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type OrganisationModel = {
            id?: Components.Schemas.UUID;
            factoriesIds?: Components.Schemas.UUID[];
            data: Components.Schemas.OrganisationData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type OrganisationModelHash = {
            [pattern: string]: Components.Schemas.OrganisationModel;
        };
        export type OrganisationItem = {
            item: Components.Schemas.UUID;
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type OrganisationsItems = {
            items: Components.Schemas.UUID[];
            organisations: Components.Schemas.OrganisationModelHash;
        };
        export type SensorData = {
            name: string;
            externalId?: string;
            factoryId: Components.Schemas.UUID;
            machineId: Components.Schemas.UUID;
            settings: {
                type?: "opc-ua";
                uri?: string;
            };
        };
        export type SensorModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SensorData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type SensorModelHash = {
            [pattern: string]: Components.Schemas.SensorModel;
        };
        export type SensorItem = {
            item: Components.Schemas.UUID;
            sensors: Components.Schemas.SensorModelHash;
        };
        export type SensorsItems = {
            items: Components.Schemas.UUID[];
            sensors: Components.Schemas.SensorModelHash;
        };
        export type SourceData = {
            name: string;
            externalId?: string;
            settings: {
                type?: "opc-ua";
                uri?: string;
            };
        };
        export type SourceModel = {
            id?: Components.Schemas.UUID;
            data: Components.Schemas.SourceData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type SourceModelHash = {
            [pattern: string]: Components.Schemas.SourceModel;
        };
        export type SourceItem = {
            item: Components.Schemas.UUID;
            sources: Components.Schemas.SourceModelHash;
        };
        export type SourcesItems = {
            items: Components.Schemas.UUID[];
            sources: Components.Schemas.SourceModelHash;
        };
        export type Locale = string;
        export type TimeZone = string;
        export type UUID = string;
        export type Date = string;
        export type Role = Enums.Role;
        export type UserData = {
            email: string;
            name: string;
            givenName?: string;
            familyName?: string;
            phone?: string;
            birthDay?: string;
            locale: Components.Schemas.Locale;
            timeZone: Components.Schemas.TimeZone;
        };
        export type UserModel = {
            id?: Components.Schemas.UUID;
            roles?: Components.Schemas.Role[];
            password?: string;
            organisationsIds?: Components.Schemas.UUID[];
            data: Components.Schemas.UserData;
            creation?: Components.Schemas.Date;
            lastModification?: Components.Schemas.Date;
        };
        export type UserModelHash = {
            [pattern: string]: Components.Schemas.UserModel;
        };
        export type UserItem = {
            item: Components.Schemas.UUID;
            users: Components.Schemas.UserModelHash;
        };
        export type UsersItems = {
            items: Components.Schemas.UUID[];
            users: Components.Schemas.UserModelHash;
        };
        export type AuthorizationCodeRequestBody = {
            grant_type: "authorization_code";
            code?: string;
            client_id?: string;
            redirect_uri?: string;
        };
        export type PasswordRequestBody = {
            grant_type: "password";
            username: string;
            password: string;
            scope?: string;
        };
        export type ClientCredentialsRequestBody = {
            grant_type: "client_credentials";
            scope?: string;
        };
        export type RefreshTokenRequestBody = {
            grant_type: "refresh_token";
            refresh_token: string;
            scope?: string;
        };
        export type VerifyTokenRequestBody = {
            grant_type: "verify_token";
            verify_token: string;
        };
        export type PasswordChangeBody = {
            grant_type: "password_change";
            token: string;
            new_password: string;
        };
        export type TokenRequestBody = Components.Schemas.PasswordRequestBody | Components.Schemas.AuthorizationCodeRequestBody | Components.Schemas.ClientCredentialsRequestBody | Components.Schemas.RefreshTokenRequestBody | Components.Schemas.VerifyTokenRequestBody | Components.Schemas.PasswordChangeBody;
        export type UnusedSchema = {
            foo: string;
            bar?: string;
        };
        export type RequestBodiespostPasswordChangeRequestRequestBodyBody0 = {
            email: string;
        };
        export type RequestBodiesputPredictionsDataRequestBodyBody0 = {
            [pattern: string]: unknown;
        };
        export type RequestBodiesputPredictionsDataRequestBodyBody1 = string;
        export type ResponsesgetOpenAPIResponse200Body0 = {};
        export type ResponsesgetPredictionDatasetResponse200Body0 = string;
        export type ResponsesgetTrainingDatasetResponse200Body0 = string;
        export type ResponsespostOAuth2TokenResponse200Body0 = {
            access_token: string;
            token_type: Enums.TokenType;
            expires_in?: number;
            refresh_token?: string;
        };
        export type ResponsespostOAuth2TokenResponse400Body0 = {
            error: Enums.Error;
            error_description?: string;
            error_uri?: string;
        };
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
    }
}
export namespace Enums {
    export enum ResponseType {
        Code = "code",
        Token = "token"
    }
    export enum Status {
        Open = "open",
        Discarded = "discarded",
        Assigned = "assigned",
        Fixed = "fixed",
        Closed = "closed"
    }
    export enum Priority {
        NotSet = "not_set",
        Urgent = "urgent",
        Important = "important",
        Secondary = "secondary"
    }
    export enum Severity {
        NotSet = "not_set",
        Critical = "critical",
        Major = "major",
        Moderate = "moderate",
        Minor = "minor",
        Cosmetic = "cosmetic"
    }
    export enum PowerState {
        Unknown = "unknown",
        On = "on",
        Off = "off"
    }
    export enum OperatingState {
        Unknown = "unknown",
        Normal = "normal",
        Stopped = "stopped",
        Idle = "idle"
    }
    export enum HealthState {
        Unknown = "unknown",
        Good = "good",
        Faulty = "faulty",
        Erroring = "erroring"
    }
    export enum Role {
        Admin = "admin",
        User = "user",
        Candidate = "candidate"
    }
    export enum TokenType {
        Bearer = "bearer",
        Mac = "mac",
        Unknown = "\\uD83D\\uDC95-\\u2705"
    }
    export enum Error {
        InvalidRequest = "invalid_request",
        InvalidClient = "invalid_client",
        InvalidGrant = "invalid_grant",
        UnauthorizedClient = "unauthorized_client",
        UnsupportedGrantType = "unsupported_grant_type",
        InvalidScope = "invalid_scope"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json 1`] = `
"declare namespace API {
    export namespace UpdatePet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$400 | Responses.$404 | Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updatePetResponse400<400>;
            export type $404 = Components.Responses.updatePetResponse404<404>;
            export type $405 = Components.Responses.updatePetResponse405<405>;
        }
    }
    export namespace AddPet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $405 = Components.Responses.addPetResponse405<405>;
        }
    }
    export namespace FindPetsByStatus {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly status: Parameters.Status;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByStatusResponse200<200>;
            export type $400 = Components.Responses.findPetsByStatusResponse400<400>;
        }
        export namespace Parameters {
            export type Status = Components.Parameters.FindPetsByStatus0;
        }
    }
    export namespace FindPetsByTags {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly tags: Parameters.Tags;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByTagsResponse200<200>;
            export type $400 = Components.Responses.findPetsByTagsResponse400<400>;
        }
        export namespace Parameters {
            export type Tags = Components.Parameters.FindPetsByTags0;
        }
    }
    export namespace GetPetById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPetByIdResponse200<200>;
            export type $400 = Components.Responses.getPetByIdResponse400<400>;
            export type $404 = Components.Responses.getPetByIdResponse404<404>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.GetPetById0;
        }
    }
    export namespace UpdatePetWithForm {
        export type Body = Components.RequestBodies.UpdatePetWithFormRequestBody;
        export type Output = Responses.$405;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $405 = Components.Responses.updatePetWithFormResponse405<405>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UpdatePetWithForm0;
        }
    }
    export namespace DeletePet {
        export type Output = Responses.$400;
        export type Input = {
            readonly apiKey?: Parameters.ApiKey;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deletePetResponse400<400>;
        }
        export namespace Parameters {
            export type ApiKey = Components.Parameters.DeletePet0;
            export type PetId = Components.Parameters.DeletePet1;
        }
    }
    export namespace UploadFile {
        export type Body = Components.RequestBodies.UploadFileRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.uploadFileResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UploadFile0;
        }
    }
    export namespace GetInventory {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getInventoryResponse200<200>;
        }
    }
    export namespace PlaceOrder {
        export type Body = Components.RequestBodies.PlaceOrderRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.placeOrderResponse200<200>;
            export type $400 = Components.Responses.placeOrderResponse400<400>;
        }
    }
    export namespace GetOrderById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrderByIdResponse200<200>;
            export type $400 = Components.Responses.getOrderByIdResponse400<400>;
            export type $404 = Components.Responses.getOrderByIdResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.GetOrderById0;
        }
    }
    export namespace DeleteOrder {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteOrderResponse400<400>;
            export type $404 = Components.Responses.deleteOrderResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.DeleteOrder0;
        }
    }
    export namespace CreateUser {
        export type Body = Components.RequestBodies.CreateUserRequestBody;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUserResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithArrayInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithArrayInputResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithListInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithListInputResponsedefault<number>;
        }
    }
    export namespace LoginUser {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly username: Parameters.Username;
            readonly password: Parameters.Password;
        };
        export namespace Responses {
            export type $200 = Components.Responses.loginUserResponse200<200>;
            export type $400 = Components.Responses.loginUserResponse400<400>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.LoginUser0;
            export type Password = Components.Parameters.LoginUser1;
        }
    }
    export namespace LogoutUser {
        export type Output = Responses.$default;
        export type Input = {};
        export namespace Responses {
            export type $default = Components.Responses.logoutUserResponsedefault<number>;
        }
    }
    export namespace GetUserByName {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserByNameResponse200<200>;
            export type $400 = Components.Responses.getUserByNameResponse400<400>;
            export type $404 = Components.Responses.getUserByNameResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.GetUserByName0;
        }
    }
    export namespace UpdateUser {
        export type Body = Components.RequestBodies.UpdateUserRequestBody;
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly body: Body;
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updateUserResponse400<400>;
            export type $404 = Components.Responses.updateUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.UpdateUser0;
        }
    }
    export namespace DeleteUser {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteUserResponse400<400>;
            export type $404 = Components.Responses.deleteUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.DeleteUser0;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithFormRequestBody = Components.Schemas.Body;
        export type UploadFileRequestBody = Components.Schemas.Body1;
        export type PlaceOrderRequestBody = Components.Schemas.Order;
        export type CreateUserRequestBody = Components.Schemas.User;
        export type UpdateUserRequestBody = Components.Schemas.User;
    }
    export namespace Parameters {
        export type GetPetById0 = number;
        export type UpdatePetWithForm0 = number;
        export type DeletePet0 = string;
        export type DeletePet1 = number;
        export type UploadFile0 = number;
        export type GetOrderById0 = number;
        export type DeleteOrder0 = string;
        export type LoginUser0 = string;
        export type LoginUser1 = string;
        export type GetUserByName0 = string;
        export type UpdateUser0 = string;
        export type DeleteUser0 = string;
        export type FindPetsByStatus0 = ("available" | "pending" | "sold")[];
        export type FindPetsByTags0 = string[];
    }
    export namespace Responses {
        export type updatePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updatePetResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updatePetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type addPetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type findPetsByStatusResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type findPetsByTagsResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getPetByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getPetByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updatePetWithFormResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deletePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type placeOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getOrderByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getOrderByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteOrderResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type createUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type createUsersWithArrayInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type createUsersWithListInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type loginUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type logoutUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getUserByNameResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getUserByNameResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updateUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updateUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type findPetsByStatusResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatusResponse200Body0 | Components.Schemas.ResponsesfindPetsByStatusResponse200Body1;
        };
        export type findPetsByTagsResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTagsResponse200Body0 | Components.Schemas.ResponsesfindPetsByTagsResponse200Body1;
        };
        export type getPetByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        export type uploadFileResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        export type getInventoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventoryResponse200Body0;
        };
        export type placeOrderResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type getOrderByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type getUserByNameResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        export type loginUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly "x-rate-limit": Components.Headers.LoginUserResponse200HeadersXRateLimit;
                readonly "x-expires-after"?: Components.Headers.LoginUserResponse200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUserResponse200Body0 | Components.Schemas.ResponsesloginUserResponse200Body1;
        };
    }
    export namespace Headers {
        export type LoginUserResponse200HeadersXRateLimit = number;
        export type LoginUserResponse200HeadersXExpiresAfter = string;
    }
    export namespace Schemas {
        export type RequestBodiesUserArrayBody0 = Components.Schemas.User[];
        export type Pet = {
            id?: number;
            category?: Components.Schemas.Category;
            name: string;
            photoUrls: string[];
            tags?: Components.Schemas.Tag[];
            status?: Enums.PetStatusInTheStore;
        };
        export type Body = {
            name?: string;
            status?: string;
        };
        export type Body1 = {
            additionalMetadata?: string;
            file?: string;
        };
        export type Order = {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: Enums.OrderStatus;
            complete?: boolean;
        };
        export type User = {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        export type ResponsesfindPetsByStatusResponse200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByStatusResponse200Body1 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTagsResponse200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTagsResponse200Body1 = Components.Schemas.Pet[];
        export type ApiResponse = {
            code?: number;
            type?: string;
            message?: string;
        };
        export type ResponsesgetInventoryResponse200Body0 = {
            [pattern: string]: unknown;
        };
        export type ResponsesloginUserResponse200Body0 = string;
        export type ResponsesloginUserResponse200Body1 = string;
        export type Category = {
            id?: number;
            name?: string;
        };
        export type Tag = {
            id?: number;
            name?: string;
        };
    }
}
declare namespace Enums {
    export enum PetStatusInTheStore {
        Available = "available",
        Pending = "pending",
        Sold = "sold"
    }
    export enum OrderStatus {
        Placed = "placed",
        Approved = "approved",
        Delivered = "delivered"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace UpdatePet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace AddPet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace FindPetsByStatus {
        export type Output = Responses.$200;
        export type Input = {
            readonly status: Parameters.Status;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByStatusResponse200<200>;
        }
        export namespace Parameters {
            export type Status = Components.Parameters.FindPetsByStatus0;
        }
    }
    export namespace FindPetsByTags {
        export type Output = Responses.$200;
        export type Input = {
            readonly tags: Parameters.Tags;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByTagsResponse200<200>;
        }
        export namespace Parameters {
            export type Tags = Components.Parameters.FindPetsByTags0;
        }
    }
    export namespace GetPetById {
        export type Output = Responses.$200;
        export type Input = {
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPetByIdResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.GetPetById0;
        }
    }
    export namespace UpdatePetWithForm {
        export type Body = Components.RequestBodies.UpdatePetWithFormRequestBody;
        export type Output = unknown;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Parameters {
            export type PetId = Components.Parameters.UpdatePetWithForm0;
        }
    }
    export namespace DeletePet {
        export type Output = unknown;
        export type Input = {
            readonly apiKey?: Parameters.ApiKey;
            readonly petId: Parameters.PetId;
        };
        export namespace Parameters {
            export type ApiKey = Components.Parameters.DeletePet0;
            export type PetId = Components.Parameters.DeletePet1;
        }
    }
    export namespace UploadFile {
        export type Body = Components.RequestBodies.UploadFileRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.uploadFileResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UploadFile0;
        }
    }
    export namespace GetInventory {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getInventoryResponse200<200>;
        }
    }
    export namespace PlaceOrder {
        export type Body = Components.RequestBodies.PlaceOrderRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.placeOrderResponse200<200>;
        }
    }
    export namespace GetOrderById {
        export type Output = Responses.$200;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrderByIdResponse200<200>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.GetOrderById0;
        }
    }
    export namespace DeleteOrder {
        export type Output = unknown;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Parameters {
            export type OrderId = Components.Parameters.DeleteOrder0;
        }
    }
    export namespace CreateUser {
        export type Body = Components.RequestBodies.CreateUserRequestBody;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace CreateUsersWithArrayInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace CreateUsersWithListInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
        };
    }
    export namespace LoginUser {
        export type Output = Responses.$200;
        export type Input = {
            readonly username: Parameters.Username;
            readonly password: Parameters.Password;
        };
        export namespace Responses {
            export type $200 = Components.Responses.loginUserResponse200<200>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.LoginUser0;
            export type Password = Components.Parameters.LoginUser1;
        }
    }
    export namespace LogoutUser {
        export type Output = unknown;
        export type Input = {};
    }
    export namespace GetUserByName {
        export type Output = Responses.$200;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserByNameResponse200<200>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.GetUserByName0;
        }
    }
    export namespace UpdateUser {
        export type Body = Components.RequestBodies.UpdateUserRequestBody;
        export type Output = unknown;
        export type Input = {
            readonly body: Body;
            readonly username: Parameters.Username;
        };
        export namespace Parameters {
            export type Username = Components.Parameters.UpdateUser0;
        }
    }
    export namespace DeleteUser {
        export type Output = unknown;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Parameters {
            export type Username = Components.Parameters.DeleteUser0;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithFormRequestBody = Components.Schemas.Body;
        export type UploadFileRequestBody = Components.Schemas.Body1;
        export type PlaceOrderRequestBody = Components.Schemas.Order;
        export type CreateUserRequestBody = Components.Schemas.User;
        export type UpdateUserRequestBody = Components.Schemas.User;
    }
    export namespace Parameters {
        export type GetPetById0 = number;
        export type UpdatePetWithForm0 = number;
        export type DeletePet0 = string;
        export type DeletePet1 = number;
        export type UploadFile0 = number;
        export type GetOrderById0 = number;
        export type DeleteOrder0 = string;
        export type LoginUser0 = string;
        export type LoginUser1 = string;
        export type GetUserByName0 = string;
        export type UpdateUser0 = string;
        export type DeleteUser0 = string;
        export type FindPetsByStatus0 = ("available" | "pending" | "sold")[];
        export type FindPetsByTags0 = string[];
    }
    export namespace Responses {
        export type findPetsByStatusResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatusResponse200Body0 | Components.Schemas.ResponsesfindPetsByStatusResponse200Body1;
        };
        export type findPetsByTagsResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTagsResponse200Body0 | Components.Schemas.ResponsesfindPetsByTagsResponse200Body1;
        };
        export type getPetByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        export type uploadFileResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        export type getInventoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventoryResponse200Body0;
        };
        export type placeOrderResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type getOrderByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type getUserByNameResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        export type loginUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly "x-rate-limit": Components.Headers.LoginUserResponse200HeadersXRateLimit;
                readonly "x-expires-after"?: Components.Headers.LoginUserResponse200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUserResponse200Body0 | Components.Schemas.ResponsesloginUserResponse200Body1;
        };
    }
    export namespace Headers {
        export type LoginUserResponse200HeadersXRateLimit = number;
        export type LoginUserResponse200HeadersXExpiresAfter = string;
    }
    export namespace Schemas {
        export type RequestBodiesUserArrayBody0 = Components.Schemas.User[];
        export type Pet = {
            id?: number;
            category?: Components.Schemas.Category;
            name: string;
            photoUrls: string[];
            tags?: Components.Schemas.Tag[];
            status?: "available" | "pending" | "sold";
        };
        export type Body = {
            name?: string;
            status?: string;
        };
        export type Body1 = {
            additionalMetadata?: string;
            file?: string;
        };
        export type Order = {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: "placed" | "approved" | "delivered";
            complete?: boolean;
        };
        export type User = {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        export type ResponsesfindPetsByStatusResponse200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByStatusResponse200Body1 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTagsResponse200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTagsResponse200Body1 = Components.Schemas.Pet[];
        export type ApiResponse = {
            code?: number;
            type?: string;
            message?: string;
        };
        export type ResponsesgetInventoryResponse200Body0 = {
            [pattern: string]: unknown;
        };
        export type ResponsesloginUserResponse200Body0 = string;
        export type ResponsesloginUserResponse200Body1 = string;
        export type Category = {
            id?: number;
            name?: string;
        };
        export type Tag = {
            id?: number;
            name?: string;
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with pet_store.json and generateUnusedSchemas option to true 1`] = `
"export namespace AnotherAPI {
    export namespace UpdatePet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$400 | Responses.$404 | Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updatePetResponse400<400>;
            export type $404 = Components.Responses.updatePetResponse404<404>;
            export type $405 = Components.Responses.updatePetResponse405<405>;
        }
    }
    export namespace AddPet {
        export type Body = Components.RequestBodies.Pet;
        export type Output = Responses.$405;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $405 = Components.Responses.addPetResponse405<405>;
        }
    }
    export namespace FindPetsByStatus {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly status: Parameters.Status;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByStatusResponse200<200>;
            export type $400 = Components.Responses.findPetsByStatusResponse400<400>;
        }
        export namespace Parameters {
            export type Status = Components.Parameters.FindPetsByStatus0;
        }
    }
    export namespace FindPetsByTags {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly tags: Parameters.Tags;
        };
        export namespace Responses {
            export type $200 = Components.Responses.findPetsByTagsResponse200<200>;
            export type $400 = Components.Responses.findPetsByTagsResponse400<400>;
        }
        export namespace Parameters {
            export type Tags = Components.Parameters.FindPetsByTags0;
        }
    }
    export namespace GetPetById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getPetByIdResponse200<200>;
            export type $400 = Components.Responses.getPetByIdResponse400<400>;
            export type $404 = Components.Responses.getPetByIdResponse404<404>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.GetPetById0;
        }
    }
    export namespace UpdatePetWithForm {
        export type Body = Components.RequestBodies.UpdatePetWithFormRequestBody;
        export type Output = Responses.$405;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $405 = Components.Responses.updatePetWithFormResponse405<405>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UpdatePetWithForm0;
        }
    }
    export namespace DeletePet {
        export type Output = Responses.$400;
        export type Input = {
            readonly apiKey?: Parameters.ApiKey;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deletePetResponse400<400>;
        }
        export namespace Parameters {
            export type ApiKey = Components.Parameters.DeletePet0;
            export type PetId = Components.Parameters.DeletePet1;
        }
    }
    export namespace UploadFile {
        export type Body = Components.RequestBodies.UploadFileRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
            readonly petId: Parameters.PetId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.uploadFileResponse200<200>;
        }
        export namespace Parameters {
            export type PetId = Components.Parameters.UploadFile0;
        }
    }
    export namespace GetInventory {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getInventoryResponse200<200>;
        }
    }
    export namespace PlaceOrder {
        export type Body = Components.RequestBodies.PlaceOrderRequestBody;
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.placeOrderResponse200<200>;
            export type $400 = Components.Responses.placeOrderResponse400<400>;
        }
    }
    export namespace GetOrderById {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getOrderByIdResponse200<200>;
            export type $400 = Components.Responses.getOrderByIdResponse400<400>;
            export type $404 = Components.Responses.getOrderByIdResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.GetOrderById0;
        }
    }
    export namespace DeleteOrder {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly orderId: Parameters.OrderId;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteOrderResponse400<400>;
            export type $404 = Components.Responses.deleteOrderResponse404<404>;
        }
        export namespace Parameters {
            export type OrderId = Components.Parameters.DeleteOrder0;
        }
    }
    export namespace CreateUser {
        export type Body = Components.RequestBodies.CreateUserRequestBody;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUserResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithArrayInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithArrayInputResponsedefault<number>;
        }
    }
    export namespace CreateUsersWithListInput {
        export type Body = Components.RequestBodies.UserArray;
        export type Output = Responses.$default;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $default = Components.Responses.createUsersWithListInputResponsedefault<number>;
        }
    }
    export namespace LoginUser {
        export type Output = Responses.$200 | Responses.$400;
        export type Input = {
            readonly username: Parameters.Username;
            readonly password: Parameters.Password;
        };
        export namespace Responses {
            export type $200 = Components.Responses.loginUserResponse200<200>;
            export type $400 = Components.Responses.loginUserResponse400<400>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.LoginUser0;
            export type Password = Components.Parameters.LoginUser1;
        }
    }
    export namespace LogoutUser {
        export type Output = Responses.$default;
        export type Input = {};
        export namespace Responses {
            export type $default = Components.Responses.logoutUserResponsedefault<number>;
        }
    }
    export namespace GetUserByName {
        export type Output = Responses.$200 | Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $200 = Components.Responses.getUserByNameResponse200<200>;
            export type $400 = Components.Responses.getUserByNameResponse400<400>;
            export type $404 = Components.Responses.getUserByNameResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.GetUserByName0;
        }
    }
    export namespace UpdateUser {
        export type Body = Components.RequestBodies.UpdateUserRequestBody;
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly body: Body;
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.updateUserResponse400<400>;
            export type $404 = Components.Responses.updateUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.UpdateUser0;
        }
    }
    export namespace DeleteUser {
        export type Output = Responses.$400 | Responses.$404;
        export type Input = {
            readonly username: Parameters.Username;
        };
        export namespace Responses {
            export type $400 = Components.Responses.deleteUserResponse400<400>;
            export type $404 = Components.Responses.deleteUserResponse404<404>;
        }
        export namespace Parameters {
            export type Username = Components.Parameters.DeleteUser0;
        }
    }
}
export namespace Components {
    export namespace RequestBodies {
        export type UserArray = Components.Schemas.RequestBodiesUserArrayBody0;
        export type Pet = Components.Schemas.Pet | Components.Schemas.Pet;
        export type UpdatePetWithFormRequestBody = Components.Schemas.Body;
        export type UploadFileRequestBody = Components.Schemas.Body1;
        export type PlaceOrderRequestBody = Components.Schemas.Order;
        export type CreateUserRequestBody = Components.Schemas.User;
        export type UpdateUserRequestBody = Components.Schemas.User;
    }
    export namespace Parameters {
        export type GetPetById0 = number;
        export type UpdatePetWithForm0 = number;
        export type DeletePet0 = string;
        export type DeletePet1 = number;
        export type UploadFile0 = number;
        export type GetOrderById0 = number;
        export type DeleteOrder0 = string;
        export type LoginUser0 = string;
        export type LoginUser1 = string;
        export type GetUserByName0 = string;
        export type UpdateUser0 = string;
        export type DeleteUser0 = string;
        export type FindPetsByStatus0 = ("available" | "pending" | "sold")[];
        export type FindPetsByTags0 = string[];
    }
    export namespace Responses {
        export type updatePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updatePetResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updatePetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type addPetResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type findPetsByStatusResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type findPetsByTagsResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getPetByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getPetByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updatePetWithFormResponse405<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deletePetResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type placeOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getOrderByIdResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getOrderByIdResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteOrderResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteOrderResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type createUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type createUsersWithArrayInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type createUsersWithListInputResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type loginUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type logoutUserResponsedefault<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getUserByNameResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getUserByNameResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updateUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type updateUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteUserResponse400<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type deleteUserResponse404<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type findPetsByStatusResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByStatusResponse200Body0 | Components.Schemas.ResponsesfindPetsByStatusResponse200Body1;
        };
        export type findPetsByTagsResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesfindPetsByTagsResponse200Body0 | Components.Schemas.ResponsesfindPetsByTagsResponse200Body1;
        };
        export type getPetByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Pet | Components.Schemas.Pet;
        };
        export type uploadFileResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ApiResponse;
        };
        export type getInventoryResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetInventoryResponse200Body0;
        };
        export type placeOrderResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type getOrderByIdResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Order | Components.Schemas.Order;
        };
        export type getUserByNameResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.User | Components.Schemas.User;
        };
        export type loginUserResponse200<S extends number> = {
            readonly status: S;
            readonly headers: {
                readonly "x-rate-limit": Components.Headers.LoginUserResponse200HeadersXRateLimit;
                readonly "x-expires-after"?: Components.Headers.LoginUserResponse200HeadersXExpiresAfter;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesloginUserResponse200Body0 | Components.Schemas.ResponsesloginUserResponse200Body1;
        };
    }
    export namespace Headers {
        export type LoginUserResponse200HeadersXRateLimit = number;
        export type LoginUserResponse200HeadersXExpiresAfter = string;
    }
    export namespace Schemas {
        export type Order = {
            id?: number;
            petId?: number;
            quantity?: number;
            shipDate?: string;
            status?: Enums.OrderStatus;
            complete?: boolean;
        };
        export type Category = {
            id?: number;
            name?: string;
        };
        export type User = {
            id?: number;
            username?: string;
            firstName?: string;
            lastName?: string;
            email?: string;
            password?: string;
            phone?: string;
            userStatus?: number;
        };
        export type Tag = {
            id?: number;
            name?: string;
        };
        export type Pet = {
            id?: number;
            category?: Components.Schemas.Category;
            name: string;
            photoUrls: string[];
            tags?: Components.Schemas.Tag[];
            status?: Enums.PetStatusInTheStore;
        };
        export type ApiResponse = {
            code?: number;
            type?: string;
            message?: string;
        };
        export type Body = {
            name?: string;
            status?: string;
        };
        export type Body1 = {
            additionalMetadata?: string;
            file?: string;
        };
        export type RequestBodiesUserArrayBody0 = Components.Schemas.User[];
        export type ResponsesfindPetsByStatusResponse200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByStatusResponse200Body1 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTagsResponse200Body0 = Components.Schemas.Pet[];
        export type ResponsesfindPetsByTagsResponse200Body1 = Components.Schemas.Pet[];
        export type ResponsesgetInventoryResponse200Body0 = {
            [pattern: string]: unknown;
        };
        export type ResponsesloginUserResponse200Body0 = string;
        export type ResponsesloginUserResponse200Body1 = string;
    }
}
export namespace Enums {
    export enum OrderStatus {
        Placed = "placed",
        Approved = "approved",
        Delivered = "delivered"
    }
    export enum PetStatusInTheStore {
        Available = "available",
        Pending = "pending",
        Sold = "sold"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json 1`] = `
"declare namespace API {
    export namespace PostWebhooksNewPet {
        export type Body = Components.RequestBodies.PostWebhooksNewPetRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.PostWebhooksNewPetResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PostWebhooksNewPetRequestBody = Components.Schemas.Pet;
    }
    export namespace Responses {
        export type PostWebhooksNewPetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace Schemas {
        export type Pet = {
            id: number;
            name: string;
            tag?: string;
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace PostWebhooksNewPet {
        export type Body = Components.RequestBodies.PostWebhooksNewPetRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.PostWebhooksNewPetResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PostWebhooksNewPetRequestBody = Components.Schemas.Pet;
    }
    export namespace Responses {
        export type PostWebhooksNewPetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace Schemas {
        export type Pet = {
            id: number;
            name: string;
            tag?: string;
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with webhook_example.json and generateUnusedSchemas option to true 1`] = `
"export namespace AnotherAPI {
    export namespace PostWebhooksNewPet {
        export type Body = Components.RequestBodies.PostWebhooksNewPetRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body?: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.PostWebhooksNewPetResponse200<200>;
        }
    }
}
export namespace Components {
    export namespace RequestBodies {
        export type PostWebhooksNewPetRequestBody = Components.Schemas.Pet;
    }
    export namespace Responses {
        export type PostWebhooksNewPetResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
    }
    export namespace Schemas {
        export type Pet = {
            id: number;
            name: string;
            tag?: string;
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getDelayResponse204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getDiagnosticResponse200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getParametersResponse204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getTimeResponse200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.PutEchoRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.putEchoResponse200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutEchoRequestBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = number;
        export type PathParam1 = number;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type getDelayResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getDiagnosticResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetDiagnosticResponse200Body0;
        };
        export type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        export type getTimeResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type putEchoResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
        export type getParametersResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.GetParametersResponse204HeadersXDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParametersResponse204Body0;
        };
    }
    export namespace Headers {
        export type GetParametersResponse204HeadersXDelayPrecision = Enums.GetParametersResponse204HeadersXDelayPrecision;
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesgetDiagnosticResponse200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesgetOpenAPIResponse200Body0 = {};
        export type ResponsesgetParametersResponse204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
    }
}
declare namespace Enums {
    export enum GetParametersResponse204HeadersXDelayPrecision {
        Ns = "ns",
        Ms = "ms",
        S = "s"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = unknown;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getDiagnosticResponse200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = unknown;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getTimeResponse200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.PutEchoRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.putEchoResponse200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type PutEchoRequestBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = number;
        export type PathParam1 = number;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type getDiagnosticResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetDiagnosticResponse200Body0;
        };
        export type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        export type getTimeResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type putEchoResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesgetDiagnosticResponse200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesgetOpenAPIResponse200Body0 = {};
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example.json and generateUnusedSchemas option to true 1`] = `
"export namespace AnotherAPI {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getDelayResponse204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getDiagnosticResponse200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getOpenAPIResponse200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.getParametersResponse204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getTimeResponse200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.PutEchoRequestBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.putEchoResponse200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.getPingResponse200<200>;
        }
    }
}
export namespace Components {
    export namespace RequestBodies {
        export type PutEchoRequestBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = number;
        export type PathParam1 = number;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type getDelayResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type getDiagnosticResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetDiagnosticResponse200Body0;
        };
        export type getOpenAPIResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetOpenAPIResponse200Body0;
        };
        export type getTimeResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type putEchoResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type getPingResponse200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetPingResponse200Body0;
        };
        export type getParametersResponse204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.GetParametersResponse204HeadersXDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesgetParametersResponse204Body0;
        };
    }
    export namespace Headers {
        export type GetParametersResponse204HeadersXDelayPrecision = Enums.GetParametersResponse204HeadersXDelayPrecision;
    }
    export namespace Schemas {
        export type TimeSchema = {
            currentDate?: string;
        };
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesgetDiagnosticResponse200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesgetOpenAPIResponse200Body0 = {};
        export type ResponsesgetParametersResponse204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type ResponsesgetPingResponse200Body0 = {
            pong?: "pong";
        };
    }
}
export namespace Enums {
    export enum GetParametersResponse204HeadersXDelayPrecision {
        Ns = "ns",
        Ms = "ms",
        S = "s"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Delay204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Diagnostic200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.OpenAPI200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Params204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Time200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.EchoBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.Echo200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Ping200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = number;
        export type PathParam1 = number;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        export type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        export type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
        export type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesDiagnostic200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesOpenAPI200Body0 = {};
        export type ResponsesParams204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesPing200Body0 = {
            pong?: "pong";
        };
    }
}
declare namespace Enums {
    export enum XDelayPrecision {
        Ns = "ns",
        Ms = "ms",
        S = "s"
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and filterStatuses 200/201/202/300 and brandedTypes 1`] = `
"declare namespace API {
    export namespace GetDelay {
        export type Output = unknown;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Diagnostic200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.OpenAPI200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = unknown;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Time200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.EchoBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.Echo200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Ping200<200>;
        }
    }
}
declare namespace Components {
    export namespace RequestBodies {
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = number;
        export type PathParam1 = number;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        export type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        export type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
        export type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
    }
    export namespace Headers {
        export type XDelayPrecision = "ns" | "ms" | "s";
    }
    export namespace Schemas {
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesDiagnostic200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesOpenAPI200Body0 = {};
        export type ResponsesParams204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type TimeSchema = {
            currentDate?: string;
        };
        export type ResponsesPing200Body0 = {
            pong?: "pong";
        };
    }
}"
`;

exports[`generateOpenAPITypes() with OpenAPI samples should work with whook_example_components.json and generateUnusedSchemas option to true 1`] = `
"export namespace AnotherAPI {
    export namespace GetDelay {
        export type Output = Responses.$204;
        export type Input = {
            readonly duration: Parameters.Duration;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Delay204<204>;
        }
        export namespace Parameters {
            export type Duration = Components.Parameters.Duration;
        }
    }
    export namespace GetDiagnostic {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Diagnostic200<200>;
        }
    }
    export namespace GetOpenAPI {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.OpenAPI200<200>;
        }
    }
    export namespace GetParameters {
        export type Output = Responses.$204;
        export type Input = {
            readonly aHeader?: Parameters.AHeader;
            readonly pathParam1: Parameters.PathParam1;
            readonly pathParam2: Parameters.PathParam2;
        };
        export namespace Responses {
            export type $204 = Components.Responses.Params204<204>;
        }
        export namespace Parameters {
            export type AHeader = Components.Parameters.GetParameters2;
            export type PathParam1 = Components.Parameters.PathParam1;
            export type PathParam2 = Components.Parameters.PathParam2;
        }
    }
    export namespace GetTime {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Time200<200>;
        }
    }
    export namespace PutEcho {
        export type Body = Components.RequestBodies.EchoBody;
        export type Output = Responses.$200;
        export type Input = {
            readonly body: Body;
        };
        export namespace Responses {
            export type $200 = Components.Responses.Echo200<200>;
        }
    }
    export namespace GetPing {
        export type Output = Responses.$200;
        export type Input = {};
        export namespace Responses {
            export type $200 = Components.Responses.Ping200<200>;
        }
    }
}
export namespace Components {
    export namespace RequestBodies {
        export type EchoBody = Components.Schemas.Echo;
    }
    export namespace Parameters {
        export type PathParam2 = Components.Schemas.Strings;
        export type Duration = number;
        export type PathParam1 = number;
        export type GetParameters2 = boolean;
    }
    export namespace Responses {
        export type Delay204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body?: unknown;
        };
        export type Diagnostic200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesDiagnostic200Body0;
        };
        export type OpenAPI200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesOpenAPI200Body0;
        };
        export type Time200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.TimeSchema;
        };
        export type Echo200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.Echo;
        };
        export type Ping200<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesPing200Body0;
        };
        export type Params204<S extends number> = {
            readonly status: S;
            readonly headers?: {
                readonly "x-delay-precision"?: Components.Headers.XDelayPrecision;
                readonly [name: string]: unknown;
            };
            readonly body: Components.Schemas.ResponsesParams204Body0;
        };
    }
    export namespace Headers {
        export type XDelayPrecision = Enums.XDelayPrecision;
    }
    export namespace Schemas {
        export type TimeSchema = {
            currentDate?: string;
        };
        export type Echo = {
            echo: string;
        };
        export type Strings = string[];
        export type ResponsesDiagnostic200Body0 = {
            transactions: {
                [pattern: string]: unknown;
            };
        };
        export type ResponsesOpenAPI200Body0 = {};
        export type ResponsesParams204Body0 = {
            aHeader?: boolean;
            pathParam1?: number;
            pathParam2?: string[];
        };
        export type ResponsesPing200Body0 = {
            pong?: "pong";
        };
    }
}
export namespace Enums {
    export enum XDelayPrecision {
        Ns = "ns",
        Ms = "ms",
        S = "s"
    }
}"
`;
